// Generated by Haxe 4.1.0-rc.1
(function ($hx_exports, $global) { "use strict";
$hx_exports["stx"] = $hx_exports["stx"] || {};
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = "EReg";
EReg.prototype = {
	r: null
	,match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw haxe_Exception.thrown("EReg::matched");
		}
	}
	,matchedPos: function() {
		if(this.r.m == null) {
			throw haxe_Exception.thrown("No string matched");
		}
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
	,matchSub: function(s,pos,len) {
		if(len == null) {
			len = -1;
		}
		if(this.r.global) {
			this.r.lastIndex = pos;
			this.r.m = this.r.exec(len < 0 ? s : HxOverrides.substr(s,0,pos + len));
			var b = this.r.m != null;
			if(b) {
				this.r.s = s;
			}
			return b;
		} else {
			var b = this.match(len < 0 ? HxOverrides.substr(s,pos,null) : HxOverrides.substr(s,pos,len));
			if(b) {
				this.r.s = s;
				this.r.m.index += pos;
			}
			return b;
		}
	}
	,map: function(s,f) {
		var offset = 0;
		var buf_b = "";
		while(true) {
			if(offset >= s.length) {
				break;
			} else if(!this.matchSub(s,offset)) {
				buf_b += Std.string(HxOverrides.substr(s,offset,null));
				break;
			}
			var p = this.matchedPos();
			buf_b += Std.string(HxOverrides.substr(s,offset,p.pos - offset));
			buf_b += Std.string(f(this));
			if(p.len == 0) {
				buf_b += Std.string(HxOverrides.substr(s,p.pos,1));
				offset = p.pos + 1;
			} else {
				offset = p.pos + p.len;
			}
			if(!this.r.global) {
				break;
			}
		}
		if(!this.r.global && offset > 0 && offset < s.length) {
			buf_b += Std.string(HxOverrides.substr(s,offset,null));
		}
		return buf_b;
	}
	,__class__: EReg
};
var HxOverrides = function() { };
HxOverrides.__name__ = "HxOverrides";
HxOverrides.dateStr = function(date) {
	var m = date.getMonth() + 1;
	var d = date.getDate();
	var h = date.getHours();
	var mi = date.getMinutes();
	var s = date.getSeconds();
	return date.getFullYear() + "-" + (m < 10 ? "0" + m : "" + m) + "-" + (d < 10 ? "0" + d : "" + d) + " " + (h < 10 ? "0" + h : "" + h) + ":" + (mi < 10 ? "0" + mi : "" + mi) + ":" + (s < 10 ? "0" + s : "" + s);
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.now = function() {
	return Date.now();
};
var IntIterator = function(min,max) {
	this.min = min;
	this.max = max;
};
IntIterator.__name__ = "IntIterator";
IntIterator.prototype = {
	min: null
	,max: null
	,hasNext: function() {
		return this.min < this.max;
	}
	,next: function() {
		return this.min++;
	}
	,__class__: IntIterator
};
var Lambda = function() { };
Lambda.__name__ = "Lambda";
Lambda.array = function(it) {
	var a = [];
	var i = $getIterator(it);
	while(i.hasNext()) {
		var i1 = i.next();
		a.push(i1);
	}
	return a;
};
Lambda.list = function(it) {
	var l = new haxe_ds_List();
	var i = $getIterator(it);
	while(i.hasNext()) {
		var i1 = i.next();
		l.add(i1);
	}
	return l;
};
Lambda.map = function(it,f) {
	var l = new haxe_ds_List();
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		l.add(f(x1));
	}
	return l;
};
Lambda.mapi = function(it,f) {
	var l = new haxe_ds_List();
	var i = 0;
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		l.add(f(i++,x1));
	}
	return l;
};
Lambda.flatten = function(it) {
	var l = new haxe_ds_List();
	var e = $getIterator(it);
	while(e.hasNext()) {
		var e1 = e.next();
		var x = $getIterator(e1);
		while(x.hasNext()) {
			var x1 = x.next();
			l.add(x1);
		}
	}
	return l;
};
Lambda.flatMap = function(it,f) {
	return Lambda.flatten(Lambda.map(it,f));
};
Lambda.has = function(it,elt) {
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		if(x1 == elt) {
			return true;
		}
	}
	return false;
};
Lambda.exists = function(it,f) {
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		if(f(x1)) {
			return true;
		}
	}
	return false;
};
Lambda.foreach = function(it,f) {
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		if(!f(x1)) {
			return false;
		}
	}
	return true;
};
Lambda.iter = function(it,f) {
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		f(x1);
	}
};
Lambda.filter = function(it,f) {
	var l = new haxe_ds_List();
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		if(f(x1)) {
			l.add(x1);
		}
	}
	return l;
};
Lambda.fold = function(it,f,first) {
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		first = f(x1,first);
	}
	return first;
};
Lambda.count = function(it,pred) {
	var n = 0;
	if(pred == null) {
		var _ = $getIterator(it);
		while(_.hasNext()) {
			var _1 = _.next();
			++n;
		}
	} else {
		var x = $getIterator(it);
		while(x.hasNext()) {
			var x1 = x.next();
			if(pred(x1)) {
				++n;
			}
		}
	}
	return n;
};
Lambda.empty = function(it) {
	return !$getIterator(it).hasNext();
};
Lambda.indexOf = function(it,v) {
	var i = 0;
	var v2 = $getIterator(it);
	while(v2.hasNext()) {
		var v21 = v2.next();
		if(v == v21) {
			return i;
		}
		++i;
	}
	return -1;
};
Lambda.find = function(it,f) {
	var v = $getIterator(it);
	while(v.hasNext()) {
		var v1 = v.next();
		if(f(v1)) {
			return v1;
		}
	}
	return null;
};
Lambda.concat = function(a,b) {
	var l = new haxe_ds_List();
	var x = $getIterator(a);
	while(x.hasNext()) {
		var x1 = x.next();
		l.add(x1);
	}
	var x = $getIterator(b);
	while(x.hasNext()) {
		var x1 = x.next();
		l.add(x1);
	}
	return l;
};
var Main = function() { };
Main.__name__ = "Main";
Main.main = function() {
	haxe_Log.trace("stx_asys",{ fileName : "Main.hx", lineNumber : 13, className : "Main", methodName : "main"});
	var cwd = new stx_asys_pack_Cwd();
	stx_arrowlet_core_pack_arrowlet_term_Thread.submit(stx_arrowlet_pack_CascadeLift.context(stx_arrowlet_pack_ReframeLift.evaluation(stx_arrowlet_pack_ReframeLift.arrange(stx_arrowlet_pack_AttemptLift.reframe(stx_arrowlet_pack_AttemptLift.process(cwd.pop(),stx_arrowlet_pack_Process.fromFun1R(function(dir) {
		return stx_fs_path_pack_Directory.into(dir,["src","main","haxe","stx","asys","alias"]);
	}))),stx_arrowlet_pack_Arrange.fromFun1Attempt(stx_fs_path_pack_Directory._.term))),stx_asys_pack_LocalHost.unit().toHasDevice(),function(x) {
		var jsonic = jali_pack_TermLift.toJsonic(x);
		var string = JSON.stringify(jsonic,null," ");
		haxe_Log.trace(stx_show_Lift.show(stx_core_pack_Wildcard.__,jsonic),{ fileName : "Main.hx", lineNumber : 23, className : "Main", methodName : "main"});
	},function(_) {
	}));
};
Math.__name__ = "Math";
var Reflect = function() { };
Reflect.__name__ = "Reflect";
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
		return null;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) {
		return true;
	}
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) {
		return false;
	}
	if(f1.scope == f2.scope && f1.method == f2.method) {
		return f1.method != null;
	} else {
		return false;
	}
};
var Std = function() { };
Std.__name__ = "Std";
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	if(x != null) {
		var _g = 0;
		var _g1 = x.length;
		while(_g < _g1) {
			var i = _g++;
			var c = x.charCodeAt(i);
			if(c <= 8 || c >= 14 && c != 32 && c != 45) {
				var nc = x.charCodeAt(i + 1);
				var v = parseInt(x,nc == 120 || nc == 88 ? 16 : 10);
				if(isNaN(v)) {
					return null;
				} else {
					return v;
				}
			}
		}
	}
	return null;
};
Std.parseFloat = function(x) {
	return parseFloat(x);
};
var StringBuf = function() {
	this.b = "";
};
StringBuf.__name__ = "StringBuf";
StringBuf.prototype = {
	b: null
	,__class__: StringBuf
};
var StringTools = function() { };
StringTools.__name__ = "StringTools";
StringTools.htmlEscape = function(s,quotes) {
	var buf_b = "";
	var _g_offset = 0;
	var _g_s = s;
	while(_g_offset < _g_s.length) {
		var s = _g_s;
		var index = _g_offset++;
		var c = s.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
		}
		var c1 = c;
		if(c1 >= 65536) {
			++_g_offset;
		}
		var code = c1;
		switch(code) {
		case 34:
			if(quotes) {
				buf_b += "&quot;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 38:
			buf_b += "&amp;";
			break;
		case 39:
			if(quotes) {
				buf_b += "&#039;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 60:
			buf_b += "&lt;";
			break;
		case 62:
			buf_b += "&gt;";
			break;
		default:
			buf_b += String.fromCodePoint(code);
		}
	}
	return buf_b;
};
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return s.lastIndexOf(start,0) == 0;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.lpad = function(s,c,l) {
	if(c.length <= 0) {
		return s;
	}
	var buf_b = "";
	l -= s.length;
	while(buf_b.length < l) buf_b += c == null ? "null" : "" + c;
	buf_b += s == null ? "null" : "" + s;
	return buf_b;
};
StringTools.rpad = function(s,c,l) {
	if(c.length <= 0) {
		return s;
	}
	var buf_b = "";
	buf_b += s == null ? "null" : "" + s;
	while(buf_b.length < l) buf_b += c == null ? "null" : "" + c;
	return buf_b;
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
StringTools.hex = function(n,digits) {
	var s = "";
	var hexChars = "0123456789ABCDEF";
	while(true) {
		s = hexChars.charAt(n & 15) + s;
		n >>>= 4;
		if(!(n > 0)) {
			break;
		}
	}
	if(digits != null) {
		while(s.length < digits) s = "0" + s;
	}
	return s;
};
StringTools.fastCodeAt = function(s,index) {
	return s.charCodeAt(index);
};
var Sys = function() { };
Sys.__name__ = "Sys";
Sys.systemName = function() {
	var _g = process.platform;
	switch(_g) {
	case "darwin":
		return "Mac";
	case "freebsd":
		return "BSD";
	case "linux":
		return "Linux";
	case "win32":
		return "Windows";
	default:
		var other = _g;
		return other;
	}
};
Sys.getChar = function(echo) {
	throw haxe_Exception.thrown("Sys.getChar is currently not implemented on node.js");
};
Sys.sleep = function(seconds) {
	var end = Date.now() + seconds * 1000;
	while(Date.now() <= end) {
	}
};
var haxe_io_Output = function() { };
haxe_io_Output.__name__ = "haxe.io.Output";
haxe_io_Output.prototype = {
	bigEndian: null
	,writeByte: function(c) {
		throw haxe_Exception.thrown("Not implemented");
	}
	,writeBytes: function(s,pos,len) {
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		var b = s.b;
		var k = len;
		while(k > 0) {
			this.writeByte(b[pos]);
			++pos;
			--k;
		}
		return len;
	}
	,set_bigEndian: function(b) {
		this.bigEndian = b;
		return b;
	}
	,writeFullBytes: function(s,pos,len) {
		while(len > 0) {
			var k = this.writeBytes(s,pos,len);
			pos += k;
			len -= k;
		}
	}
	,writeFloat: function(x) {
		this.writeInt32(haxe_io_FPHelper.floatToI32(x));
	}
	,writeDouble: function(x) {
		var i64 = haxe_io_FPHelper.doubleToI64(x);
		if(this.bigEndian) {
			this.writeInt32(i64.high);
			this.writeInt32(i64.low);
		} else {
			this.writeInt32(i64.low);
			this.writeInt32(i64.high);
		}
	}
	,writeInt8: function(x) {
		if(x < -128 || x >= 128) {
			throw haxe_Exception.thrown(haxe_io_Error.Overflow);
		}
		this.writeByte(x & 255);
	}
	,writeInt16: function(x) {
		if(x < -32768 || x >= 32768) {
			throw haxe_Exception.thrown(haxe_io_Error.Overflow);
		}
		this.writeUInt16(x & 65535);
	}
	,writeUInt16: function(x) {
		if(x < 0 || x >= 65536) {
			throw haxe_Exception.thrown(haxe_io_Error.Overflow);
		}
		if(this.bigEndian) {
			this.writeByte(x >> 8);
			this.writeByte(x & 255);
		} else {
			this.writeByte(x & 255);
			this.writeByte(x >> 8);
		}
	}
	,writeInt24: function(x) {
		if(x < -8388608 || x >= 8388608) {
			throw haxe_Exception.thrown(haxe_io_Error.Overflow);
		}
		this.writeUInt24(x & 16777215);
	}
	,writeUInt24: function(x) {
		if(x < 0 || x >= 16777216) {
			throw haxe_Exception.thrown(haxe_io_Error.Overflow);
		}
		if(this.bigEndian) {
			this.writeByte(x >> 16);
			this.writeByte(x >> 8 & 255);
			this.writeByte(x & 255);
		} else {
			this.writeByte(x & 255);
			this.writeByte(x >> 8 & 255);
			this.writeByte(x >> 16);
		}
	}
	,writeInt32: function(x) {
		if(this.bigEndian) {
			this.writeByte(x >>> 24);
			this.writeByte(x >> 16 & 255);
			this.writeByte(x >> 8 & 255);
			this.writeByte(x & 255);
		} else {
			this.writeByte(x & 255);
			this.writeByte(x >> 8 & 255);
			this.writeByte(x >> 16 & 255);
			this.writeByte(x >>> 24);
		}
	}
	,writeString: function(s,encoding) {
		var b = haxe_io_Bytes.ofString(s,encoding);
		this.writeFullBytes(b,0,b.length);
	}
	,__class__: haxe_io_Output
};
var _$Sys_FileOutput = function(fd) {
	this.fd = fd;
};
_$Sys_FileOutput.__name__ = "_Sys.FileOutput";
_$Sys_FileOutput.__super__ = haxe_io_Output;
_$Sys_FileOutput.prototype = $extend(haxe_io_Output.prototype,{
	fd: null
	,writeByte: function(c) {
		js_node_Fs.writeSync(this.fd,String.fromCodePoint(c));
	}
	,writeBytes: function(s,pos,len) {
		var data = s.b;
		return js_node_Fs.writeSync(this.fd,js_node_buffer_Buffer.from(data.buffer,data.byteOffset,s.length),pos,len);
	}
	,writeString: function(s,encoding) {
		js_node_Fs.writeSync(this.fd,s);
	}
	,flush: function() {
		js_node_Fs.fsyncSync(this.fd);
	}
	,close: function() {
		js_node_Fs.closeSync(this.fd);
	}
	,__class__: _$Sys_FileOutput
});
var haxe_io_Input = function() { };
haxe_io_Input.__name__ = "haxe.io.Input";
haxe_io_Input.prototype = {
	bigEndian: null
	,readByte: function() {
		throw haxe_Exception.thrown("Not implemented");
	}
	,readBytes: function(s,pos,len) {
		var k = len;
		var b = s.b;
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		try {
			while(k > 0) {
				b[pos] = this.readByte();
				++pos;
				--k;
			}
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			if(!((haxe_Exception.caught(_g).unwrap()) instanceof haxe_io_Eof)) {
				throw _g;
			}
		}
		return len - k;
	}
	,set_bigEndian: function(b) {
		this.bigEndian = b;
		return b;
	}
	,readLine: function() {
		var buf = new haxe_io_BytesBuffer();
		var last;
		var s;
		try {
			while(true) {
				last = this.readByte();
				if(!(last != 10)) {
					break;
				}
				buf.addByte(last);
			}
			s = buf.getBytes().toString();
			if(HxOverrides.cca(s,s.length - 1) == 13) {
				s = HxOverrides.substr(s,0,-1);
			}
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			var _g1 = haxe_Exception.caught(_g).unwrap();
			if(((_g1) instanceof haxe_io_Eof)) {
				var e = _g1;
				s = buf.getBytes().toString();
				if(s.length == 0) {
					throw haxe_Exception.thrown(e);
				}
			} else {
				throw _g;
			}
		}
		return s;
	}
	,readFloat: function() {
		return haxe_io_FPHelper.i32ToFloat(this.readInt32());
	}
	,readDouble: function() {
		var i1 = this.readInt32();
		var i2 = this.readInt32();
		if(this.bigEndian) {
			return haxe_io_FPHelper.i64ToDouble(i2,i1);
		} else {
			return haxe_io_FPHelper.i64ToDouble(i1,i2);
		}
	}
	,readInt8: function() {
		var n = this.readByte();
		if(n >= 128) {
			return n - 256;
		}
		return n;
	}
	,readInt16: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var n = this.bigEndian ? ch2 | ch1 << 8 : ch1 | ch2 << 8;
		if((n & 32768) != 0) {
			return n - 65536;
		}
		return n;
	}
	,readUInt16: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		if(this.bigEndian) {
			return ch2 | ch1 << 8;
		} else {
			return ch1 | ch2 << 8;
		}
	}
	,readInt24: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var ch3 = this.readByte();
		var n = this.bigEndian ? ch3 | ch2 << 8 | ch1 << 16 : ch1 | ch2 << 8 | ch3 << 16;
		if((n & 8388608) != 0) {
			return n - 16777216;
		}
		return n;
	}
	,readUInt24: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var ch3 = this.readByte();
		if(this.bigEndian) {
			return ch3 | ch2 << 8 | ch1 << 16;
		} else {
			return ch1 | ch2 << 8 | ch3 << 16;
		}
	}
	,readInt32: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var ch3 = this.readByte();
		var ch4 = this.readByte();
		if(this.bigEndian) {
			return ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
		} else {
			return ch1 | ch2 << 8 | ch3 << 16 | ch4 << 24;
		}
	}
	,__class__: haxe_io_Input
};
var _$Sys_FileInput = function(fd) {
	this.fd = fd;
};
_$Sys_FileInput.__name__ = "_Sys.FileInput";
_$Sys_FileInput.__super__ = haxe_io_Input;
_$Sys_FileInput.prototype = $extend(haxe_io_Input.prototype,{
	fd: null
	,readByte: function() {
		var buf = js_node_buffer_Buffer.alloc(1);
		try {
			js_node_Fs.readSync(this.fd,buf,0,1,null);
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			var e = haxe_Exception.caught(_g).unwrap();
			if(e.code == "EOF") {
				throw haxe_Exception.thrown(new haxe_io_Eof());
			} else {
				throw haxe_Exception.thrown(haxe_io_Error.Custom(e));
			}
		}
		return buf[0];
	}
	,readBytes: function(s,pos,len) {
		var data = s.b;
		var buf = js_node_buffer_Buffer.from(data.buffer,data.byteOffset,s.length);
		try {
			return js_node_Fs.readSync(this.fd,buf,pos,len,null);
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			var e = haxe_Exception.caught(_g).unwrap();
			if(e.code == "EOF") {
				throw haxe_Exception.thrown(new haxe_io_Eof());
			} else {
				throw haxe_Exception.thrown(haxe_io_Error.Custom(e));
			}
		}
	}
	,close: function() {
		js_node_Fs.closeSync(this.fd);
	}
	,__class__: _$Sys_FileInput
});
var ValueType = $hxEnums["ValueType"] = { __ename__ : "ValueType", __constructs__ : ["TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"]
	,TNull: {_hx_index:0,__enum__:"ValueType",toString:$estr}
	,TInt: {_hx_index:1,__enum__:"ValueType",toString:$estr}
	,TFloat: {_hx_index:2,__enum__:"ValueType",toString:$estr}
	,TBool: {_hx_index:3,__enum__:"ValueType",toString:$estr}
	,TObject: {_hx_index:4,__enum__:"ValueType",toString:$estr}
	,TFunction: {_hx_index:5,__enum__:"ValueType",toString:$estr}
	,TClass: ($_=function(c) { return {_hx_index:6,c:c,__enum__:"ValueType",toString:$estr}; },$_.__params__ = ["c"],$_)
	,TEnum: ($_=function(e) { return {_hx_index:7,e:e,__enum__:"ValueType",toString:$estr}; },$_.__params__ = ["e"],$_)
	,TUnknown: {_hx_index:8,__enum__:"ValueType",toString:$estr}
};
var Type = function() { };
Type.__name__ = "Type";
Type.getEnum = function(o) {
	if(o == null) {
		return null;
	}
	return $hxEnums[o.__enum__];
};
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) {
		throw haxe_Exception.thrown("No such constructor " + constr);
	}
	if(Reflect.isFunction(f)) {
		if(params == null) {
			throw haxe_Exception.thrown("Constructor " + constr + " need parameters");
		}
		return f.apply(e,params);
	}
	if(params != null && params.length != 0) {
		throw haxe_Exception.thrown("Constructor " + constr + " does not need parameters");
	}
	return f;
};
Type.createEnumIndex = function(e,index,params) {
	var c = e.__constructs__[index];
	if(c == null) {
		throw haxe_Exception.thrown(index + " is not a valid enum constructor index");
	}
	return Type.createEnum(e,c,params);
};
Type.getInstanceFields = function(c) {
	var a = [];
	for(var i in c.prototype) a.push(i);
	HxOverrides.remove(a,"__class__");
	HxOverrides.remove(a,"__properties__");
	return a;
};
Type.typeof = function(v) {
	switch(typeof(v)) {
	case "boolean":
		return ValueType.TBool;
	case "function":
		if(v.__name__ || v.__ename__) {
			return ValueType.TObject;
		}
		return ValueType.TFunction;
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) {
			return ValueType.TInt;
		}
		return ValueType.TFloat;
	case "object":
		if(v == null) {
			return ValueType.TNull;
		}
		var e = v.__enum__;
		if(e != null) {
			return ValueType.TEnum($hxEnums[e]);
		}
		var c = js_Boot.getClass(v);
		if(c != null) {
			return ValueType.TClass(c);
		}
		return ValueType.TObject;
	case "string":
		return ValueType.TClass(String);
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
Type.enumParameters = function(e) {
	var enm = $hxEnums[e.__enum__];
	var ctorName = enm.__constructs__[e._hx_index];
	var params = enm[ctorName].__params__;
	if(params != null) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < params.length) {
			var p = params[_g1];
			++_g1;
			_g.push(e[p]);
		}
		return _g;
	} else {
		return [];
	}
};
var be_Constant = function() { };
be_Constant.__name__ = "be.Constant";
var be_F = {};
be_F.get_MIN = function() {
	return Number.MIN_VALUE;
};
be_F.get_MAX = function() {
	return Number.MAX_VALUE;
};
var be_I = {};
be_I.get_MIN = function() {
	return Number.MIN_SAFE_INTEGER;
};
be_I.get_MAX = function() {
	return Number.MAX_SAFE_INTEGER;
};
var haxe_StackItem = $hxEnums["haxe.StackItem"] = { __ename__ : "haxe.StackItem", __constructs__ : ["CFunction","Module","FilePos","Method","LocalFunction"]
	,CFunction: {_hx_index:0,__enum__:"haxe.StackItem",toString:$estr}
	,Module: ($_=function(m) { return {_hx_index:1,m:m,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["m"],$_)
	,FilePos: ($_=function(s,file,line,column) { return {_hx_index:2,s:s,file:file,line:line,column:column,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["s","file","line","column"],$_)
	,Method: ($_=function(classname,method) { return {_hx_index:3,classname:classname,method:method,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["classname","method"],$_)
	,LocalFunction: ($_=function(v) { return {_hx_index:4,v:v,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["v"],$_)
};
var haxe_CallStack = {};
haxe_CallStack.callStack = function() {
	return haxe_NativeStackTrace.toHaxe(haxe_NativeStackTrace.callStack());
};
haxe_CallStack.exceptionStack = function() {
	var eStack = haxe_NativeStackTrace.toHaxe(haxe_NativeStackTrace.exceptionStack());
	return haxe_CallStack.subtract(eStack,haxe_CallStack.callStack());
};
haxe_CallStack.toString = function(stack) {
	var b = new StringBuf();
	var _g = 0;
	var _g1 = stack;
	while(_g < _g1.length) {
		var s = _g1[_g];
		++_g;
		b.b += "\nCalled from ";
		haxe_CallStack.itemToString(b,s);
	}
	return b.b;
};
haxe_CallStack.subtract = function(this1,stack) {
	var startIndex = -1;
	var i = -1;
	while(++i < this1.length) {
		var _g = 0;
		var _g1 = stack.length;
		while(_g < _g1) {
			var j = _g++;
			if(haxe_CallStack.equalItems(this1[i],stack[j])) {
				if(startIndex < 0) {
					startIndex = i;
				}
				++i;
				if(i >= this1.length) {
					break;
				}
			} else {
				startIndex = -1;
			}
		}
		if(startIndex >= 0) {
			break;
		}
	}
	if(startIndex >= 0) {
		return this1.slice(0,startIndex);
	} else {
		return this1;
	}
};
haxe_CallStack.equalItems = function(item1,item2) {
	if(item1 == null) {
		if(item2 == null) {
			return true;
		} else {
			return false;
		}
	} else {
		switch(item1._hx_index) {
		case 0:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 0) {
				return true;
			} else {
				return false;
			}
			break;
		case 1:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 1) {
				var m1 = item1.m;
				var m2 = item2.m;
				return m1 == m2;
			} else {
				return false;
			}
			break;
		case 2:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 2) {
				var item11 = item1.s;
				var file1 = item1.file;
				var line1 = item1.line;
				var col1 = item1.column;
				var col2 = item2.column;
				var line2 = item2.line;
				var file2 = item2.file;
				var item21 = item2.s;
				if(file1 == file2 && line1 == line2 && col1 == col2) {
					return haxe_CallStack.equalItems(item11,item21);
				} else {
					return false;
				}
			} else {
				return false;
			}
			break;
		case 3:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 3) {
				var class1 = item1.classname;
				var method1 = item1.method;
				var method2 = item2.method;
				var class2 = item2.classname;
				if(class1 == class2) {
					return method1 == method2;
				} else {
					return false;
				}
			} else {
				return false;
			}
			break;
		case 4:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 4) {
				var v1 = item1.v;
				var v2 = item2.v;
				return v1 == v2;
			} else {
				return false;
			}
			break;
		}
	}
};
haxe_CallStack.itemToString = function(b,s) {
	switch(s._hx_index) {
	case 0:
		b.b += "a C function";
		break;
	case 1:
		var m = s.m;
		b.b += "module ";
		b.b += m == null ? "null" : "" + m;
		break;
	case 2:
		var col = s.column;
		var line = s.line;
		var file = s.file;
		var s1 = s.s;
		if(s1 != null) {
			haxe_CallStack.itemToString(b,s1);
			b.b += " (";
		}
		b.b += file == null ? "null" : "" + file;
		b.b += " line ";
		b.b += line == null ? "null" : "" + line;
		if(col != null) {
			b.b += " column ";
			b.b += col == null ? "null" : "" + col;
		}
		if(s1 != null) {
			b.b += ")";
		}
		break;
	case 3:
		var meth = s.method;
		var cname = s.classname;
		b.b += Std.string(cname == null ? "<unknown>" : cname);
		b.b += ".";
		b.b += meth == null ? "null" : "" + meth;
		break;
	case 4:
		var n = s.v;
		b.b += "local function #";
		b.b += n == null ? "null" : "" + n;
		break;
	}
};
var haxe_IMap = function() { };
haxe_IMap.__name__ = "haxe.IMap";
haxe_IMap.__isInterface__ = true;
haxe_IMap.prototype = {
	get: null
	,set: null
	,exists: null
	,keys: null
	,keyValueIterator: null
	,__class__: haxe_IMap
};
var haxe_EntryPoint = function() { };
haxe_EntryPoint.__name__ = "haxe.EntryPoint";
haxe_EntryPoint.runInMainThread = function(f) {
	haxe_EntryPoint.pending.push(f);
};
haxe_EntryPoint.processEvents = function() {
	while(true) {
		var f = haxe_EntryPoint.pending.shift();
		if(f == null) {
			break;
		}
		f();
	}
	var time = haxe_MainLoop.tick();
	if(!haxe_MainLoop.hasEvents() && haxe_EntryPoint.threadCount == 0) {
		return -1;
	}
	return time;
};
haxe_EntryPoint.run = function() {
	var nextTick = haxe_EntryPoint.processEvents();
	if(nextTick >= 0) {
		setTimeout(haxe_EntryPoint.run,nextTick * 1000);
	}
};
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
};
haxe_Exception.__name__ = "haxe.Exception";
haxe_Exception.caught = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value;
	} else if(((value) instanceof Error)) {
		return new haxe_Exception(value.message,null,value);
	} else {
		return new haxe_ValueException(value,null,value);
	}
};
haxe_Exception.thrown = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value.get_native();
	} else if(((value) instanceof Error)) {
		return value;
	} else {
		var e = new haxe_ValueException(value);
		return e;
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	__skipStack: null
	,__nativeException: null
	,__previousException: null
	,unwrap: function() {
		return this.__nativeException;
	}
	,get_native: function() {
		return this.__nativeException;
	}
	,__class__: haxe_Exception
});
var haxe__$Int64__$_$_$Int64 = function(high,low) {
	this.high = high;
	this.low = low;
};
haxe__$Int64__$_$_$Int64.__name__ = "haxe._Int64.___Int64";
haxe__$Int64__$_$_$Int64.prototype = {
	high: null
	,low: null
	,__class__: haxe__$Int64__$_$_$Int64
};
var haxe_Log = function() { };
haxe_Log.__name__ = "haxe.Log";
haxe_Log.formatOutput = function(v,infos) {
	var str = Std.string(v);
	if(infos == null) {
		return str;
	}
	var pstr = infos.fileName + ":" + infos.lineNumber;
	if(infos.customParams != null) {
		var _g = 0;
		var _g1 = infos.customParams;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			str += ", " + Std.string(v);
		}
	}
	return pstr + ": " + str;
};
haxe_Log.trace = function(v,infos) {
	var str = haxe_Log.formatOutput(v,infos);
	if(typeof(console) != "undefined" && console.log != null) {
		console.log(str);
	}
};
var haxe_MainEvent = function(f,p) {
	this.isBlocking = true;
	this.f = f;
	this.priority = p;
	this.nextRun = -Infinity;
};
haxe_MainEvent.__name__ = "haxe.MainEvent";
haxe_MainEvent.prototype = {
	f: null
	,prev: null
	,next: null
	,isBlocking: null
	,nextRun: null
	,priority: null
	,delay: function(t) {
		var tmp;
		if(t == null) {
			tmp = -Infinity;
		} else {
			var hrtime = process.hrtime();
			tmp = hrtime[0] + hrtime[1] / 1e9 + t;
		}
		this.nextRun = tmp;
	}
	,stop: function() {
		if(this.f == null) {
			return;
		}
		this.f = null;
		this.nextRun = -Infinity;
		if(this.prev == null) {
			haxe_MainLoop.pending = this.next;
		} else {
			this.prev.next = this.next;
		}
		if(this.next != null) {
			this.next.prev = this.prev;
		}
	}
	,__class__: haxe_MainEvent
};
var haxe_MainLoop = function() { };
haxe_MainLoop.__name__ = "haxe.MainLoop";
haxe_MainLoop.hasEvents = function() {
	var p = haxe_MainLoop.pending;
	while(p != null) {
		if(p.isBlocking) {
			return true;
		}
		p = p.next;
	}
	return false;
};
haxe_MainLoop.runInMainThread = function(f) {
	haxe_EntryPoint.runInMainThread(f);
};
haxe_MainLoop.add = function(f,priority) {
	if(priority == null) {
		priority = 0;
	}
	if(f == null) {
		throw haxe_Exception.thrown("Event function is null");
	}
	var e = new haxe_MainEvent(f,priority);
	var head = haxe_MainLoop.pending;
	if(head != null) {
		head.prev = e;
	}
	e.next = head;
	haxe_MainLoop.pending = e;
	return e;
};
haxe_MainLoop.sortEvents = function() {
	var list = haxe_MainLoop.pending;
	if(list == null) {
		return;
	}
	var insize = 1;
	var nmerges;
	var psize = 0;
	var qsize = 0;
	var p;
	var q;
	var e;
	var tail;
	while(true) {
		p = list;
		list = null;
		tail = null;
		nmerges = 0;
		while(p != null) {
			++nmerges;
			q = p;
			psize = 0;
			var _g = 0;
			var _g1 = insize;
			while(_g < _g1) {
				var i = _g++;
				++psize;
				q = q.next;
				if(q == null) {
					break;
				}
			}
			qsize = insize;
			while(psize > 0 || qsize > 0 && q != null) {
				if(psize == 0) {
					e = q;
					q = q.next;
					--qsize;
				} else if(qsize == 0 || q == null || (p.priority > q.priority || p.priority == q.priority && p.nextRun <= q.nextRun)) {
					e = p;
					p = p.next;
					--psize;
				} else {
					e = q;
					q = q.next;
					--qsize;
				}
				if(tail != null) {
					tail.next = e;
				} else {
					list = e;
				}
				e.prev = tail;
				tail = e;
			}
			p = q;
		}
		tail.next = null;
		if(nmerges <= 1) {
			break;
		}
		insize *= 2;
	}
	list.prev = null;
	haxe_MainLoop.pending = list;
};
haxe_MainLoop.tick = function() {
	haxe_MainLoop.sortEvents();
	var e = haxe_MainLoop.pending;
	var hrtime = process.hrtime();
	var now = hrtime[0] + hrtime[1] / 1e9;
	var wait = 1e9;
	while(e != null) {
		var next = e.next;
		var wt = e.nextRun - now;
		if(wt <= 0) {
			wait = 0;
			if(e.f != null) {
				e.f();
			}
		} else if(wait > wt) {
			wait = wt;
		}
		e = next;
	}
	return wait;
};
var haxe_NativeStackTrace = function() { };
haxe_NativeStackTrace.__name__ = "haxe.NativeStackTrace";
haxe_NativeStackTrace.saveStack = function(e) {
	haxe_NativeStackTrace.lastError = e;
};
haxe_NativeStackTrace.callStack = function() {
	var e = new Error("");
	var stack = haxe_NativeStackTrace.tryHaxeStack(e);
	if(typeof(stack) == "undefined") {
		try {
			throw e;
		} catch( _g ) {
		}
		stack = e.stack;
	}
	return haxe_NativeStackTrace.normalize(stack,2);
};
haxe_NativeStackTrace.exceptionStack = function() {
	return haxe_NativeStackTrace.normalize(haxe_NativeStackTrace.tryHaxeStack(haxe_NativeStackTrace.lastError));
};
haxe_NativeStackTrace.toHaxe = function(s,skip) {
	if(skip == null) {
		skip = 0;
	}
	if(s == null) {
		return [];
	} else if(typeof(s) == "string") {
		var stack = s.split("\n");
		if(stack[0] == "Error") {
			stack.shift();
		}
		var m = [];
		var _g = 0;
		var _g1 = stack.length;
		while(_g < _g1) {
			var i = _g++;
			if(skip > i) {
				continue;
			}
			var line = stack[i];
			var matched = line.match(/^    at ([A-Za-z0-9_. ]+) \(([^)]+):([0-9]+):([0-9]+)\)$/);
			if(matched != null) {
				var path = matched[1].split(".");
				if(path[0] == "$hxClasses") {
					path.shift();
				}
				var meth = path.pop();
				var file = matched[2];
				var line1 = Std.parseInt(matched[3]);
				var column = Std.parseInt(matched[4]);
				m.push(haxe_StackItem.FilePos(meth == "Anonymous function" ? haxe_StackItem.LocalFunction() : meth == "Global code" ? null : haxe_StackItem.Method(path.join("."),meth),file,line1,column));
			} else {
				m.push(haxe_StackItem.Module(StringTools.trim(line)));
			}
		}
		return m;
	} else if(skip > 0 && Array.isArray(s)) {
		return s.slice(skip);
	} else {
		return s;
	}
};
haxe_NativeStackTrace.tryHaxeStack = function(e) {
	if(e == null) {
		return [];
	}
	var oldValue = Error.prepareStackTrace;
	Error.prepareStackTrace = haxe_NativeStackTrace.prepareHxStackTrace;
	var stack = e.stack;
	Error.prepareStackTrace = oldValue;
	return stack;
};
haxe_NativeStackTrace.prepareHxStackTrace = function(e,callsites) {
	var stack = [];
	var _g = 0;
	while(_g < callsites.length) {
		var site = callsites[_g];
		++_g;
		if(haxe_NativeStackTrace.wrapCallSite != null) {
			site = haxe_NativeStackTrace.wrapCallSite(site);
		}
		var method = null;
		var fullName = site.getFunctionName();
		if(fullName != null) {
			var idx = fullName.lastIndexOf(".");
			if(idx >= 0) {
				var className = fullName.substring(0,idx);
				var methodName = fullName.substring(idx + 1);
				method = haxe_StackItem.Method(className,methodName);
			} else {
				method = haxe_StackItem.Method(null,fullName);
			}
		}
		var fileName = site.getFileName();
		var fileAddr = fileName == null ? -1 : fileName.indexOf("file:");
		if(haxe_NativeStackTrace.wrapCallSite != null && fileAddr > 0) {
			fileName = fileName.substring(fileAddr + 6);
		}
		stack.push(haxe_StackItem.FilePos(method,fileName,site.getLineNumber(),site.getColumnNumber()));
	}
	return stack;
};
haxe_NativeStackTrace.normalize = function(stack,skipItems) {
	if(skipItems == null) {
		skipItems = 0;
	}
	if(Array.isArray(stack) && skipItems > 0) {
		return stack.slice(skipItems);
	} else if(typeof(stack) == "string") {
		switch(stack.substring(0,6)) {
		case "Error\n":case "Error:":
			++skipItems;
			break;
		default:
		}
		return haxe_NativeStackTrace.skipLines(stack,skipItems);
	} else {
		return stack;
	}
};
haxe_NativeStackTrace.skipLines = function(stack,skip,pos) {
	if(pos == null) {
		pos = 0;
	}
	if(skip > 0) {
		pos = stack.indexOf("\n",pos);
		if(pos < 0) {
			return "";
		} else {
			return haxe_NativeStackTrace.skipLines(stack,--skip,pos + 1);
		}
	} else {
		return stack.substring(pos);
	}
};
var haxe_Resource = function() { };
haxe_Resource.__name__ = "haxe.Resource";
haxe_Resource.listNames = function() {
	var _g = [];
	var _g1 = 0;
	var _g2 = haxe_Resource.content;
	while(_g1 < _g2.length) {
		var x = _g2[_g1];
		++_g1;
		_g.push(x.name);
	}
	return _g;
};
haxe_Resource.getString = function(name) {
	var _g = 0;
	var _g1 = haxe_Resource.content;
	while(_g < _g1.length) {
		var x = _g1[_g];
		++_g;
		if(x.name == name) {
			if(x.str != null) {
				return x.str;
			}
			var b = haxe_crypto_Base64.decode(x.data);
			return b.toString();
		}
	}
	return null;
};
haxe_Resource.getBytes = function(name) {
	var _g = 0;
	var _g1 = haxe_Resource.content;
	while(_g < _g1.length) {
		var x = _g1[_g];
		++_g;
		if(x.name == name) {
			if(x.str != null) {
				return haxe_io_Bytes.ofString(x.str);
			}
			return haxe_crypto_Base64.decode(x.data);
		}
	}
	return null;
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
haxe_Timer.__name__ = "haxe.Timer";
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.prototype = {
	id: null
	,stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
};
haxe_ValueException.__name__ = "haxe.ValueException";
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
	value: null
	,unwrap: function() {
		return this.value;
	}
	,__class__: haxe_ValueException
});
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
haxe_io_Bytes.__name__ = "haxe.io.Bytes";
haxe_io_Bytes.ofString = function(s,encoding) {
	if(encoding == haxe_io_Encoding.RawNative) {
		var buf = new Uint8Array(s.length << 1);
		var _g = 0;
		var _g1 = s.length;
		while(_g < _g1) {
			var i = _g++;
			var c = s.charCodeAt(i);
			buf[i << 1] = c & 255;
			buf[i << 1 | 1] = c >> 8;
		}
		return new haxe_io_Bytes(buf.buffer);
	}
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = s.charCodeAt(i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.prototype = {
	length: null
	,b: null
	,getString: function(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(encoding == null) {
			encoding = haxe_io_Encoding.UTF8;
		}
		var s = "";
		var b = this.b;
		var i = pos;
		var max = pos + len;
		switch(encoding._hx_index) {
		case 0:
			var debug = pos > 0;
			while(i < max) {
				var c = b[i++];
				if(c < 128) {
					if(c == 0) {
						break;
					}
					s += String.fromCodePoint(c);
				} else if(c < 224) {
					var code = (c & 63) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else if(c < 240) {
					var c2 = b[i++];
					var code1 = (c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code1);
				} else {
					var c21 = b[i++];
					var c3 = b[i++];
					var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(u);
				}
			}
			break;
		case 1:
			while(i < max) {
				var c = b[i++] | b[i++] << 8;
				s += String.fromCodePoint(c);
			}
			break;
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,__class__: haxe_io_Bytes
};
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__ : "haxe.io.Encoding", __constructs__ : ["UTF8","RawNative"]
	,UTF8: {_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
var haxe_crypto_Base64 = function() { };
haxe_crypto_Base64.__name__ = "haxe.crypto.Base64";
haxe_crypto_Base64.decode = function(str,complement) {
	if(complement == null) {
		complement = true;
	}
	if(complement) {
		while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
	}
	return new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).decodeBytes(haxe_io_Bytes.ofString(str));
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) ++nbits;
	if(nbits > 8 || len != 1 << nbits) {
		throw haxe_Exception.thrown("BaseCode : base length must be a power of two.");
	}
	this.base = base;
	this.nbits = nbits;
};
haxe_crypto_BaseCode.__name__ = "haxe.crypto.BaseCode";
haxe_crypto_BaseCode.prototype = {
	base: null
	,nbits: null
	,tbl: null
	,initTable: function() {
		var tbl = [];
		var _g = 0;
		while(_g < 256) {
			var i = _g++;
			tbl[i] = -1;
		}
		var _g = 0;
		var _g1 = this.base.length;
		while(_g < _g1) {
			var i = _g++;
			tbl[this.base.b[i]] = i;
		}
		this.tbl = tbl;
	}
	,decodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		if(this.tbl == null) {
			this.initTable();
		}
		var tbl = this.tbl;
		var size = b.length * nbits >> 3;
		var out = new haxe_io_Bytes(new ArrayBuffer(size));
		var buf = 0;
		var curbits = 0;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				var i = tbl[b.b[pin++]];
				if(i == -1) {
					throw haxe_Exception.thrown("BaseCode : invalid encoded char");
				}
				buf |= i;
			}
			curbits -= 8;
			out.b[pout++] = buf >> curbits & 255;
		}
		return out;
	}
	,__class__: haxe_crypto_BaseCode
};
var haxe_ds_ArraySort = function() { };
haxe_ds_ArraySort.__name__ = "haxe.ds.ArraySort";
haxe_ds_ArraySort.sort = function(a,cmp) {
	haxe_ds_ArraySort.rec(a,cmp,0,a.length);
};
haxe_ds_ArraySort.rec = function(a,cmp,from,to) {
	var middle = from + to >> 1;
	if(to - from < 12) {
		if(to <= from) {
			return;
		}
		var _g = from + 1;
		var _g1 = to;
		while(_g < _g1) {
			var i = _g++;
			var j = i;
			while(j > from) {
				if(cmp(a[j],a[j - 1]) < 0) {
					haxe_ds_ArraySort.swap(a,j - 1,j);
				} else {
					break;
				}
				--j;
			}
		}
		return;
	}
	haxe_ds_ArraySort.rec(a,cmp,from,middle);
	haxe_ds_ArraySort.rec(a,cmp,middle,to);
	haxe_ds_ArraySort.doMerge(a,cmp,from,middle,to,middle - from,to - middle);
};
haxe_ds_ArraySort.doMerge = function(a,cmp,from,pivot,to,len1,len2) {
	var first_cut;
	var second_cut;
	var len11;
	var len22;
	if(len1 == 0 || len2 == 0) {
		return;
	}
	if(len1 + len2 == 2) {
		if(cmp(a[pivot],a[from]) < 0) {
			haxe_ds_ArraySort.swap(a,pivot,from);
		}
		return;
	}
	if(len1 > len2) {
		len11 = len1 >> 1;
		first_cut = from + len11;
		second_cut = haxe_ds_ArraySort.lower(a,cmp,pivot,to,first_cut);
		len22 = second_cut - pivot;
	} else {
		len22 = len2 >> 1;
		second_cut = pivot + len22;
		first_cut = haxe_ds_ArraySort.upper(a,cmp,from,pivot,second_cut);
		len11 = first_cut - from;
	}
	haxe_ds_ArraySort.rotate(a,cmp,first_cut,pivot,second_cut);
	var new_mid = first_cut + len22;
	haxe_ds_ArraySort.doMerge(a,cmp,from,first_cut,new_mid,len11,len22);
	haxe_ds_ArraySort.doMerge(a,cmp,new_mid,second_cut,to,len1 - len11,len2 - len22);
};
haxe_ds_ArraySort.rotate = function(a,cmp,from,mid,to) {
	if(from == mid || mid == to) {
		return;
	}
	var n = haxe_ds_ArraySort.gcd(to - from,mid - from);
	while(n-- != 0) {
		var val = a[from + n];
		var shift = mid - from;
		var p1 = from + n;
		var p2 = from + n + shift;
		while(p2 != from + n) {
			a[p1] = a[p2];
			p1 = p2;
			if(to - p2 > shift) {
				p2 += shift;
			} else {
				p2 = from + (shift - (to - p2));
			}
		}
		a[p1] = val;
	}
};
haxe_ds_ArraySort.gcd = function(m,n) {
	while(n != 0) {
		var t = m % n;
		m = n;
		n = t;
	}
	return m;
};
haxe_ds_ArraySort.upper = function(a,cmp,from,to,val) {
	var len = to - from;
	var half;
	var mid;
	while(len > 0) {
		half = len >> 1;
		mid = from + half;
		if(cmp(a[val],a[mid]) < 0) {
			len = half;
		} else {
			from = mid + 1;
			len = len - half - 1;
		}
	}
	return from;
};
haxe_ds_ArraySort.lower = function(a,cmp,from,to,val) {
	var len = to - from;
	var half;
	var mid;
	while(len > 0) {
		half = len >> 1;
		mid = from + half;
		if(cmp(a[mid],a[val]) < 0) {
			from = mid + 1;
			len = len - half - 1;
		} else {
			len = half;
		}
	}
	return from;
};
haxe_ds_ArraySort.swap = function(a,i,j) {
	var tmp = a[i];
	a[i] = a[j];
	a[j] = tmp;
};
var haxe_ds_Either = $hxEnums["haxe.ds.Either"] = { __ename__ : "haxe.ds.Either", __constructs__ : ["Left","Right"]
	,Left: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"haxe.ds.Either",toString:$estr}; },$_.__params__ = ["v"],$_)
	,Right: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"haxe.ds.Either",toString:$estr}; },$_.__params__ = ["v"],$_)
};
var haxe_ds_List = function() {
	this.length = 0;
};
haxe_ds_List.__name__ = "haxe.ds.List";
haxe_ds_List.prototype = {
	h: null
	,q: null
	,length: null
	,add: function(item) {
		var x = new haxe_ds__$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,iterator: function() {
		return new haxe_ds__$List_ListIterator(this.h);
	}
	,__class__: haxe_ds_List
};
var haxe_ds__$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
haxe_ds__$List_ListNode.__name__ = "haxe.ds._List.ListNode";
haxe_ds__$List_ListNode.prototype = {
	item: null
	,next: null
	,__class__: haxe_ds__$List_ListNode
};
var haxe_ds__$List_ListIterator = function(head) {
	this.head = head;
};
haxe_ds__$List_ListIterator.__name__ = "haxe.ds._List.ListIterator";
haxe_ds__$List_ListIterator.prototype = {
	head: null
	,hasNext: function() {
		return this.head != null;
	}
	,next: function() {
		var val = this.head.item;
		this.head = this.head.next;
		return val;
	}
	,__class__: haxe_ds__$List_ListIterator
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
haxe_ds_ObjectMap.__name__ = "haxe.ds.ObjectMap";
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.prototype = {
	h: null
	,set: function(key,value) {
		var id = key.__id__;
		if(id == null) {
			id = (key.__id__ = $global.$haxeUID++);
		}
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,get: function(key) {
		return this.h[key.__id__];
	}
	,exists: function(key) {
		return this.h.__keys__[key.__id__] != null;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return new haxe_iterators_ArrayIterator(a);
	}
	,keyValueIterator: function() {
		return new haxe_iterators_MapKeyValueIterator(this);
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds_Option = $hxEnums["haxe.ds.Option"] = { __ename__ : "haxe.ds.Option", __constructs__ : ["Some","None"]
	,Some: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"haxe.ds.Option",toString:$estr}; },$_.__params__ = ["v"],$_)
	,None: {_hx_index:1,__enum__:"haxe.ds.Option",toString:$estr}
};
var haxe_ds_StringMap = function() {
	this.h = Object.create(null);
};
haxe_ds_StringMap.__name__ = "haxe.ds.StringMap";
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.keysIterator = function(h) {
	var keys = Object.keys(h);
	var len = keys.length;
	var idx = 0;
	return { hasNext : function() {
		return idx < len;
	}, next : function() {
		idx += 1;
		return keys[idx - 1];
	}};
};
haxe_ds_StringMap.kvIterator = function(h) {
	var keys = Object.keys(h);
	var len = keys.length;
	var idx = 0;
	return { hasNext : function() {
		return idx < len;
	}, next : function() {
		idx += 1;
		var k = keys[idx - 1];
		return { key : k, value : h[k]};
	}};
};
haxe_ds_StringMap.prototype = {
	h: null
	,exists: function(key) {
		return Object.prototype.hasOwnProperty.call(this.h,key);
	}
	,get: function(key) {
		return this.h[key];
	}
	,set: function(key,value) {
		this.h[key] = value;
	}
	,keys: function() {
		return haxe_ds_StringMap.keysIterator(this.h);
	}
	,keyValueIterator: function() {
		return haxe_ds_StringMap.kvIterator(this.h);
	}
	,__class__: haxe_ds_StringMap
};
var haxe_io_BytesBuffer = function() {
	this.pos = 0;
	this.size = 0;
};
haxe_io_BytesBuffer.__name__ = "haxe.io.BytesBuffer";
haxe_io_BytesBuffer.prototype = {
	buffer: null
	,view: null
	,u8: null
	,pos: null
	,size: null
	,addByte: function(byte) {
		if(this.pos == this.size) {
			this.grow(1);
		}
		this.view.setUint8(this.pos++,byte);
	}
	,grow: function(delta) {
		var req = this.pos + delta;
		var nsize = this.size == 0 ? 16 : this.size;
		while(nsize < req) nsize = nsize * 3 >> 1;
		var nbuf = new ArrayBuffer(nsize);
		var nu8 = new Uint8Array(nbuf);
		if(this.size > 0) {
			nu8.set(this.u8);
		}
		this.size = nsize;
		this.buffer = nbuf;
		this.u8 = nu8;
		this.view = new DataView(this.buffer);
	}
	,getBytes: function() {
		if(this.size == 0) {
			return new haxe_io_Bytes(new ArrayBuffer(0));
		}
		var b = new haxe_io_Bytes(this.buffer);
		b.length = this.pos;
		return b;
	}
	,__class__: haxe_io_BytesBuffer
};
var haxe_io_Eof = function() {
};
haxe_io_Eof.__name__ = "haxe.io.Eof";
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe_io_Eof
};
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__ : "haxe.io.Error", __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"]
	,Blocked: {_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_.__params__ = ["e"],$_)
};
var haxe_io_FPHelper = function() { };
haxe_io_FPHelper.__name__ = "haxe.io.FPHelper";
haxe_io_FPHelper.i32ToFloat = function(i) {
	haxe_io_FPHelper.helper.setInt32(0,i,true);
	return haxe_io_FPHelper.helper.getFloat32(0,true);
};
haxe_io_FPHelper.floatToI32 = function(f) {
	haxe_io_FPHelper.helper.setFloat32(0,f,true);
	return haxe_io_FPHelper.helper.getInt32(0,true);
};
haxe_io_FPHelper.i64ToDouble = function(low,high) {
	haxe_io_FPHelper.helper.setInt32(0,low,true);
	haxe_io_FPHelper.helper.setInt32(4,high,true);
	return haxe_io_FPHelper.helper.getFloat64(0,true);
};
haxe_io_FPHelper.doubleToI64 = function(v) {
	var i64 = haxe_io_FPHelper.i64tmp;
	haxe_io_FPHelper.helper.setFloat64(0,v,true);
	i64.low = haxe_io_FPHelper.helper.getInt32(0,true);
	i64.high = haxe_io_FPHelper.helper.getInt32(4,true);
	return i64;
};
var haxe_io_Path = function(path) {
	switch(path) {
	case ".":case "..":
		this.dir = path;
		this.file = "";
		return;
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		this.dir = HxOverrides.substr(path,0,c2);
		path = HxOverrides.substr(path,c2 + 1,null);
		this.backslash = true;
	} else if(c2 < c1) {
		this.dir = HxOverrides.substr(path,0,c1);
		path = HxOverrides.substr(path,c1 + 1,null);
	} else {
		this.dir = null;
	}
	var cp = path.lastIndexOf(".");
	if(cp != -1) {
		this.ext = HxOverrides.substr(path,cp + 1,null);
		this.file = HxOverrides.substr(path,0,cp);
	} else {
		this.ext = null;
		this.file = path;
	}
};
haxe_io_Path.__name__ = "haxe.io.Path";
haxe_io_Path.prototype = {
	dir: null
	,file: null
	,ext: null
	,backslash: null
	,toString: function() {
		return (this.dir == null ? "" : this.dir + (this.backslash ? "\\" : "/")) + this.file + (this.ext == null ? "" : "." + this.ext);
	}
	,__class__: haxe_io_Path
};
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.__name__ = "haxe.iterators.ArrayIterator";
haxe_iterators_ArrayIterator.prototype = {
	array: null
	,current: null
	,hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
	,__class__: haxe_iterators_ArrayIterator
};
var haxe_iterators_MapKeyValueIterator = function(map) {
	this.map = map;
	this.keys = map.keys();
};
haxe_iterators_MapKeyValueIterator.__name__ = "haxe.iterators.MapKeyValueIterator";
haxe_iterators_MapKeyValueIterator.prototype = {
	map: null
	,keys: null
	,hasNext: function() {
		return this.keys.hasNext();
	}
	,next: function() {
		var key = this.keys.next();
		return { value : this.map.get(key), key : key};
	}
	,__class__: haxe_iterators_MapKeyValueIterator
};
var haxe_unit_TestCase = function() {
};
haxe_unit_TestCase.__name__ = "haxe.unit.TestCase";
haxe_unit_TestCase.prototype = {
	currentTest: null
	,setup: function() {
	}
	,tearDown: function() {
	}
	,print: function(v) {
		haxe_unit_TestRunner.print(v);
	}
	,assertTrue: function(b,c) {
		this.currentTest.done = true;
		if(b != true) {
			this.currentTest.success = false;
			this.currentTest.error = "expected true but was false";
			this.currentTest.posInfos = c;
			throw haxe_Exception.thrown(this.currentTest);
		}
	}
	,assertFalse: function(b,c) {
		this.currentTest.done = true;
		if(b == true) {
			this.currentTest.success = false;
			this.currentTest.error = "expected false but was true";
			this.currentTest.posInfos = c;
			throw haxe_Exception.thrown(this.currentTest);
		}
	}
	,assertEquals: function(expected,actual,c) {
		this.currentTest.done = true;
		if(actual != expected) {
			this.currentTest.success = false;
			this.currentTest.error = "expected '" + Std.string(expected) + "' but was '" + Std.string(actual) + "'";
			this.currentTest.posInfos = c;
			throw haxe_Exception.thrown(this.currentTest);
		}
	}
	,__class__: haxe_unit_TestCase
};
var haxe_unit_TestResult = function() {
	this.m_tests = new haxe_ds_List();
	this.success = true;
};
haxe_unit_TestResult.__name__ = "haxe.unit.TestResult";
haxe_unit_TestResult.prototype = {
	m_tests: null
	,success: null
	,add: function(t) {
		this.m_tests.add(t);
		if(!t.success) {
			this.success = false;
		}
	}
	,toString: function() {
		var buf_b = "";
		var failures = 0;
		var _g_head = this.m_tests.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var test = val;
			if(test.success == false) {
				buf_b += "* ";
				buf_b += Std.string(test.classname);
				buf_b += "::";
				buf_b += Std.string(test.method);
				buf_b += "()";
				buf_b += "\n";
				buf_b += "ERR: ";
				if(test.posInfos != null) {
					buf_b += Std.string(test.posInfos.fileName);
					buf_b += ":";
					buf_b += Std.string(test.posInfos.lineNumber);
					buf_b += "(";
					buf_b += Std.string(test.posInfos.className);
					buf_b += ".";
					buf_b += Std.string(test.posInfos.methodName);
					buf_b += ") - ";
				}
				buf_b += Std.string(test.error);
				buf_b += "\n";
				if(test.backtrace != null) {
					buf_b += Std.string(test.backtrace);
					buf_b += "\n";
				}
				buf_b += "\n";
				++failures;
			}
		}
		buf_b += "\n";
		if(failures == 0) {
			buf_b += "OK ";
		} else {
			buf_b += "FAILED ";
		}
		buf_b += Std.string(this.m_tests.length);
		buf_b += " tests, ";
		buf_b += failures == null ? "null" : "" + failures;
		buf_b += " failed, ";
		buf_b += Std.string(this.m_tests.length - failures);
		buf_b += " success";
		buf_b += "\n";
		return buf_b;
	}
	,__class__: haxe_unit_TestResult
};
var haxe_unit_TestRunner = function() {
	this.result = new haxe_unit_TestResult();
	this.cases = new haxe_ds_List();
};
haxe_unit_TestRunner.__name__ = "haxe.unit.TestRunner";
haxe_unit_TestRunner.print = function(v) {
	var msg = js_Boot.__string_rec(v,"");
	var d;
	var tmp;
	if(typeof(document) != "undefined") {
		d = document.getElementById("haxe:trace");
		tmp = d != null;
	} else {
		tmp = false;
	}
	if(tmp) {
		msg = StringTools.htmlEscape(msg).split("\n").join("<br/>");
		d.innerHTML += msg + "<br/>";
	} else if(typeof process != "undefined" && process.stdout != null && process.stdout.write != null) {
		process.stdout.write(msg);
	} else if(typeof console != "undefined" && console.log != null) {
		console.log(msg);
	}
};
haxe_unit_TestRunner.customTrace = function(v,p) {
	haxe_unit_TestRunner.print(p.fileName + ":" + p.lineNumber + ": " + Std.string(v) + "\n");
};
haxe_unit_TestRunner.prototype = {
	result: null
	,cases: null
	,add: function(c) {
		this.cases.add(c);
	}
	,run: function() {
		this.result = new haxe_unit_TestResult();
		var _g_head = this.cases.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var c = val;
			this.runCase(c);
		}
		haxe_unit_TestRunner.print(this.result.toString());
		return this.result.success;
	}
	,runCase: function(t) {
		var old = haxe_Log.trace;
		haxe_Log.trace = haxe_unit_TestRunner.customTrace;
		var cl = js_Boot.getClass(t);
		var fields = Type.getInstanceFields(cl);
		haxe_unit_TestRunner.print("Class: " + cl.__name__ + " ");
		var _g = 0;
		while(_g < fields.length) {
			var f = fields[_g];
			++_g;
			var fname = f;
			var field = Reflect.field(t,f);
			if(StringTools.startsWith(fname,"test") && Reflect.isFunction(field)) {
				t.currentTest = new haxe_unit_TestStatus();
				t.currentTest.classname = cl.__name__;
				t.currentTest.method = fname;
				t.setup();
				try {
					field.apply(t,[]);
					if(t.currentTest.done) {
						t.currentTest.success = true;
						haxe_unit_TestRunner.print(".");
					} else {
						t.currentTest.success = false;
						t.currentTest.error = "(warning) no assert";
						haxe_unit_TestRunner.print("W");
					}
				} catch( _g1 ) {
					haxe_NativeStackTrace.lastError = _g1;
					var _g2 = haxe_Exception.caught(_g1).unwrap();
					if(((_g2) instanceof haxe_unit_TestStatus)) {
						haxe_unit_TestRunner.print("F");
						var tmp = haxe_CallStack.exceptionStack();
						t.currentTest.backtrace = haxe_CallStack.toString(tmp);
					} else {
						var e = _g2;
						haxe_unit_TestRunner.print("E");
						if(e.message != null) {
							t.currentTest.error = "exception thrown : " + Std.string(e) + " [" + Std.string(e.message) + "]";
						} else {
							t.currentTest.error = "exception thrown : " + Std.string(e);
						}
						var tmp1 = haxe_CallStack.exceptionStack();
						t.currentTest.backtrace = haxe_CallStack.toString(tmp1);
					}
				}
				this.result.add(t.currentTest);
				t.tearDown();
			}
		}
		haxe_unit_TestRunner.print("\n");
		haxe_Log.trace = old;
	}
	,__class__: haxe_unit_TestRunner
};
var haxe_unit_TestStatus = function() {
	this.done = false;
	this.success = false;
};
haxe_unit_TestStatus.__name__ = "haxe.unit.TestStatus";
haxe_unit_TestStatus.prototype = {
	done: null
	,success: null
	,error: null
	,method: null
	,classname: null
	,posInfos: null
	,backtrace: null
	,__class__: haxe_unit_TestStatus
};
var hre_HreError = function(message) {
	this.message = message;
};
hre_HreError.__name__ = "hre.HreError";
hre_HreError.prototype = {
	message: null
	,__class__: hre_HreError
};
var hre_Match = function(input,index,groups) {
	this.input = input;
	this.index = index;
	this.groups = groups;
};
hre_Match.__name__ = "hre.Match";
hre_Match.prototype = {
	input: null
	,index: null
	,groups: null
	,equals: function(other) {
		if(other == null || this.input != other.input || this.index != other.index) {
			return false;
		}
		var _g = 0;
		var _g1 = this.groups.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.groups[i] != other.groups[i]) {
				return false;
			}
		}
		return true;
	}
	,toString: function() {
		return "Match(input=\"" + this.input + "\", index=" + this.index + ", groups=[" + this.groups.join(", ") + "])";
	}
	,__class__: hre_Match
};
var hre_RegExp = function(pattern,flags) {
	this.length = 2;
	this.pattern = hre_RegExpParser.parse(pattern);
	var global1 = false;
	var ignoreCase = false;
	var multiline = false;
	var sticky = false;
	if(flags != null) {
		var _g = 0;
		var _g1 = flags.length;
		while(_g < _g1) {
			var i = _g++;
			var charCode = HxOverrides.cca(flags,i);
			if(charCode == hre_RegExp.LATIN_SMALL_LETTER_G) {
				global1 = true;
			} else if(charCode == hre_RegExp.LATIN_SMALL_LETTER_I) {
				ignoreCase = true;
			} else if(charCode == hre_RegExp.LATIN_SMALL_LETTER_M) {
				multiline = true;
			} else if(charCode == hre_RegExp.LATIN_SMALL_LETTER_U) {
				haxe_Log.trace("Unicode flag is always enabled, no need to provide it",{ fileName : "hre/RegExp.hx", lineNumber : 49, className : "hre.RegExp", methodName : "new"});
			} else if(charCode == hre_RegExp.LATIN_SMALL_LETTER_Y) {
				sticky = true;
			} else {
				throw haxe_Exception.thrown(new hre_RegExpSyntaxError("Invalid flags",0,pattern));
			}
		}
	}
	this.flags = new hre_RegExpFlags(global1,ignoreCase,multiline,sticky);
	this.lastIndex = 0;
};
hre_RegExp.__name__ = "hre.RegExp";
hre_RegExp.prototype = {
	length: null
	,lastIndex: null
	,pattern: null
	,flags: null
	,exec: function(input) {
		var matcher = hre_RegExpMatcher.evaluatePattern(this.pattern,this.flags);
		var currentIndex = this.flags.global || this.flags.sticky ? this.lastIndex : 0;
		var successfulMatch = null;
		_hx_loop1: while(true) {
			if(currentIndex > input.length) {
				this.lastIndex = 0;
				return null;
			}
			var _g = matcher(input,currentIndex);
			switch(_g._hx_index) {
			case 0:
				if(this.flags.sticky) {
					this.lastIndex = 0;
					return null;
				}
				++currentIndex;
				continue;
			case 1:
				var state = _g.matcherState;
				successfulMatch = state;
				break _hx_loop1;
			}
		}
		if(this.flags.global || this.flags.sticky) {
			this.lastIndex = successfulMatch.index;
		}
		var matchedSubstring = input.substring(currentIndex,successfulMatch.index);
		var groups = [matchedSubstring];
		var _g = 0;
		var _g1 = successfulMatch.captures;
		while(_g < _g1.length) {
			var captured = _g1[_g];
			++_g;
			groups.push(captured);
		}
		return new hre_Match(input,currentIndex,groups);
	}
	,test: function(input) {
		return this.exec(input) != null;
	}
	,__class__: hre_RegExp
};
var hre_RegExpFlags = function(global1,ignoreCase,multiline,sticky) {
	this.global = global1;
	this.ignoreCase = ignoreCase;
	this.multiline = multiline;
	this.unicode = true;
	this.sticky = sticky;
};
hre_RegExpFlags.__name__ = "hre.RegExpFlags";
hre_RegExpFlags.prototype = {
	global: null
	,ignoreCase: null
	,multiline: null
	,unicode: null
	,sticky: null
	,__class__: hre_RegExpFlags
};
var hre_MatcherResult = $hxEnums["hre.MatcherResult"] = { __ename__ : "hre.MatcherResult", __constructs__ : ["Failure","Success"]
	,Failure: {_hx_index:0,__enum__:"hre.MatcherResult",toString:$estr}
	,Success: ($_=function(matcherState) { return {_hx_index:1,matcherState:matcherState,__enum__:"hre.MatcherResult",toString:$estr}; },$_.__params__ = ["matcherState"],$_)
};
var hre_MatcherState = function() {
};
hre_MatcherState.__name__ = "hre.MatcherState";
hre_MatcherState.prototype = {
	index: null
	,length: null
	,ignoreCase: null
	,multiline: null
	,unicode: null
	,list: null
	,captures: null
	,copy: function() {
		var result = new hre_MatcherState();
		result.index = this.index;
		result.length = this.length;
		result.ignoreCase = this.ignoreCase;
		result.multiline = this.multiline;
		result.unicode = this.unicode;
		result.list = this.list.slice();
		result.captures = this.captures.slice();
		return result;
	}
	,__class__: hre_MatcherState
};
var hre_RegExpMatcher = function() {
};
hre_RegExpMatcher.__name__ = "hre.RegExpMatcher";
hre_RegExpMatcher.evaluatePattern = function(pattern,flags) {
	return function(source,index) {
		if(index > source.length) {
			throw haxe_Exception.thrown(new hre_HreError("Assertion `index <= source.length` failed"));
		}
		var state = new hre_MatcherState();
		state.length = source.length;
		state.list = [];
		var _g = 0;
		var _g1 = source.length;
		while(_g < _g1) {
			var i = _g++;
			state.list.push(HxOverrides.cca(source,i));
		}
		state.index = index;
		state.multiline = flags.multiline;
		state.ignoreCase = flags.ignoreCase;
		state.unicode = flags.unicode;
		state.captures = [];
		var _g = 0;
		var _g1 = pattern.captures;
		while(_g < _g1) {
			var _ = _g++;
			state.captures.push(null);
		}
		var m = hre_RegExpMatcher.evaluateDisjunction(pattern);
		var continuation = function(state) {
			return hre_MatcherResult.Success(state);
		};
		return m(state,continuation);
	};
};
hre_RegExpMatcher.evaluateDisjunction = function(disjunction) {
	var _this = disjunction.alternatives;
	var f = hre_RegExpMatcher.evaluateAlternative;
	var result = new Array(_this.length);
	var _g = 0;
	var _g1 = _this.length;
	while(_g < _g1) {
		var i = _g++;
		result[i] = f(_this[i]);
	}
	var alternativeMatchers = result;
	return function(state,continuation) {
		if(alternativeMatchers.length == 0) {
			return continuation(state);
		}
		var _g = 0;
		while(_g < alternativeMatchers.length) {
			var matcher = alternativeMatchers[_g];
			++_g;
			var r = matcher(state,continuation);
			if(r._hx_index == 0) {
				continue;
			} else {
				return r;
			}
		}
		return hre_MatcherResult.Failure;
	};
};
hre_RegExpMatcher.evaluateAlternative = function(alternative) {
	return function(state,continuation) {
		var c = continuation;
		var idx = alternative.terms.length;
		while(idx > 0) {
			--idx;
			var m = [hre_RegExpMatcher.evaluateTerm(alternative.terms[idx])];
			var nextContinuation = [c];
			c = (function(nextContinuation,m) {
				return function(s) {
					return m[0](s,nextContinuation[0]);
				};
			})(nextContinuation,m);
		}
		return c(state);
	};
};
hre_RegExpMatcher.evaluateTerm = function(term) {
	switch(term._hx_index) {
	case 0:
		var assertion = term.assertion;
		return function(state,continuation) {
			if(term == null) {
				return hre_MatcherResult.Failure;
			}
			var _g = hre_RegExpMatcher.evaluateAssertion(assertion);
			switch(_g._hx_index) {
			case 0:
				var assertionTester = _g.v;
				if(assertionTester(state)) {
					return continuation(state);
				} else {
					return hre_MatcherResult.Failure;
				}
				break;
			case 1:
				var matcher = _g.v;
				return matcher(state,continuation);
			}
		};
	case 1:
		var atom = term.atom;
		return hre_RegExpMatcher.evaluateAtom(atom);
	case 2:
		var captureEnd = term.capturesEndIndex;
		var captureStart = term.capturesStartIndex;
		var quantifier = term.quantifier;
		var atom = term.atom;
		return hre_RegExpMatcher.evaluateQuantifiedAtom(atom,quantifier,captureStart,captureEnd);
	}
};
hre_RegExpMatcher.evaluateAssertion = function(assertion) {
	switch(assertion._hx_index) {
	case 0:
		return haxe_ds_Either.Left(function(state) {
			var e = state.index;
			if(e == 0) {
				return true;
			}
			if(!state.multiline) {
				return false;
			}
			if(hre_RegExpMatcher.isLineTerminator(state.list[e - 1])) {
				return true;
			}
			return false;
		});
	case 1:
		return haxe_ds_Either.Left(function(state) {
			if(state.index == state.length) {
				return true;
			}
			if(!state.multiline) {
				return false;
			}
			if(hre_RegExpMatcher.isLineTerminator(state.list[state.index])) {
				return true;
			}
			return false;
		});
	case 2:
		return haxe_ds_Either.Left(function(state) {
			var e = state.index;
			var a = e > 0 && hre_RegExpMatcher.isWordChar(state.list[e - 1]);
			var b = e < state.length && hre_RegExpMatcher.isWordChar(state.list[e]);
			return a != b;
		});
	case 3:
		return haxe_ds_Either.Left(function(state) {
			var e = state.index;
			var a = e > 0 && hre_RegExpMatcher.isWordChar(state.list[e - 1]);
			var b = e < state.length && hre_RegExpMatcher.isWordChar(state.list[e]);
			return a == b;
		});
	case 4:
		var disjunction = assertion.disjunction;
		var m = hre_RegExpMatcher.evaluateDisjunction(disjunction);
		return haxe_ds_Either.Right(function(state,continuation) {
			var d = function(state) {
				return hre_MatcherResult.Success(state);
			};
			var _g = m(state,d);
			switch(_g._hx_index) {
			case 0:
				return hre_MatcherResult.Failure;
			case 1:
				var subState = _g.matcherState;
				var nextState = subState.copy();
				nextState.index = state.index;
				return continuation(nextState);
			}
		});
	case 5:
		var disjunction = assertion.disjunction;
		var m1 = hre_RegExpMatcher.evaluateDisjunction(disjunction);
		return haxe_ds_Either.Right(function(state,continuation) {
			var d = function(state) {
				return hre_MatcherResult.Success(state);
			};
			var _g = m1(state,d);
			switch(_g._hx_index) {
			case 0:
				return continuation(state);
			case 1:
				var _g1 = _g.matcherState;
				return hre_MatcherResult.Failure;
			}
		});
	}
};
hre_RegExpMatcher.evaluateAtom = function(atom) {
	switch(atom._hx_index) {
	case 0:
		return hre_RegExpMatcher.characterSetMatcher(hre_RegExpMatcher.lineTerminators,true);
	case 1:
		return function(state,continuation) {
			var e = state.index;
			if(e == state.length) {
				return hre_MatcherResult.Failure;
			}
			var cc = hre_RegExpMatcher.canonicalize(state,state.list[e]);
			if(48 <= cc && cc <= 57) {
				var nextState = state.copy();
				nextState.index++;
				return continuation(nextState);
			} else {
				return hre_MatcherResult.Failure;
			}
		};
	case 2:
		return function(state,continuation) {
			var e = state.index;
			if(e == state.length) {
				return hre_MatcherResult.Failure;
			}
			var cc = hre_RegExpMatcher.canonicalize(state,state.list[e]);
			if(!(48 <= cc && cc <= 57)) {
				var nextState = state.copy();
				nextState.index++;
				return continuation(nextState);
			} else {
				return hre_MatcherResult.Failure;
			}
		};
	case 3:
		return hre_RegExpMatcher.characterSetMatcher(hre_RegExpMatcher.separators,false);
	case 4:
		return hre_RegExpMatcher.characterSetMatcher(hre_RegExpMatcher.separators,true);
	case 5:
		return function(state,continuation) {
			var e = state.index;
			if(e == state.length) {
				return hre_MatcherResult.Failure;
			}
			var cc = hre_RegExpMatcher.canonicalize(state,state.list[e]);
			if(hre_RegExpMatcher.isWordChar(cc)) {
				var nextState = state.copy();
				nextState.index++;
				return continuation(nextState);
			} else {
				return hre_MatcherResult.Failure;
			}
		};
	case 6:
		return function(state,continuation) {
			var e = state.index;
			if(e == state.length) {
				return hre_MatcherResult.Failure;
			}
			var cc = hre_RegExpMatcher.canonicalize(state,state.list[e]);
			if(!hre_RegExpMatcher.isWordChar(cc)) {
				var nextState = state.copy();
				nextState.index++;
				return continuation(nextState);
			} else {
				return hre_MatcherResult.Failure;
			}
		};
	case 7:
		var captureId = atom.captureId;
		return hre_RegExpMatcher.evaluateBackreference(captureId);
	case 8:
		var literal = atom.literal;
		return hre_RegExpMatcher.characterSetMatcher([HxOverrides.cca(literal,0)],false);
	case 9:
		var characterClass = atom.characterClass;
		return hre_RegExpMatcher.evaluateCharacterClass(characterClass);
	case 10:
		var captureIndex = atom.captureIndex;
		var disjunction = atom.disjunction;
		return hre_RegExpMatcher.evaluateCaptureGroup(disjunction,captureIndex);
	case 11:
		var disjunction = atom.disjunction;
		return hre_RegExpMatcher.evaluateDisjunction(disjunction);
	}
};
hre_RegExpMatcher.evaluateQuantifiedAtom = function(atom,quantifier,captureStart,captureEnd) {
	var m = hre_RegExpMatcher.evaluateAtom(atom);
	return function(state,continuation) {
		return hre_RegExpMatcher.repeatMatcher(m,quantifier.min,quantifier.max,quantifier.greedy,state,continuation,captureStart,captureEnd);
	};
};
hre_RegExpMatcher.repeatMatcher = function(m,min,max,greedy,x,c,captureStart,captureEnd) {
	if(max == 0) {
		return c(x);
	}
	var d = function(y) {
		if(min == 0 && x.index == y.index) {
			return hre_MatcherResult.Failure;
		}
		var min2 = min == 0 ? 0 : min - 1;
		var max2 = max == -1 ? -1 : max - 1;
		return hre_RegExpMatcher.repeatMatcher(m,min2,max2,greedy,y,c,captureStart,captureEnd);
	};
	var xr = x.copy();
	var _g = captureStart;
	var _g1 = captureEnd;
	while(_g < _g1) {
		var k = _g++;
		xr.captures[k] = null;
	}
	if(min > 0) {
		return m(xr,d);
	}
	if(!greedy) {
		var z = c(x);
		if(z._hx_index == 0) {
			return m(xr,d);
		} else {
			return z;
		}
	}
	var z = m(xr,d);
	if(z._hx_index == 0) {
		return c(x);
	} else {
		return z;
	}
};
hre_RegExpMatcher.evaluateCaptureGroup = function(disjunction,captureIndex) {
	var m = hre_RegExpMatcher.evaluateDisjunction(disjunction);
	return function(state,continuation) {
		var subContinuation = function(subState) {
			var capturedSubstring = "";
			var _g = state.index;
			var _g1 = subState.index;
			while(_g < _g1) {
				var i = _g++;
				var code = state.list[i];
				capturedSubstring += String.fromCodePoint(code);
			}
			var nextState = subState.copy();
			nextState.captures[captureIndex] = capturedSubstring;
			return continuation(nextState);
		};
		return m(state,subContinuation);
	};
};
hre_RegExpMatcher.evaluateBackreference = function(captureId) {
	var captureIndex = captureId - 1;
	return function(state,continuation) {
		var referenced = state.captures[captureIndex];
		if(referenced == null) {
			return continuation(state);
		}
		var e = state.index;
		var f = e + referenced.length;
		if(f > state.list.length) {
			return hre_MatcherResult.Failure;
		}
		var _g = 0;
		var _g1 = referenced.length;
		while(_g < _g1) {
			var i = _g++;
			if(hre_RegExpMatcher.canonicalize(state,state.list[e + i]) != hre_RegExpMatcher.canonicalize(state,HxOverrides.cca(referenced,i))) {
				return hre_MatcherResult.Failure;
			}
		}
		var y = state.copy();
		y.index = f;
		return continuation(y);
	};
};
hre_RegExpMatcher.evaluateCharacterClass = function(characterClass) {
	return function(state,continuation) {
		var e = state.index;
		if(e == state.length) {
			return hre_MatcherResult.Failure;
		}
		var cc = hre_RegExpMatcher.canonicalize(state,state.list[e]);
		var matched = false;
		var _g = 0;
		var _g1 = characterClass.ranges;
		_hx_loop1: while(_g < _g1.length) {
			var range = _g1[_g];
			++_g;
			switch(range._hx_index) {
			case 0:
				var end = range.end;
				var start = range.start;
				var startCode = HxOverrides.cca(start,0);
				var endCode = HxOverrides.cca(end,0);
				if(state.ignoreCase) {
					var _g2 = startCode;
					var _g3 = endCode + 1;
					while(_g2 < _g3) {
						var i = _g2++;
						if(cc == hre_RegExpMatcher.canonicalize(state,i)) {
							matched = true;
							break;
						}
					}
				} else if(startCode <= cc && cc <= endCode) {
					matched = true;
					break _hx_loop1;
				}
				break;
			case 1:
				var ccAtom = range.value;
				switch(ccAtom._hx_index) {
				case 0:
					var value = ccAtom.value;
					if(hre_RegExpMatcher.canonicalize(state,HxOverrides.cca(value,0)) == cc) {
						matched = true;
						break _hx_loop1;
					}
					break;
				case 1:
					if(48 <= cc && cc <= 57) {
						matched = true;
						break _hx_loop1;
					}
					break;
				case 2:
					if(!(48 <= cc && cc <= 57)) {
						matched = true;
						break _hx_loop1;
					}
					break;
				case 3:
					if(hre_RegExpMatcher.separators.indexOf(cc) >= 0) {
						matched = true;
						break _hx_loop1;
					}
					break;
				case 4:
					if(hre_RegExpMatcher.separators.indexOf(cc) < 0) {
						matched = true;
						break _hx_loop1;
					}
					break;
				case 5:
					if(hre_RegExpMatcher.isWordChar(cc)) {
						matched = true;
						break _hx_loop1;
					}
					break;
				case 6:
					if(!hre_RegExpMatcher.isWordChar(cc)) {
						matched = true;
						break _hx_loop1;
					}
					break;
				}
				break;
			}
		}
		if(characterClass.inverted == matched) {
			return hre_MatcherResult.Failure;
		}
		var nextState = state.copy();
		nextState.index++;
		return continuation(nextState);
	};
};
hre_RegExpMatcher.characterSetMatcher = function(codepoints,invert) {
	return function(state,continuation) {
		var e = state.index;
		if(e == state.length) {
			return hre_MatcherResult.Failure;
		}
		var cc = hre_RegExpMatcher.canonicalize(state,state.list[e]);
		var matched = false;
		var _g = 0;
		while(_g < codepoints.length) {
			var chr = codepoints[_g];
			++_g;
			if(cc == hre_RegExpMatcher.canonicalize(state,chr)) {
				matched = true;
				break;
			}
		}
		if(invert == matched) {
			return hre_MatcherResult.Failure;
		}
		var nextState = state.copy();
		nextState.index++;
		return continuation(nextState);
	};
};
hre_RegExpMatcher.canonicalize = function(state,codepoint) {
	if(!state.ignoreCase) {
		return codepoint;
	}
	return HxOverrides.cca(String.fromCodePoint(codepoint).toLowerCase(),0);
};
hre_RegExpMatcher.isLineTerminator = function(codepoint) {
	return hre_RegExpMatcher.lineTerminators.indexOf(codepoint) >= 0;
};
hre_RegExpMatcher.isWordChar = function(codepoint) {
	if(!(97 <= codepoint && codepoint <= 122 || 65 <= codepoint && codepoint <= 90 || 48 <= codepoint && codepoint <= 57)) {
		return codepoint == 95;
	} else {
		return true;
	}
};
hre_RegExpMatcher.prototype = {
	__class__: hre_RegExpMatcher
};
var hre_RegExpSyntaxError = function(message,index,source) {
	hre_HreError.call(this,"RegExp syntax error for \"" + source + "\" at index " + index + ": " + message);
	this.index = index;
	this.source = source;
};
hre_RegExpSyntaxError.__name__ = "hre.RegExpSyntaxError";
hre_RegExpSyntaxError.__super__ = hre_HreError;
hre_RegExpSyntaxError.prototype = $extend(hre_HreError.prototype,{
	index: null
	,source: null
	,__class__: hre_RegExpSyntaxError
});
var hre_QuantifierPrefix = function(min,max) {
	this.min = min;
	this.max = max;
};
hre_QuantifierPrefix.__name__ = "hre.QuantifierPrefix";
hre_QuantifierPrefix.prototype = {
	min: null
	,max: null
	,__class__: hre_QuantifierPrefix
};
var hre_IntLiteral = function(length,value) {
	this.length = length;
	this.value = value;
};
hre_IntLiteral.__name__ = "hre.IntLiteral";
hre_IntLiteral.prototype = {
	length: null
	,value: null
	,__class__: hre_IntLiteral
};
var hre_Escape = $hxEnums["hre.Escape"] = { __ename__ : "hre.Escape", __constructs__ : ["Literal","Backreference","Word","NotWord","Decimal","NotDecimal","Separator","NotSeparator","WordBoundary","NotWordBoundary"]
	,Literal: ($_=function(codepoint) { return {_hx_index:0,codepoint:codepoint,__enum__:"hre.Escape",toString:$estr}; },$_.__params__ = ["codepoint"],$_)
	,Backreference: ($_=function(captureId) { return {_hx_index:1,captureId:captureId,__enum__:"hre.Escape",toString:$estr}; },$_.__params__ = ["captureId"],$_)
	,Word: {_hx_index:2,__enum__:"hre.Escape",toString:$estr}
	,NotWord: {_hx_index:3,__enum__:"hre.Escape",toString:$estr}
	,Decimal: {_hx_index:4,__enum__:"hre.Escape",toString:$estr}
	,NotDecimal: {_hx_index:5,__enum__:"hre.Escape",toString:$estr}
	,Separator: {_hx_index:6,__enum__:"hre.Escape",toString:$estr}
	,NotSeparator: {_hx_index:7,__enum__:"hre.Escape",toString:$estr}
	,WordBoundary: {_hx_index:8,__enum__:"hre.Escape",toString:$estr}
	,NotWordBoundary: {_hx_index:9,__enum__:"hre.Escape",toString:$estr}
};
var hre_RegExpParser = function(source) {
	this.source = source;
	this.currentIndex = 0;
	this.length = source.length;
	this.capturesCount = 0;
};
hre_RegExpParser.__name__ = "hre.RegExpParser";
hre_RegExpParser.parse = function(pattern) {
	return new hre_RegExpParser(pattern).readPattern();
};
hre_RegExpParser.prototype = {
	source: null
	,currentIndex: null
	,length: null
	,capturesCount: null
	,isEndOfPattern: function() {
		if(this.peek()._hx_index == 0) {
			return true;
		} else {
			return false;
		}
	}
	,readPattern: function() {
		var alternatives = [];
		_hx_loop1: while(!this.isEndOfPattern()) {
			alternatives.push(this.readAlternative());
			var _g = this.peek();
			switch(_g._hx_index) {
			case 0:
				break _hx_loop1;
			case 1:
				var c = _g.character;
				if(c == "|") {
					this.currentIndex++;
				} else {
					throw haxe_Exception.thrown(new hre_RegExpSyntaxError("Unexpected character " + c,this.currentIndex,this.source));
				}
				break;
			}
		}
		return new hre_ast_Pattern(alternatives,this.capturesCount);
	}
	,isEndOfDisjunction: function() {
		var _g = this.peek();
		switch(_g._hx_index) {
		case 0:
			return true;
		case 1:
			var c = _g.character;
			return c == ")";
		}
	}
	,readDisjunction: function() {
		var alternatives = [];
		_hx_loop1: while(!this.isEndOfDisjunction()) {
			alternatives.push(this.readAlternative());
			var _g = this.peek();
			switch(_g._hx_index) {
			case 0:
				break _hx_loop1;
			case 1:
				var c = _g.character;
				switch(c) {
				case ")":
					break _hx_loop1;
				case "|":
					this.currentIndex++;
					break;
				default:
					throw haxe_Exception.thrown(new hre_RegExpSyntaxError("Unexpected character " + c,this.currentIndex,this.source));
				}
				break;
			}
		}
		return new hre_ast_Disjunction(alternatives);
	}
	,isEndOfAlternative: function() {
		var _g = this.peek();
		switch(_g._hx_index) {
		case 0:
			return true;
		case 1:
			var c = _g.character;
			if(c == "|" || c == ")") {
				return true;
			} else {
				return false;
			}
			break;
		}
	}
	,readAlternative: function() {
		var terms = [];
		while(!this.isEndOfAlternative()) terms.push(this.readTerm());
		return new hre_ast_Alternative(terms);
	}
	,readTerm: function() {
		if(this.readQuantifier() != null) {
			throw haxe_Exception.thrown(new hre_RegExpSyntaxError("There is nothing to repeat",this.currentIndex,this.source));
		}
		var oldCapturesCount = this.capturesCount;
		var assertionOrAtom;
		var _g = this.peek();
		switch(_g._hx_index) {
		case 0:
			throw haxe_Exception.thrown(new hre_RegExpSyntaxError("Unexpected end of text",this.currentIndex,this.source));
		case 1:
			var c = _g.character;
			switch(c) {
			case "$":
				this.currentIndex++;
				assertionOrAtom = haxe_ds_Either.Left(hre_ast_Assertion.EndOfText);
				break;
			case "(":
				assertionOrAtom = this.readGroup();
				break;
			case ".":
				this.currentIndex++;
				assertionOrAtom = haxe_ds_Either.Right(hre_ast_Atom.AnyCharacter);
				break;
			case "[":
				assertionOrAtom = haxe_ds_Either.Right(this.readCharacterClass());
				break;
			case "\\":
				assertionOrAtom = this.readEscapeTerm();
				break;
			case "^":
				this.currentIndex++;
				assertionOrAtom = haxe_ds_Either.Left(hre_ast_Assertion.StartOfText);
				break;
			case "|":
				throw haxe_Exception.thrown(new hre_RegExpSyntaxError("Unexpected syntax character |",this.currentIndex,this.source));
			default:
				this.currentIndex++;
				assertionOrAtom = haxe_ds_Either.Right(hre_ast_Atom.Literal(c));
			}
			break;
		}
		switch(assertionOrAtom._hx_index) {
		case 0:
			var assertion = assertionOrAtom.v;
			return hre_ast_Term.Assertion(assertion);
		case 1:
			var atom = assertionOrAtom.v;
			var quantifier = this.readQuantifier();
			if(quantifier == null) {
				return hre_ast_Term.Atom(atom);
			} else {
				return hre_ast_Term.QuantifiedAtom(atom,quantifier,oldCapturesCount,this.capturesCount);
			}
			break;
		}
	}
	,readEscape: function(inCharacterClass) {
		if(this.peekChar() != "\\") {
			throw haxe_Exception.thrown(new hre_RegExpSyntaxError("Invalid escape term, expected \\",this.currentIndex,this.source));
		}
		this.currentIndex++;
		var _g = this.peek();
		switch(_g._hx_index) {
		case 0:
			throw haxe_Exception.thrown(new hre_RegExpSyntaxError("Escape at the end of the pattern",this.currentIndex,this.source));
		case 1:
			var c = _g.character;
			var charCode = HxOverrides.cca(c,0);
			if(48 <= charCode && charCode <= 57) {
				if(charCode == 48) {
					this.currentIndex++;
					return hre_Escape.Literal(0);
				} else {
					if(inCharacterClass) {
						throw haxe_Exception.thrown(new hre_RegExpSyntaxError("Invalid decimal escape in character class",this.currentIndex,this.source));
					}
					var decimal = this.readDecimalDigits();
					var decimalLen = decimal.length;
					var decimalVal = decimal.value;
					return hre_Escape.Backreference(decimalVal);
				}
			} else {
				switch(c) {
				case "B":
					if(inCharacterClass) {
						throw haxe_Exception.thrown(new hre_RegExpSyntaxError("Invalid `\\B` escape in character class",this.currentIndex,this.source));
					}
					this.currentIndex++;
					return hre_Escape.NotWordBoundary;
				case "D":
					this.currentIndex++;
					return hre_Escape.NotDecimal;
				case "S":
					this.currentIndex++;
					return hre_Escape.NotSeparator;
				case "W":
					this.currentIndex++;
					return hre_Escape.NotWord;
				case "b":
					this.currentIndex++;
					if(inCharacterClass) {
						return hre_Escape.Literal(8);
					} else {
						return hre_Escape.WordBoundary;
					}
					break;
				case "c":
					this.currentIndex++;
					var controlLetter = this.peekChar();
					var controlLetterCode = HxOverrides.cca(controlLetter,0);
					if(!(65 <= controlLetterCode && controlLetterCode <= 90) && !(97 <= controlLetterCode && controlLetterCode <= 122)) {
						throw haxe_Exception.thrown(new hre_RegExpSyntaxError("Control letter must be in A-Za-z",this.currentIndex,this.source));
					}
					this.currentIndex++;
					return hre_Escape.Literal(controlLetterCode % 32);
				case "d":
					this.currentIndex++;
					return hre_Escape.Decimal;
				case "f":
					this.currentIndex++;
					return hre_Escape.Literal(12);
				case "n":
					this.currentIndex++;
					return hre_Escape.Literal(10);
				case "r":
					this.currentIndex++;
					return hre_Escape.Literal(13);
				case "s":
					this.currentIndex++;
					return hre_Escape.Separator;
				case "t":
					this.currentIndex++;
					return hre_Escape.Literal(9);
				case "u":
					this.currentIndex++;
					var codePoint;
					if(this.peekChar() == "{") {
						this.currentIndex++;
						var hexLiteral = this.readHexadecimal(4,-1);
						if(this.peekChar() != "}") {
							throw haxe_Exception.thrown(new hre_RegExpSyntaxError("Expected `}`",this.currentIndex,this.source));
						}
						this.currentIndex++;
						codePoint = hexLiteral.value;
					} else {
						codePoint = this.readHexadecimal(4,4).value;
					}
					if(codePoint > 1114111) {
						throw haxe_Exception.thrown(new hre_RegExpSyntaxError("Codepoint exceeds max value (0x10ffff)`",this.currentIndex,this.source));
					}
					return hre_Escape.Literal(codePoint);
				case "v":
					this.currentIndex++;
					return hre_Escape.Literal(11);
				case "w":
					this.currentIndex++;
					return hre_Escape.Word;
				case "x":
					this.currentIndex++;
					var hexLiteral = this.readHexadecimal(2,2);
					return hre_Escape.Literal(hexLiteral.value);
				default:
					this.currentIndex++;
					return hre_Escape.Literal(HxOverrides.cca(c,0));
				}
			}
			break;
		}
	}
	,readEscapeTerm: function() {
		var _g = this.readEscape(false);
		switch(_g._hx_index) {
		case 0:
			var codePoint = _g.codepoint;
			return haxe_ds_Either.Right(hre_ast_Atom.Literal(String.fromCodePoint(codePoint)));
		case 1:
			var captureId = _g.captureId;
			return haxe_ds_Either.Right(hre_ast_Atom.Backreference(captureId));
		case 2:
			return haxe_ds_Either.Right(hre_ast_Atom.Word);
		case 3:
			return haxe_ds_Either.Right(hre_ast_Atom.NotWord);
		case 4:
			return haxe_ds_Either.Right(hre_ast_Atom.Decimal);
		case 5:
			return haxe_ds_Either.Right(hre_ast_Atom.NotDecimal);
		case 6:
			return haxe_ds_Either.Right(hre_ast_Atom.Separator);
		case 7:
			return haxe_ds_Either.Right(hre_ast_Atom.NotSeparator);
		case 8:
			return haxe_ds_Either.Left(hre_ast_Assertion.WordBoundary);
		case 9:
			return haxe_ds_Either.Left(hre_ast_Assertion.NotWordBoundary);
		}
	}
	,readGroup: function() {
		if(this.peekChar() != "(") {
			throw haxe_Exception.thrown(new hre_RegExpSyntaxError("Invalid group, expected (",this.currentIndex,this.source));
		}
		this.currentIndex++;
		var kind = hre_GroupKind.Capture;
		var oldCaptureCount = this.capturesCount;
		var _g = this.peek();
		switch(_g._hx_index) {
		case 0:
			throw haxe_Exception.thrown(new hre_RegExpSyntaxError("Unterminated group",this.currentIndex,this.source));
		case 1:
			var c = _g.character;
			if(c == "?") {
				this.currentIndex++;
				var _g = this.peek();
				switch(_g._hx_index) {
				case 0:
					throw haxe_Exception.thrown(new hre_RegExpSyntaxError("Invalid group, expected modifier",this.currentIndex,this.source));
				case 1:
					var c = _g.character;
					switch(c) {
					case "!":
						kind = hre_GroupKind.NotFollowedBy;
						break;
					case ":":
						kind = hre_GroupKind.Simple;
						break;
					case "=":
						kind = hre_GroupKind.FollowedBy;
						break;
					default:
						throw haxe_Exception.thrown(new hre_RegExpSyntaxError("Invalid group, unknown modifier: " + c,this.currentIndex,this.source));
					}
					break;
				}
				this.currentIndex++;
			}
			break;
		}
		if(kind._hx_index == 0) {
			this.capturesCount++;
		}
		var disjunction = this.readDisjunction();
		var _g = this.peek();
		switch(_g._hx_index) {
		case 0:
			throw haxe_Exception.thrown(new hre_RegExpSyntaxError("Invalid group, unterminated group",this.currentIndex,this.source));
		case 1:
			var c = _g.character;
			if(c == ")") {
				this.currentIndex++;
			}
			break;
		}
		switch(kind._hx_index) {
		case 0:
			return haxe_ds_Either.Right(hre_ast_Atom.CaptureGroup(disjunction,oldCaptureCount));
		case 1:
			return haxe_ds_Either.Right(hre_ast_Atom.SimpleGroup(disjunction));
		case 2:
			return haxe_ds_Either.Left(hre_ast_Assertion.FollowedBy(disjunction));
		case 3:
			return haxe_ds_Either.Left(hre_ast_Assertion.NotFollowedBy(disjunction));
		}
	}
	,isEndOfCharacterClass: function() {
		var _g = this.peek();
		switch(_g._hx_index) {
		case 0:
			return false;
		case 1:
			var c = _g.character;
			return c == "]";
		}
	}
	,readCharacterClass: function() {
		if(this.peekChar() != "[") {
			throw haxe_Exception.thrown(new hre_RegExpSyntaxError("Invalid character class, expected [",this.currentIndex,this.source));
		}
		this.currentIndex++;
		var inverted;
		var _g = this.peek();
		switch(_g._hx_index) {
		case 0:
			throw haxe_Exception.thrown(new hre_RegExpSyntaxError("Unterminated character class",this.currentIndex,this.source));
		case 1:
			var c = _g.character;
			if(c == "^") {
				this.currentIndex++;
				inverted = true;
			} else {
				inverted = false;
			}
			break;
		}
		var ranges = [];
		while(!this.isEndOfCharacterClass()) ranges.push(this.readCharacterClassRange(ranges.length == 0));
		var _g = this.peek();
		switch(_g._hx_index) {
		case 0:
			throw haxe_Exception.thrown(new hre_RegExpSyntaxError("Unterminated character class",this.currentIndex,this.source));
		case 1:
			var c = _g.character;
			if(c == "]") {
				this.currentIndex++;
			}
			break;
		}
		return hre_ast_Atom.Class(new hre_ast_CharacterClass(inverted,ranges));
	}
	,readCharacterClassRange: function(firstRange) {
		var start = this.readCharacterClassAtom(!firstRange);
		if(start == null) {
			throw haxe_Exception.thrown(new hre_RegExpSyntaxError("Expected character class atom",this.currentIndex,this.source));
		}
		var c = this.peekChar();
		if(c != "-") {
			return hre_ast_CharacterClassRange.Simple(start);
		}
		if(this.peekChar(1) == "]") {
			return hre_ast_CharacterClassRange.Simple(start);
		}
		this.currentIndex++;
		var end = this.readCharacterClassAtom(false);
		if(end == null) {
			throw haxe_Exception.thrown(new hre_RegExpSyntaxError("Invalid range in character class",this.currentIndex,this.source));
		}
		var startCharacter;
		if(start._hx_index == 0) {
			var c = start.value;
			startCharacter = c;
		} else {
			throw haxe_Exception.thrown(new hre_RegExpSyntaxError("Start of range is not a literal",this.currentIndex,this.source));
		}
		var endCharacter;
		if(end._hx_index == 0) {
			var c = end.value;
			endCharacter = c;
		} else {
			throw haxe_Exception.thrown(new hre_RegExpSyntaxError("End of range is not a literal",this.currentIndex,this.source));
		}
		if(HxOverrides.cca(startCharacter,0) > HxOverrides.cca(endCharacter,0)) {
			throw haxe_Exception.thrown(new hre_RegExpSyntaxError("Invalid range",this.currentIndex,this.source));
		}
		return hre_ast_CharacterClassRange.Range(startCharacter,endCharacter);
	}
	,readCharacterClassAtom: function(noDash) {
		var _g = this.peek();
		switch(_g._hx_index) {
		case 0:
			return null;
		case 1:
			var c = _g.character;
			switch(c) {
			case "-":
				if(noDash) {
					return null;
				}
				this.currentIndex++;
				return hre_ast_CharacterClassAtom.Literal("-");
			case "\\":
				return this.readEscapedCharacterClassAtom();
			case "]":
				return null;
			default:
				this.currentIndex++;
				return hre_ast_CharacterClassAtom.Literal(c);
			}
			break;
		}
	}
	,readEscapedCharacterClassAtom: function() {
		var $escape = this.readEscape(true);
		switch($escape._hx_index) {
		case 0:
			var codePoint = $escape.codepoint;
			return hre_ast_CharacterClassAtom.Literal(String.fromCodePoint(codePoint));
		case 2:
			return hre_ast_CharacterClassAtom.Word;
		case 3:
			return hre_ast_CharacterClassAtom.NotWord;
		case 4:
			return hre_ast_CharacterClassAtom.Decimal;
		case 5:
			return hre_ast_CharacterClassAtom.NotDecimal;
		case 6:
			return hre_ast_CharacterClassAtom.Separator;
		case 7:
			return hre_ast_CharacterClassAtom.NotSeparator;
		default:
			throw haxe_Exception.thrown(new hre_RegExpSyntaxError("Unexpected escape in character class: " + $hxEnums[$escape.__enum__].__constructs__[$escape._hx_index],this.currentIndex,this.source));
		}
	}
	,isGreedyQuantifier: function() {
		var _g = this.peek();
		if(_g._hx_index == 1) {
			var c = _g.character;
			return c != "?";
		} else {
			return true;
		}
	}
	,readQuantifierPrefix: function() {
		var _g = this.peek();
		if(_g._hx_index == 1) {
			var c = _g.character;
			switch(c) {
			case "*":
				this.currentIndex++;
				return new hre_QuantifierPrefix(0,-1);
			case "+":
				this.currentIndex++;
				return new hre_QuantifierPrefix(1,-1);
			case "?":
				this.currentIndex++;
				return new hre_QuantifierPrefix(0,1);
			case "{":
				return this.readQuantifierBlock();
			default:
				return null;
			}
		} else {
			return null;
		}
	}
	,readQuantifierBlock: function() {
		var oldIndex = this.currentIndex;
		if(this.peekChar() != "{") {
			return null;
		}
		this.currentIndex++;
		var min = this.readDecimalDigits();
		var minLen = min.length;
		var minVal = min.value;
		if(minLen == 0) {
			this.currentIndex = oldIndex;
			return null;
		}
		var _g = this.peek();
		switch(_g._hx_index) {
		case 0:
			this.currentIndex = oldIndex;
			return null;
		case 1:
			var c = _g.character;
			switch(c) {
			case ",":
				this.currentIndex++;
				break;
			case "}":
				this.currentIndex++;
				return new hre_QuantifierPrefix(minVal,minVal);
			default:
				this.currentIndex = oldIndex;
				return null;
			}
			break;
		}
		var max = this.readDecimalDigits();
		var maxLen = max.length;
		var maxVal = max.value;
		var _g = this.peek();
		switch(_g._hx_index) {
		case 0:
			this.currentIndex = oldIndex;
			return null;
		case 1:
			var c = _g.character;
			if(c != "}") {
				this.currentIndex = oldIndex;
				return null;
			}
			this.currentIndex++;
			if(maxLen == 0) {
				return new hre_QuantifierPrefix(minVal,-1);
			} else {
				if(maxVal < minVal) {
					throw haxe_Exception.thrown(new hre_RegExpSyntaxError("Max is finite and less than min",this.currentIndex,this.source));
				}
				return new hre_QuantifierPrefix(minVal,maxVal);
			}
			break;
		}
	}
	,readQuantifier: function() {
		var prefix = this.readQuantifierPrefix();
		if(prefix == null) {
			return null;
		}
		var greedy = this.isGreedyQuantifier();
		if(!greedy) {
			this.currentIndex++;
		}
		return new hre_ast_Quantifier(prefix.min,prefix.max,greedy);
	}
	,readDecimalDigits: function() {
		var len = 0;
		var val = 0;
		while(true) {
			var _g = this.peek();
			if(_g._hx_index == 1) {
				var c = _g.character;
				var charCode = HxOverrides.cca(c,0);
				if(48 <= charCode && charCode <= 57) {
					this.currentIndex++;
					++len;
					val = 10 * val + (charCode - 48);
				} else {
					break;
				}
			} else {
				break;
			}
		}
		return new hre_IntLiteral(len,val);
	}
	,readHexadecimal: function(minLen,maxLen) {
		var len = 0;
		var val = 0;
		while(!(maxLen == -1 && len >= maxLen)) {
			var _g = this.peek();
			if(_g._hx_index == 1) {
				var c = _g.character;
				var charCode = HxOverrides.cca(c,0);
				if(48 <= charCode && charCode <= 57) {
					this.currentIndex++;
					++len;
					val = 16 * val + (charCode - 48);
				} else if(65 <= charCode && charCode <= 70) {
					this.currentIndex++;
					++len;
					val = 16 * val + (10 + charCode - 65);
				} else if(97 <= charCode && charCode <= 102) {
					this.currentIndex++;
					++len;
					val = 16 * val + (10 + charCode - 97);
				} else {
					break;
				}
			} else {
				break;
			}
		}
		if(len < minLen) {
			throw haxe_Exception.thrown(new hre_RegExpSyntaxError("Not enough hex digits",this.currentIndex,this.source));
		}
		return new hre_IntLiteral(len,val);
	}
	,symbolAt: function(index) {
		if(index < this.length) {
			return hre_tokens_Symbol.Character(this.source.charAt(index));
		} else {
			return hre_tokens_Symbol.EndOfText;
		}
	}
	,charAt: function(index) {
		if(index >= this.length) {
			throw haxe_Exception.thrown(new hre_RegExpSyntaxError("Unexpected end of text",this.currentIndex,this.source));
		}
		return this.source.charAt(index);
	}
	,peek: function(lookahead) {
		if(lookahead == null) {
			lookahead = 0;
		}
		return this.symbolAt(this.currentIndex + lookahead);
	}
	,peekChar: function(lookahead) {
		if(lookahead == null) {
			lookahead = 0;
		}
		return this.charAt(this.currentIndex + lookahead);
	}
	,__class__: hre_RegExpParser
};
var hre_GroupKind = $hxEnums["hre.GroupKind"] = { __ename__ : "hre.GroupKind", __constructs__ : ["Capture","Simple","FollowedBy","NotFollowedBy"]
	,Capture: {_hx_index:0,__enum__:"hre.GroupKind",toString:$estr}
	,Simple: {_hx_index:1,__enum__:"hre.GroupKind",toString:$estr}
	,FollowedBy: {_hx_index:2,__enum__:"hre.GroupKind",toString:$estr}
	,NotFollowedBy: {_hx_index:3,__enum__:"hre.GroupKind",toString:$estr}
};
var hre_ast_Alternative = function(expressions) {
	this.terms = expressions;
};
hre_ast_Alternative.__name__ = "hre.ast.Alternative";
hre_ast_Alternative.prototype = {
	terms: null
	,__class__: hre_ast_Alternative
};
var hre_ast_Assertion = $hxEnums["hre.ast.Assertion"] = { __ename__ : "hre.ast.Assertion", __constructs__ : ["StartOfText","EndOfText","WordBoundary","NotWordBoundary","FollowedBy","NotFollowedBy"]
	,StartOfText: {_hx_index:0,__enum__:"hre.ast.Assertion",toString:$estr}
	,EndOfText: {_hx_index:1,__enum__:"hre.ast.Assertion",toString:$estr}
	,WordBoundary: {_hx_index:2,__enum__:"hre.ast.Assertion",toString:$estr}
	,NotWordBoundary: {_hx_index:3,__enum__:"hre.ast.Assertion",toString:$estr}
	,FollowedBy: ($_=function(disjunction) { return {_hx_index:4,disjunction:disjunction,__enum__:"hre.ast.Assertion",toString:$estr}; },$_.__params__ = ["disjunction"],$_)
	,NotFollowedBy: ($_=function(disjunction) { return {_hx_index:5,disjunction:disjunction,__enum__:"hre.ast.Assertion",toString:$estr}; },$_.__params__ = ["disjunction"],$_)
};
var hre_ast_Atom = $hxEnums["hre.ast.Atom"] = { __ename__ : "hre.ast.Atom", __constructs__ : ["AnyCharacter","Decimal","NotDecimal","Separator","NotSeparator","Word","NotWord","Backreference","Literal","Class","CaptureGroup","SimpleGroup"]
	,AnyCharacter: {_hx_index:0,__enum__:"hre.ast.Atom",toString:$estr}
	,Decimal: {_hx_index:1,__enum__:"hre.ast.Atom",toString:$estr}
	,NotDecimal: {_hx_index:2,__enum__:"hre.ast.Atom",toString:$estr}
	,Separator: {_hx_index:3,__enum__:"hre.ast.Atom",toString:$estr}
	,NotSeparator: {_hx_index:4,__enum__:"hre.ast.Atom",toString:$estr}
	,Word: {_hx_index:5,__enum__:"hre.ast.Atom",toString:$estr}
	,NotWord: {_hx_index:6,__enum__:"hre.ast.Atom",toString:$estr}
	,Backreference: ($_=function(captureId) { return {_hx_index:7,captureId:captureId,__enum__:"hre.ast.Atom",toString:$estr}; },$_.__params__ = ["captureId"],$_)
	,Literal: ($_=function(literal) { return {_hx_index:8,literal:literal,__enum__:"hre.ast.Atom",toString:$estr}; },$_.__params__ = ["literal"],$_)
	,Class: ($_=function(characterClass) { return {_hx_index:9,characterClass:characterClass,__enum__:"hre.ast.Atom",toString:$estr}; },$_.__params__ = ["characterClass"],$_)
	,CaptureGroup: ($_=function(disjunction,captureIndex) { return {_hx_index:10,disjunction:disjunction,captureIndex:captureIndex,__enum__:"hre.ast.Atom",toString:$estr}; },$_.__params__ = ["disjunction","captureIndex"],$_)
	,SimpleGroup: ($_=function(disjunction) { return {_hx_index:11,disjunction:disjunction,__enum__:"hre.ast.Atom",toString:$estr}; },$_.__params__ = ["disjunction"],$_)
};
var hre_ast_CharacterClass = function(inverted,ranges) {
	this.inverted = inverted;
	this.ranges = ranges;
};
hre_ast_CharacterClass.__name__ = "hre.ast.CharacterClass";
hre_ast_CharacterClass.prototype = {
	inverted: null
	,ranges: null
	,__class__: hre_ast_CharacterClass
};
var hre_ast_CharacterClassAtom = $hxEnums["hre.ast.CharacterClassAtom"] = { __ename__ : "hre.ast.CharacterClassAtom", __constructs__ : ["Literal","Decimal","NotDecimal","Separator","NotSeparator","Word","NotWord"]
	,Literal: ($_=function(value) { return {_hx_index:0,value:value,__enum__:"hre.ast.CharacterClassAtom",toString:$estr}; },$_.__params__ = ["value"],$_)
	,Decimal: {_hx_index:1,__enum__:"hre.ast.CharacterClassAtom",toString:$estr}
	,NotDecimal: {_hx_index:2,__enum__:"hre.ast.CharacterClassAtom",toString:$estr}
	,Separator: {_hx_index:3,__enum__:"hre.ast.CharacterClassAtom",toString:$estr}
	,NotSeparator: {_hx_index:4,__enum__:"hre.ast.CharacterClassAtom",toString:$estr}
	,Word: {_hx_index:5,__enum__:"hre.ast.CharacterClassAtom",toString:$estr}
	,NotWord: {_hx_index:6,__enum__:"hre.ast.CharacterClassAtom",toString:$estr}
};
var hre_ast_CharacterClassRange = $hxEnums["hre.ast.CharacterClassRange"] = { __ename__ : "hre.ast.CharacterClassRange", __constructs__ : ["Range","Simple"]
	,Range: ($_=function(start,end) { return {_hx_index:0,start:start,end:end,__enum__:"hre.ast.CharacterClassRange",toString:$estr}; },$_.__params__ = ["start","end"],$_)
	,Simple: ($_=function(value) { return {_hx_index:1,value:value,__enum__:"hre.ast.CharacterClassRange",toString:$estr}; },$_.__params__ = ["value"],$_)
};
var hre_ast_Disjunction = function(alternatives) {
	this.alternatives = alternatives;
};
hre_ast_Disjunction.__name__ = "hre.ast.Disjunction";
hre_ast_Disjunction.prototype = {
	alternatives: null
	,__class__: hre_ast_Disjunction
};
var hre_ast_Pattern = function(alternatives,captures) {
	hre_ast_Disjunction.call(this,alternatives);
	this.captures = captures;
};
hre_ast_Pattern.__name__ = "hre.ast.Pattern";
hre_ast_Pattern.__super__ = hre_ast_Disjunction;
hre_ast_Pattern.prototype = $extend(hre_ast_Disjunction.prototype,{
	captures: null
	,__class__: hre_ast_Pattern
});
var hre_ast_Quantifier = function(min,max,greedy) {
	this.min = min;
	this.max = max;
	this.greedy = greedy;
};
hre_ast_Quantifier.__name__ = "hre.ast.Quantifier";
hre_ast_Quantifier.prototype = {
	min: null
	,max: null
	,greedy: null
	,__class__: hre_ast_Quantifier
};
var hre_ast_Term = $hxEnums["hre.ast.Term"] = { __ename__ : "hre.ast.Term", __constructs__ : ["Assertion","Atom","QuantifiedAtom"]
	,Assertion: ($_=function(assertion) { return {_hx_index:0,assertion:assertion,__enum__:"hre.ast.Term",toString:$estr}; },$_.__params__ = ["assertion"],$_)
	,Atom: ($_=function(atom) { return {_hx_index:1,atom:atom,__enum__:"hre.ast.Term",toString:$estr}; },$_.__params__ = ["atom"],$_)
	,QuantifiedAtom: ($_=function(atom,quantifier,capturesStartIndex,capturesEndIndex) { return {_hx_index:2,atom:atom,quantifier:quantifier,capturesStartIndex:capturesStartIndex,capturesEndIndex:capturesEndIndex,__enum__:"hre.ast.Term",toString:$estr}; },$_.__params__ = ["atom","quantifier","capturesStartIndex","capturesEndIndex"],$_)
};
var hre_tokens_Symbol = $hxEnums["hre.tokens.Symbol"] = { __ename__ : "hre.tokens.Symbol", __constructs__ : ["EndOfText","Character"]
	,EndOfText: {_hx_index:0,__enum__:"hre.tokens.Symbol",toString:$estr}
	,Character: ($_=function(character) { return {_hx_index:1,character:character,__enum__:"hre.tokens.Symbol",toString:$estr}; },$_.__params__ = ["character"],$_)
};
var hxjsonast_Json = function(value,pos) {
	this.value = value;
	this.pos = pos;
};
hxjsonast_Json.__name__ = "hxjsonast.Json";
hxjsonast_Json.prototype = {
	value: null
	,pos: null
	,__class__: hxjsonast_Json
};
var hxjsonast_JsonValue = $hxEnums["hxjsonast.JsonValue"] = { __ename__ : "hxjsonast.JsonValue", __constructs__ : ["JString","JNumber","JObject","JArray","JBool","JNull"]
	,JString: ($_=function(s) { return {_hx_index:0,s:s,__enum__:"hxjsonast.JsonValue",toString:$estr}; },$_.__params__ = ["s"],$_)
	,JNumber: ($_=function(s) { return {_hx_index:1,s:s,__enum__:"hxjsonast.JsonValue",toString:$estr}; },$_.__params__ = ["s"],$_)
	,JObject: ($_=function(fields) { return {_hx_index:2,fields:fields,__enum__:"hxjsonast.JsonValue",toString:$estr}; },$_.__params__ = ["fields"],$_)
	,JArray: ($_=function(values) { return {_hx_index:3,values:values,__enum__:"hxjsonast.JsonValue",toString:$estr}; },$_.__params__ = ["values"],$_)
	,JBool: ($_=function(b) { return {_hx_index:4,b:b,__enum__:"hxjsonast.JsonValue",toString:$estr}; },$_.__params__ = ["b"],$_)
	,JNull: {_hx_index:5,__enum__:"hxjsonast.JsonValue",toString:$estr}
};
var hxjsonast_JObjectField = function(name,namePos,value) {
	this.name = name;
	this.namePos = namePos;
	this.value = value;
};
hxjsonast_JObjectField.__name__ = "hxjsonast.JObjectField";
hxjsonast_JObjectField.prototype = {
	name: null
	,namePos: null
	,value: null
	,__class__: hxjsonast_JObjectField
};
var hxjsonast_Position = function(file,min,max) {
	this.file = file;
	this.min = min;
	this.max = max;
};
hxjsonast_Position.__name__ = "hxjsonast.Position";
hxjsonast_Position.prototype = {
	file: null
	,min: null
	,max: null
	,__class__: hxjsonast_Position
};
var jali_LiftJali = function() { };
jali_LiftJali.__name__ = "jali.LiftJali";
jali_LiftJali.make = function(_) {
	return jali_pack_TermSum.TOf;
};
jali_LiftJali.apps = function(arr) {
	var _g = jali_pack_LangSum.App;
	var args = null;
	var f = function(name) {
		return _g(name,args);
	};
	var result = new Array(arr.length);
	var _g1 = 0;
	var _g2 = arr.length;
	while(_g1 < _g2) {
		var i = _g1++;
		result[i] = f(arr[i]);
	}
	return result;
};
jali_LiftJali.lits = function(arr) {
	var f = jali_pack_LangSum.Lit;
	var result = new Array(arr.length);
	var _g = 0;
	var _g1 = arr.length;
	while(_g < _g1) {
		var i = _g++;
		result[i] = f(arr[i]);
	}
	return result;
};
jali_LiftJali.alts = function(arr) {
	return stx_core_use_UseOptionNano.fudge(stx_core_pack_ArrayLift.rfold1(arr,stx_fn_binary_Implementation.swap(stx_fn_Binary._new(jali_pack_LangSum.Alt))));
};
jali_LiftJali.seqs = function(arr) {
	return stx_core_use_UseOptionNano.fudge(stx_core_pack_ArrayLift.rfold1(arr,stx_fn_binary_Implementation.swap(stx_fn_Binary._new(jali_pack_LangSum.Seq))));
};
jali_LiftJali.app = function(key) {
	return jali_pack_LangSum.App(key);
};
jali_LiftJali.app1 = function(key,exp) {
	return jali_pack_LangSum.App(key,exp);
};
jali_LiftJali.lit = function(key) {
	return jali_pack_LangSum.Lit(key);
};
var jali_pack_Constructor = {};
jali_pack_Constructor._new = function(self) {
	var this1 = self;
	return this1;
};
jali_pack_Constructor.lift = function(self) {
	return jali_pack_Constructor._new(self);
};
jali_pack_Constructor.unit = function(this1) {
	return jali_pack_Constructor.rest(this1,jali_pack_Constructor.last(this1));
};
jali_pack_Constructor.last = function(this1) {
	return jali_pack_Tail.unit();
};
jali_pack_Constructor.tail = function(this1,tail) {
	return jali_pack_Tail.lift(tail);
};
jali_pack_Constructor.body = function(this1,body) {
	return jali_pack_Constructor.tail(this1,[body]);
};
jali_pack_Constructor.code_only = function(this1,code) {
	return this1(jali_pack_HeadSum.Code(code),jali_pack_Constructor.last(this1));
};
jali_pack_Constructor.code = function(this1,code,rest) {
	return this1(jali_pack_HeadSum.Code(code),rest);
};
jali_pack_Constructor.code_data = function(this1,code,rest) {
	return this1(jali_pack_HeadSum.Code(code),[jali_pack_Constructor.data(this1,rest,jali_pack_Tail.fromWildcard(stx_core_pack_Wildcard.__))]);
};
jali_pack_Constructor.datum = function(this1,val,rest) {
	var _e = this1;
	var tmp = function() {
		return jali_pack_Constructor.last(_e);
	};
	return this1(jali_pack_HeadSum.Data([val]),stx_core_pack_OptionLift.def(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,rest),tmp));
};
jali_pack_Constructor.data = function(this1,val,rest) {
	return this1(jali_pack_HeadSum.Data(val),rest);
};
jali_pack_Constructor.rest = function(this1,rest) {
	return this1(jali_pack_HeadSum.Rest,rest);
};
jali_pack_Constructor.subtree = function(this1,head,body) {
	return jali_pack_Constructor.rest(this1,jali_pack_Constructor.tail(jali_LiftJali.make(jali_pack_TermSum.TOf),[head,jali_pack_Tail.toTerm(jali_pack_Constructor.body(jali_LiftJali.make(jali_pack_TermSum.TOf),body))]));
};
jali_pack_Constructor.prj = function(this1) {
	return this1;
};
jali_pack_Constructor.get_self = function(this1) {
	return jali_pack_Constructor.lift(this1);
};
var jali_pack_GrammarApi = function(name) {
	this.name = name;
	haxe_ds_StringMap.call(this);
};
jali_pack_GrammarApi.__name__ = "jali.pack.GrammarApi";
jali_pack_GrammarApi.__super__ = haxe_ds_StringMap;
jali_pack_GrammarApi.prototype = $extend(haxe_ds_StringMap.prototype,{
	name: null
	,def: function(name) {
		return stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Failed("no handler found for grammar: \"" + name + "\"",null,{ fileName : "jali/pack/Grammar.hx", lineNumber : 15, className : "jali.pack.GrammarApi", methodName : "def"}));
	}
	,lazy: function(seed) {
		var _g = $bind(this,this.apply);
		var seed1 = seed;
		return stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_LAnon(function() {
			return _g(seed1);
		}));
	}
	,apply: function(seed) {
		switch(seed._hx_index) {
		case 0:
			var args = seed.args;
			var name = seed.name;
			return stx_parse_pack_Parser._new(new stx_parse_jali_term_Stash(this.of(name),args,{ fileName : "jali/pack/Grammar.hx", lineNumber : 25, className : "jali.pack.GrammarApi", methodName : "apply"}));
		case 1:
			var e = seed.val;
			var name = seed.name;
			return stx_parse_pack_Parser._new(new stx_parse_jali_term_Tag(name,this.apply(e),{ fileName : "jali/pack/Grammar.hx", lineNumber : 26, className : "jali.pack.GrammarApi", methodName : "apply"}));
		case 2:
			return stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Succeed(seed,{ fileName : "jali/pack/Grammar.hx", lineNumber : 22, className : "jali.pack.GrammarApi", methodName : "apply"}));
		case 3:
			var e = seed.e;
			return stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Succeed(jali_pack_LangSum.Lit(e),{ fileName : "jali/pack/Grammar.hx", lineNumber : 23, className : "jali.pack.GrammarApi", methodName : "apply"}));
		case 4:
			var r = seed.r;
			var l = seed.l;
			return stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Then(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_With(this.lazy(l),this.lazy(r),function(l,r) {
				return stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,l,r);
			},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 103, className : "stx.parse.pack.ParserLift", methodName : "and"})),stx_core_use_UseNano.decouple(stx_core_pack_Wildcard.__,jali_pack_LangSum.Seq),{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 88, className : "stx.parse.pack.ParserLift", methodName : "then"}));
		case 5:
			var r = seed.r;
			var l = seed.l;
			return stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Or(this.lazy(l),this.lazy(r),{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 82, className : "stx.parse.pack.ParserLift", methodName : "or"}));
		case 6:
			var e = seed.e;
			return stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Then(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Many(this.lazy(e),{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 94, className : "stx.parse.pack.ParserLift", methodName : "many"})),function(arr) {
				return stx_core_pack_ArrayLift.lfold(arr,jali_pack_Lang.then,jali_pack_LangSum.Lit(jali_pack_TermSum.TOf(jali_pack_HeadSum.Rest,[])));
			},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 88, className : "stx.parse.pack.ParserLift", methodName : "then"}));
		case 7:
			var e = seed.e;
			return stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Then(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_OptionP(this.lazy(e),{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 180, className : "stx.parse.pack.ParserLift", methodName : "option"})),function(opt) {
				return stx_core_pack_OptionLift.defv(opt,seed);
			},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 88, className : "stx.parse.pack.ParserLift", methodName : "then"}));
		case 8:
			var e = seed.e;
			return stx_parse_pack_Parser._new(new stx_parse_jali_term_Memo(jali_pack_Lang.toParser(e,this),{ fileName : "jali/pack/Grammar.hx", lineNumber : 24, className : "jali.pack.GrammarApi", methodName : "apply"}));
		}
	}
	,seq: function(l,r) {
		if(l._hx_index == 3) {
			if(r._hx_index == 3) {
				var l1 = l.e;
				var r1 = r.e;
				return jali_pack_LangSum.Lit((jali_pack_Term.resolve(l1,"snoc"))(r1));
			} else {
				return jali_pack_LangSum.Seq(l,r);
			}
		} else {
			return jali_pack_LangSum.Seq(l,r);
		}
	}
	,of: function(key) {
		var a = stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,this.h[key]);
		var _g = $bind(this,this.def);
		var name = key;
		var b = stx_core_pack_OptionLift.def(a,function() {
			return _g(name);
		});
		return b;
	}
	,parse: function(ipt) {
		return this.of("main").parse(ipt);
	}
	,__class__: jali_pack_GrammarApi
});
var jali_pack_Grammar = {};
jali_pack_Grammar._new = function(name) {
	var this1 = new jali_pack_GrammarApi(name);
	return this1;
};
jali_pack_Grammar.fromExprs = function(this1,map) {
	var _g = haxe_ds_StringMap.kvIterator(map.h);
	while(_g.hasNext()) {
		var _g1 = _g.next();
		var key = _g1.key;
		var val = _g1.value;
		var value = jali_pack_Lang.toParser(val,jali_pack_Grammar.get_self(this1));
		this1.h[key] = value;
	}
	return this1;
};
jali_pack_Grammar.prj = function(this1) {
	return this1;
};
jali_pack_Grammar.get_self = function(this1) {
	return this1;
};
var jali_pack_HeadSum = $hxEnums["jali.pack.HeadSum"] = { __ename__ : "jali.pack.HeadSum", __constructs__ : ["Rest","Data","Code"]
	,Rest: {_hx_index:0,__enum__:"jali.pack.HeadSum",toString:$estr}
	,Data: ($_=function(data) { return {_hx_index:1,data:data,__enum__:"jali.pack.HeadSum",toString:$estr}; },$_.__params__ = ["data"],$_)
	,Code: ($_=function(code) { return {_hx_index:2,code:code,__enum__:"jali.pack.HeadSum",toString:$estr}; },$_.__params__ = ["code"],$_)
};
var jali_pack_Head = {};
jali_pack_Head._new = function(self) {
	var this1 = self;
	return this1;
};
jali_pack_Head.lift = function(self) {
	return jali_pack_Head._new(self);
};
jali_pack_Head.fold = function(this1,code,data,unit) {
	switch(this1._hx_index) {
	case 0:
		return unit();
	case 1:
		var _data = this1.data;
		return data(_data);
	case 2:
		var _code = this1.code;
		return code(_code);
	}
};
jali_pack_Head.either = function(this1,code,data) {
	return jali_pack_Head.fold(this1,function(_code) {
		return haxe_ds_Option.Some(code(_code));
	},function(_data) {
		return haxe_ds_Option.Some(data(_data));
	},function() {
		return haxe_ds_Option.None;
	});
};
jali_pack_Head.toOptionEither = function(this1) {
	return jali_pack_Head.fold(this1,function(code) {
		return haxe_ds_Option.Some(haxe_ds_Either.Left(code));
	},function(data) {
		return haxe_ds_Option.Some(haxe_ds_Either.Right(data));
	},function() {
		return haxe_ds_Option.None;
	});
};
jali_pack_Head.cat = function(this1) {
	return jali_pack_Head.toOptionEither(this1);
};
jali_pack_Head.code = function(this1) {
	return stx_core_pack_OptionLift.flat_map(jali_pack_Head.either(this1,function(code) {
		return haxe_ds_Option.Some(code);
	},function(_) {
		return haxe_ds_Option.None;
	}),function(x) {
		return x;
	});
};
jali_pack_Head.data = function(this1) {
	return stx_core_pack_OptionLift.flat_map(jali_pack_Head.either(this1,function(_) {
		return haxe_ds_Option.None;
	},function(data) {
		return haxe_ds_Option.Some(data);
	}),function(x) {
		return x;
	});
};
jali_pack_Head.is_term = function(this1) {
	return this1 == jali_pack_HeadSum.Rest;
};
jali_pack_Head.prj = function(this1) {
	return this1;
};
jali_pack_Head.get_self = function(this1) {
	return jali_pack_Head.lift(this1);
};
var jali_pack_LangSum = $hxEnums["jali.pack.LangSum"] = { __ename__ : "jali.pack.LangSum", __constructs__ : ["App","Tag","One","Lit","Seq","Alt","Rep","Opt","Mem"]
	,App: ($_=function(name,args) { return {_hx_index:0,name:name,args:args,__enum__:"jali.pack.LangSum",toString:$estr}; },$_.__params__ = ["name","args"],$_)
	,Tag: ($_=function(name,val) { return {_hx_index:1,name:name,val:val,__enum__:"jali.pack.LangSum",toString:$estr}; },$_.__params__ = ["name","val"],$_)
	,One: {_hx_index:2,__enum__:"jali.pack.LangSum",toString:$estr}
	,Lit: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"jali.pack.LangSum",toString:$estr}; },$_.__params__ = ["e"],$_)
	,Seq: ($_=function(l,r) { return {_hx_index:4,l:l,r:r,__enum__:"jali.pack.LangSum",toString:$estr}; },$_.__params__ = ["l","r"],$_)
	,Alt: ($_=function(l,r) { return {_hx_index:5,l:l,r:r,__enum__:"jali.pack.LangSum",toString:$estr}; },$_.__params__ = ["l","r"],$_)
	,Rep: ($_=function(e) { return {_hx_index:6,e:e,__enum__:"jali.pack.LangSum",toString:$estr}; },$_.__params__ = ["e"],$_)
	,Opt: ($_=function(e) { return {_hx_index:7,e:e,__enum__:"jali.pack.LangSum",toString:$estr}; },$_.__params__ = ["e"],$_)
	,Mem: ($_=function(e) { return {_hx_index:8,e:e,__enum__:"jali.pack.LangSum",toString:$estr}; },$_.__params__ = ["e"],$_)
};
var jali_pack_Lang = {};
jali_pack_Lang._new = function(self) {
	var this1 = self;
	return this1;
};
jali_pack_Lang.lift = function(self) {
	return jali_pack_Lang._new(self);
};
jali_pack_Lang.snoc = function(this1,that) {
	if(this1._hx_index == 3) {
		if(that._hx_index == 3) {
			var e0 = this1.e;
			var e1 = that.e;
			return jali_pack_LangSum.Lit(jali_pack_TermLift.both(e0,e1));
		} else {
			return jali_pack_LangSum.Seq(this1,that);
		}
	} else {
		return jali_pack_LangSum.Seq(this1,that);
	}
};
jali_pack_Lang.then = function(thiz,that) {
	return jali_pack_Lang.snoc(thiz,that);
};
jali_pack_Lang.prj = function(this1) {
	return this1;
};
jali_pack_Lang.get_self = function(this1) {
	return jali_pack_Lang.lift(this1);
};
jali_pack_Lang.alt = function(this1,arr) {
	return jali_LiftJali.alts([jali_pack_Lang.get_self(this1)].concat(arr));
};
jali_pack_Lang.or = function(this1,e1) {
	return jali_pack_Lang.alt(this1,[e1]);
};
jali_pack_Lang.seq = function(this1,arr) {
	return jali_LiftJali.seqs([jali_pack_Lang.get_self(this1)].concat(arr));
};
jali_pack_Lang.and = function(this1,expr) {
	return jali_pack_Lang.seq(this1,[expr]);
};
jali_pack_Lang.rep = function(this1) {
	return jali_pack_LangSum.Rep(this1);
};
jali_pack_Lang.rep1 = function(this1) {
	return jali_pack_LangSum.Seq(this1,jali_pack_LangSum.Rep(this1));
};
jali_pack_Lang.opt = function(this1) {
	return jali_pack_LangSum.Opt(this1);
};
jali_pack_Lang.mem = function(this1) {
	return jali_pack_LangSum.Mem(this1);
};
jali_pack_Lang.tag = function(this1,str) {
	return jali_pack_LangSum.Tag(str,this1);
};
jali_pack_Lang.toParser = function(this1,grammar) {
	var _g = $bind(grammar,grammar.apply);
	var seed = this1;
	return stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_LAnon(function() {
		return _g(seed);
	}));
};
jali_pack_Lang.mod = function(fn,self) {
	var fn1 = fn;
	var f = function(self) {
		return jali_pack_Lang.mod(fn1,self);
	};
	var tmp;
	switch(self._hx_index) {
	case 0:
		var args = self.args;
		var name = self.name;
		tmp = jali_pack_LangSum.App(name,args);
		break;
	case 1:
		var val = self.val;
		var name = self.name;
		tmp = jali_pack_LangSum.Tag(name,f(val));
		break;
	case 2:
		tmp = jali_pack_LangSum.One;
		break;
	case 3:
		var e = self.e;
		tmp = jali_pack_LangSum.Lit(e);
		break;
	case 4:
		var r = self.r;
		var l = self.l;
		tmp = jali_pack_LangSum.Seq(f(l),f(r));
		break;
	case 5:
		var r = self.r;
		var l = self.l;
		tmp = jali_pack_LangSum.Alt(f(l),f(r));
		break;
	case 6:
		var e = self.e;
		tmp = jali_pack_LangSum.Rep(f(e));
		break;
	case 7:
		var e = self.e;
		tmp = jali_pack_LangSum.Opt(f(e));
		break;
	case 8:
		var e = self.e;
		tmp = jali_pack_LangSum.Mem(f(e));
		break;
	}
	return fn(tmp);
};
jali_pack_Lang.fold = function(one,app,tag,lit,seq,rep,alt,opt,mem,term,v) {
	var one1 = one;
	var app1 = app;
	var tag1 = tag;
	var lit1 = lit;
	var seq1 = seq;
	var rep1 = rep;
	var alt1 = alt;
	var opt1 = opt;
	var mem1 = mem;
	var term1 = term;
	var sub = function(v) {
		return jali_pack_Lang.fold(one1,app1,tag1,lit1,seq1,rep1,alt1,opt1,mem1,term1,v);
	};
	switch(v._hx_index) {
	case 0:
		var args = v.args;
		var name = v.name;
		return app(name,term(args));
	case 1:
		var val = v.val;
		var name = v.name;
		return tag(name,sub(val));
	case 2:
		return one();
	case 3:
		var e = v.e;
		return lit(term(e));
	case 4:
		var r = v.r;
		var l = v.l;
		return seq(sub(l),sub(r));
	case 5:
		var r = v.r;
		var l = v.l;
		return alt(sub(l),sub(r));
	case 6:
		var e = v.e;
		return rep(sub(e));
	case 7:
		var e = v.e;
		return opt(sub(e));
	case 8:
		var e = v.e;
		return mem(sub(e));
	}
};
jali_pack_Lang.toString = function(this1) {
	switch(this1._hx_index) {
	case 0:
		var args = this1.args;
		var name = this1.name;
		var arg = stx_core_pack_OptionLift.defv(stx_core_pack_OptionLift.map(stx_core_pack_OptionLift.map(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,args),function(_) {
			return jali_pack_TermLift.toStringCompact(_);
		}),function(_) {
			return " (" + _ + ")";
		}),"");
		return "" + name + arg;
	case 1:
		var val = this1.val;
		var name = this1.name;
		return "#" + name + " " + jali_pack_Lang.toString(val);
	case 2:
		return ".";
	case 3:
		var e = this1.e;
		return "e.toString()";
	case 4:
		var r = this1.r;
		var l = this1.l;
		return "" + (l == null ? "null" : jali_pack_Lang.toString(l)) + " " + (r == null ? "null" : jali_pack_Lang.toString(r));
	case 5:
		var r = this1.r;
		var l = this1.l;
		return "" + (l == null ? "null" : jali_pack_Lang.toString(l)) + " | " + (r == null ? "null" : jali_pack_Lang.toString(r));
	case 6:
		var e = this1.e;
		return "" + (e == null ? "null" : jali_pack_Lang.toString(e)) + "*";
	case 7:
		var e = this1.e;
		return "" + (e == null ? "null" : jali_pack_Lang.toString(e)) + "?";
	case 8:
		var e = this1.e;
		return "@" + (e == null ? "null" : jali_pack_Lang.toString(e));
	}
};
var jali_pack_Rule = function(name) {
	haxe_ds_StringMap.call(this);
	this.name = name;
};
jali_pack_Rule.__name__ = "jali.pack.Rule";
jali_pack_Rule.__super__ = haxe_ds_StringMap;
jali_pack_Rule.prototype = $extend(haxe_ds_StringMap.prototype,{
	name: null
	,toArray: function() {
		var out = [];
		var _g = haxe_ds_StringMap.kvIterator(this.h);
		while(_g.hasNext()) {
			var _g1 = _g.next();
			var key = _g1.key;
			var val = _g1.value;
			out.push(stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,key,val));
		}
		return out;
	}
	,show: function() {
		var _this = this.toArray();
		var f = stx_core_use_UseNano.decouple(stx_core_pack_Wildcard.__,function(l,r) {
			return "" + l + " :=    " + jali_pack_Lang.toString(r);
		});
		var result = new Array(_this.length);
		var _g = 0;
		var _g1 = _this.length;
		while(_g < _g1) {
			var i = _g++;
			result[i] = f(_this[i]);
		}
		return "\n" + result.join("\n");
	}
	,__class__: jali_pack_Rule
});
var stx_core_pack_OptionLift = function() { };
stx_core_pack_OptionLift.__name__ = "stx.core.pack.OptionLift";
stx_core_pack_OptionLift.fold = function(self,ok,no) {
	switch(self._hx_index) {
	case 0:
		var t = self.v;
		return ok(t);
	case 1:
		return no();
	}
};
stx_core_pack_OptionLift.foldv = function(self,ok,no) {
	return stx_core_pack_OptionLift.fold(self,ok,function() {
		return no;
	});
};
stx_core_pack_OptionLift.map = function(self,f) {
	return stx_core_pack_OptionLift.fold(self,function(t) {
		return haxe_ds_Option.Some(f(t));
	},function() {
		return haxe_ds_Option.None;
	});
};
stx_core_pack_OptionLift.flat_map = function(self,f) {
	var out = stx_core_pack_OptionLift.map(self,f);
	return stx_core_pack_Option.flatten(out);
};
stx_core_pack_OptionLift.or = function(self,thunk) {
	return stx_core_pack_OptionLift.fold(self,haxe_ds_Option.Some,thunk);
};
stx_core_pack_OptionLift.filter = function(self,fn) {
	return stx_core_pack_OptionLift.flat_map(self,function(v) {
		if(fn(v)) {
			return haxe_ds_Option.Some(v);
		} else {
			return haxe_ds_Option.None;
		}
	});
};
stx_core_pack_OptionLift.def = function(self,thunk) {
	if(self._hx_index == 0) {
		var v = self.v;
		return v;
	} else {
		return thunk();
	}
};
stx_core_pack_OptionLift.defv = function(self,v) {
	return stx_core_pack_OptionLift.def(self,function() {
		return v;
	});
};
stx_core_pack_OptionLift.is_defined = function(self) {
	return stx_core_pack_OptionLift.fold(self,function(_) {
		return true;
	},function() {
		return false;
	});
};
stx_core_pack_OptionLift.iterator = function(self) {
	var done = false;
	return { hasNext : function() {
		if(!done) {
			return stx_core_pack_OptionLift.is_defined(self);
		} else {
			return false;
		}
	}, next : function() {
		done = true;
		return stx_core_pack_OptionLift.defv(self,null);
	}};
};
stx_core_pack_OptionLift.merge = function(self,that,fn) {
	switch(self._hx_index) {
	case 0:
		var _g = self.v;
		switch(that._hx_index) {
		case 0:
			var l = _g;
			var r = that.v;
			return haxe_ds_Option.Some(fn(l,r));
		case 1:
			var l = _g;
			return haxe_ds_Option.Some(l);
		}
		break;
	case 1:
		if(that._hx_index == 0) {
			var r = that.v;
			return haxe_ds_Option.Some(r);
		} else {
			return haxe_ds_Option.None;
		}
		break;
	}
};
stx_core_pack_OptionLift.toArray = function(self) {
	switch(self._hx_index) {
	case 0:
		var v = self.v;
		return [v];
	case 1:
		return [];
	}
};
stx_core_pack_OptionLift.prj = function(self) {
	return self;
};
var stx_core_use_UseNano = function() { };
stx_core_use_UseNano.__name__ = "stx.core.use.UseNano";
stx_core_use_UseNano.if_else = function(b,_if,_else) {
	if(b) {
		return _if();
	} else {
		return _else();
	}
};
stx_core_use_UseNano.here = function(wildcard,pos) {
	return pos;
};
stx_core_use_UseNano.test = function(wildcard,arr) {
	var runner = new haxe_unit_TestRunner();
	var t = $getIterator(arr);
	while(t.hasNext()) {
		var t1 = t.next();
		runner.add(t1);
	}
	runner.run();
};
stx_core_use_UseNano.uuid = function(v,value) {
	if(value == null) {
		value = "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx";
	}
	var reg = new EReg("[xy]","g");
	return reg.map(value,function(reg) {
		var r = Math.random() * 16 | 0 | 0;
		var v = reg.matched(0) == "x" ? r : r & 3 | 8;
		return StringTools.hex(v);
	}).toLowerCase();
};
stx_core_use_UseNano.sep = function(_) {
	var out = "/";
	return out;
};
stx_core_use_UseNano.option = function(wildcard,v) {
	if(v == null) {
		return haxe_ds_Option.None;
	} else {
		return haxe_ds_Option.Some(v);
	}
};
stx_core_use_UseNano.success = function(wildcard,t) {
	return stx_core_pack_Res.success(t);
};
stx_core_use_UseNano.failure = function(wildcard,e) {
	return stx_core_pack_Res.failure(e);
};
stx_core_use_UseNano.fault = function(wildcard,pos) {
	return stx_core_pack_Fault._new(pos);
};
stx_core_use_UseNano.couple = function(wildcard,tI,tII) {
	return function(fn) {
		fn(tI,tII);
	};
};
stx_core_use_UseNano.decouple = function(wildcard,fn) {
	return function(tp) {
		return stx_core_pack_CoupleLift.decouple(tp,fn);
	};
};
stx_core_use_UseNano.toCouple = function(self) {
	return self;
};
stx_core_use_UseNano.lbump = function(wildcard,tp) {
	return stx_core_pack_CoupleLift.decouple(tp,function(lhs,rhs) {
		return stx_core_pack_OptionLift.fold(lhs,function(l) {
			return haxe_ds_Option.Some(stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,l,rhs));
		},function() {
			return haxe_ds_Option.None;
		});
	});
};
stx_core_use_UseNano.rbump = function(wildcard,tp) {
	return stx_core_pack_CoupleLift.decouple(tp,function(lhs,rhs) {
		return stx_core_pack_OptionLift.fold(rhs,function(r) {
			return haxe_ds_Option.Some(stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,lhs,r));
		},function() {
			return haxe_ds_Option.None;
		});
	});
};
stx_core_use_UseNano.fromPos = function(pos) {
	return stx_core_pack_Position.fromPos(pos);
};
stx_core_use_UseNano.future = function(wildcard) {
	var trigger = new tink_core_FutureTrigger();
	var future = trigger;
	return stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,trigger,future);
};
stx_core_use_UseNano.tracer = function(v,pos) {
	return function(t) {
		haxe_Log.trace(t,{ fileName : "stx/core/use/UseNano.hx", lineNumber : 102, className : "stx.core.use.UseNano", methodName : "tracer", customParams : [pos]});
		return t;
	};
};
stx_core_use_UseNano.traced = function(v,pos) {
	var infos = pos;
	return function(d) {
		haxe_Log.trace(d,infos);
	};
};
stx_core_use_UseNano.through = function(__) {
	return function(v) {
		return v;
	};
};
stx_core_use_UseNano.command = function(__,fn) {
	return function(v) {
		fn(v);
		return v;
	};
};
stx_core_use_UseNano.perform = function(__,fn) {
	return function(v) {
		fn();
		return v;
	};
};
stx_core_use_UseNano.execute = function(__,fn) {
	return function(v) {
		var _g = fn();
		if(_g._hx_index == 0) {
			var e = _g.v;
			return stx_core_use_UseNano.failure(__,e);
		} else {
			return stx_core_use_UseNano.success(__,v);
		}
	};
};
stx_core_use_UseNano.left = function(__,tI) {
	return haxe_ds_Either.Left(tI);
};
stx_core_use_UseNano.right = function(__,tII) {
	return haxe_ds_Either.Right(tII);
};
var stx_core_pack_Wildcard = $hxEnums["stx.core.pack.Wildcard"] = { __ename__ : "stx.core.pack.Wildcard", __constructs__ : ["__"]
	,__: {_hx_index:0,__enum__:"stx.core.pack.Wildcard",toString:$estr}
};
var jali_pack_Tail = {};
jali_pack_Tail.get = function(this1,int) {
	return this1[int];
};
jali_pack_Tail._new = function(self) {
	var this1 = stx_core_pack_OptionLift.defv(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,self),[]);
	return this1;
};
jali_pack_Tail.lift = function(self) {
	return jali_pack_Tail._new(self);
};
jali_pack_Tail.unit = function() {
	return jali_pack_Tail.lift([]);
};
jali_pack_Tail.once = function(v) {
	return jali_pack_Tail.lift([v]);
};
jali_pack_Tail.fromWildcard = function(wildcard) {
	return jali_pack_Tail.unit();
};
jali_pack_Tail.fromArrayT = function(arr) {
	return jali_pack_Tail.lift(stx_core_pack_ArrayLift.prj(arr));
};
jali_pack_Tail.body = function(this1) {
	if(this1.length == 1) {
		return stx_core_pack_ArrayLift.head(this1);
	} else {
		return haxe_ds_Option.None;
	}
};
jali_pack_Tail.data_body = function(this1) {
	return stx_core_pack_OptionLift.flat_map(jali_pack_Tail.body(this1),function(term) {
		return jali_pack_TermLift.data(term);
	});
};
jali_pack_Tail.prj = function(this1) {
	return this1;
};
jali_pack_Tail.get_self = function(this1) {
	return jali_pack_Tail.lift(this1);
};
jali_pack_Tail.toStdArray = function(this1) {
	return this1;
};
jali_pack_Tail.is_defined = function(this1) {
	return this1.length > 0;
};
jali_pack_Tail.head = function(this1) {
	return stx_core_pack_ArrayLift.head(this1);
};
jali_pack_Tail.tail = function(this1) {
	return jali_pack_Tail.fromArrayT(stx_core_pack_ArrayLift.tail(this1));
};
jali_pack_Tail.snoc = function(this1,t) {
	return jali_pack_Tail.fromArrayT(stx_core_pack_ArrayLift.snoc(this1,t));
};
jali_pack_Tail.toTerm = function(this1) {
	return jali_pack_TermSum.TOf(jali_pack_HeadSum.Rest,this1);
};
var jali_pack_TermSum = $hxEnums["jali.pack.TermSum"] = { __ename__ : "jali.pack.TermSum", __constructs__ : ["TOf"]
	,TOf: ($_=function(head,rest) { return {_hx_index:0,head:head,rest:rest,__enum__:"jali.pack.TermSum",toString:$estr}; },$_.__params__ = ["head","rest"],$_)
};
var jali_pack_TermLift = function() { };
jali_pack_TermLift.__name__ = "jali.pack.TermLift";
jali_pack_TermLift.head = function(self) {
	var _g = self.rest;
	var hd = self.head;
	return hd;
};
jali_pack_TermLift.head_only = function(self) {
	if(jali_pack_Tail.is_defined(stx_core_pack_CoupleLift.snd(jali_pack_Term.cat(self)))) {
		return haxe_ds_Option.None;
	} else {
		return stx_core_pack_Option.fromNullT(stx_core_pack_CoupleLift.fst(jali_pack_Term.cat(self)));
	}
};
jali_pack_TermLift.tail = function(self) {
	var _g = self.head;
	var xs = self.rest;
	return stx_core_pack_OptionLift.defv(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,xs),[]);
};
jali_pack_TermLift.tail_body = function(self) {
	var _g = self.head;
	var tail = self.rest;
	return jali_pack_Tail.body(tail);
};
jali_pack_TermLift.code_only = function(self) {
	return jali_pack_Head.code(stx_core_pack_CoupleLift.fst(jali_pack_Term.cat(self)));
};
jali_pack_TermLift.code = function(self) {
	var fn1 = function(head) {
		return jali_pack_Head.code(head);
	};
	var fn2 = stx_core_use_UseNano.through(stx_core_pack_Wildcard.__);
	return (stx_fn_Dual.into(function(t) {
		var tmp = stx_core_pack_CoupleLift.fst(t);
		var tmp1 = fn1(tmp);
		var tmp = stx_core_pack_CoupleLift.snd(t);
		return stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,tmp1,fn2(tmp));
	},function(l,r) {
		var _g = function(tI,tII) {
			return stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,tI,tII);
		};
		var tII = r;
		return stx_core_pack_OptionLift.map(l,function(tI) {
			return _g(tI,tII);
		});
	}))(jali_pack_Term.cat(self));
};
jali_pack_TermLift.code_body = function(self) {
	return stx_core_pack_OptionLift.flat_map(jali_pack_TermLift.body(self),function(tp) {
		return stx_core_use_UseNano.lbump(stx_core_pack_Wildcard.__,stx_core_pack_CoupleLift.lmap(tp,function(head) {
			return jali_pack_Head.code(head);
		}));
	});
};
jali_pack_TermLift.body = function(self) {
	var fn1 = stx_core_use_UseNano.through(stx_core_pack_Wildcard.__);
	var fn2 = function(_) {
		return jali_pack_Tail.body(_);
	};
	return (stx_fn_Dual.into(function(t) {
		var tmp = stx_core_pack_CoupleLift.fst(t);
		var tmp1 = fn1(tmp);
		var tmp = stx_core_pack_CoupleLift.snd(t);
		return stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,tmp1,fn2(tmp));
	},function(head,opt) {
		var _g = function(tI,tII) {
			return stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,tI,tII);
		};
		var tI = head;
		return stx_core_pack_OptionLift.map(opt,function(tII) {
			return _g(tI,tII);
		});
	}))(jali_pack_TermLift.toCouple(self));
};
jali_pack_TermLift.data_only = function(self) {
	if(jali_pack_Tail.is_defined(stx_core_pack_CoupleLift.snd(jali_pack_Term.cat(self)))) {
		return haxe_ds_Option.None;
	} else {
		return jali_pack_Head.data(stx_core_pack_CoupleLift.fst(jali_pack_Term.cat(self)));
	}
};
jali_pack_TermLift.data = function(self) {
	var fn1 = function(head) {
		return jali_pack_Head.data(head);
	};
	var fn2 = stx_core_use_UseNano.through(stx_core_pack_Wildcard.__);
	return (stx_fn_unary_Implementation.then(function(t) {
		var tmp = stx_core_pack_CoupleLift.fst(t);
		var tmp1 = fn1(tmp);
		var tmp = stx_core_pack_CoupleLift.snd(t);
		return stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,tmp1,fn2(tmp));
	},function(tp) {
		return stx_core_use_UseNano.lbump(stx_core_pack_Wildcard.__,tp);
	}))(jali_pack_Term.cat(self));
};
jali_pack_TermLift.data_body = function(self) {
	return stx_core_pack_OptionLift.flat_map(jali_pack_TermLift.body(self),function(tp) {
		return stx_core_use_UseNano.lbump(stx_core_pack_Wildcard.__,stx_core_pack_CoupleLift.lmap(tp,function(head) {
			return jali_pack_Head.data(head);
		}));
	});
};
jali_pack_TermLift.endata = function(self,that) {
	var _g = self.rest;
	var _g1 = self.head;
	switch(_g1._hx_index) {
	case 0:
		if(_g == null) {
			return jali_pack_TermSum.TOf(jali_pack_HeadSum.Data(that),jali_pack_Tail.unit());
		} else {
			var rest = _g;
			return jali_pack_TermSum.TOf(jali_pack_HeadSum.Data(that),rest);
		}
		break;
	case 1:
		var rest = _g;
		var data = _g1.data;
		return jali_pack_TermSum.TOf(jali_pack_HeadSum.Data(data.concat(that)),rest);
	case 2:
		var _g2 = _g1.code;
		var rest = _g;
		return jali_pack_TermSum.TOf(jali_pack_HeadSum.Data(that),[self]);
	}
};
jali_pack_TermLift.concat = function(self,that) {
	var _g = self.rest;
	var _g1 = self.head;
	switch(_g1._hx_index) {
	case 0:
		if(_g == null) {
			return jali_pack_TermSum.TOf(jali_pack_HeadSum.Rest,[that]);
		} else {
			var rest = _g;
			return jali_pack_TermSum.TOf(jali_pack_HeadSum.Rest,jali_pack_Tail.prj(jali_pack_Tail.snoc(rest,that)));
		}
		break;
	case 1:
		var rest = _g;
		var data = _g1.data;
		return jali_pack_TermSum.TOf(jali_pack_HeadSum.Rest,[self,that]);
	case 2:
		var _g2 = _g1.code;
		var rest = _g;
		return jali_pack_TermSum.TOf(jali_pack_HeadSum.Rest,[self,that]);
	}
};
jali_pack_TermLift.subtree = function(self,that) {
	var _g = self.rest;
	var _g1 = self.head;
	switch(_g1._hx_index) {
	case 0:
		if(_g == null) {
			return jali_pack_TermSum.TOf(jali_pack_HeadSum.Rest,[that]);
		} else {
			var rest = _g;
			return jali_pack_TermSum.TOf(jali_pack_HeadSum.Rest,jali_pack_Tail.prj(jali_pack_Tail.snoc(rest,that)));
		}
		break;
	case 1:
		var rest = _g;
		var data = _g1.data;
		return jali_pack_TermSum.TOf(jali_pack_HeadSum.Data(data),jali_pack_Tail.snoc(rest,that));
	case 2:
		var rest = _g;
		var code = _g1.code;
		return jali_pack_TermSum.TOf(jali_pack_HeadSum.Code(code),jali_pack_Tail.snoc(rest,that));
	}
};
jali_pack_TermLift.both = function(self,that) {
	return jali_pack_TermSum.TOf(jali_pack_HeadSum.Rest,[self,that]);
};
jali_pack_TermLift.rest = function(self) {
	var tup = jali_pack_Term.cat(self);
	if(jali_pack_Head.is_term(stx_core_pack_CoupleLift.fst(tup))) {
		return haxe_ds_Option.Some(stx_core_pack_CoupleLift.snd(tup));
	} else {
		return haxe_ds_Option.None;
	}
};
jali_pack_TermLift.rest_body = function(self) {
	var tup = jali_pack_Term.cat(self);
	if(jali_pack_Head.is_term(stx_core_pack_CoupleLift.fst(tup)) && stx_core_pack_CoupleLift.snd(tup).length == 1) {
		return haxe_ds_Option.Some(jali_pack_Tail.get(stx_core_pack_CoupleLift.snd(tup),0));
	} else {
		return haxe_ds_Option.None;
	}
};
jali_pack_TermLift.toArray = function(self) {
	var _g = self.rest;
	var _g1 = self.head;
	switch(_g1._hx_index) {
	case 0:
		var rest = _g;
		var result = new Array(rest.length);
		var _g2 = 0;
		var _g3 = rest.length;
		while(_g2 < _g3) {
			var i = _g2++;
			result[i] = jali_pack_TermLift.toArray(rest[i]);
		}
		return result;
	case 1:
		var rest = _g;
		var data = _g1.data;
		var result = new Array(rest.length);
		var _g2 = 0;
		var _g3 = rest.length;
		while(_g2 < _g3) {
			var i = _g2++;
			result[i] = jali_pack_TermLift.toArray(rest[i]);
		}
		return stx_core_pack_ArrayLift.snoc(data,result);
	case 2:
		var rest = _g;
		var name = _g1.code;
		var result = new Array(rest.length);
		var _g = 0;
		var _g1 = rest.length;
		while(_g < _g1) {
			var i = _g++;
			result[i] = jali_pack_TermLift.toArray(rest[i]);
		}
		return [name].concat(result);
	}
};
jali_pack_TermLift.toJsonic = function(self) {
	var stamp = function() {
		return { };
	};
	var rec = null;
	rec = function(v) {
		var _g = v.rest;
		var _g1 = v.head;
		switch(_g1._hx_index) {
		case 0:
			var rest = _g;
			var out = stamp();
			var _this = stx_core_pack_OptionLift.defv(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,rest),[]);
			var result = new Array(_this.length);
			var _g2 = 0;
			var _g3 = _this.length;
			while(_g2 < _g3) {
				var i = _g2++;
				result[i] = rec(_this[i]);
			}
			var rest = result;
			if(rest.length > 0) {
				out.rest = rest;
			}
			return out;
		case 1:
			var rest = _g;
			var data = _g1.data;
			var out = stamp();
			out.data = data;
			var _this = stx_core_pack_OptionLift.defv(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,rest),[]);
			var result = new Array(_this.length);
			var _g2 = 0;
			var _g3 = _this.length;
			while(_g2 < _g3) {
				var i = _g2++;
				result[i] = rec(_this[i]);
			}
			var rest = result;
			if(rest.length > 0) {
				out.rest = rest;
			}
			return out;
		case 2:
			var rest = _g;
			var code = _g1.code;
			var out = stamp();
			out.code = code;
			var _this = stx_core_pack_OptionLift.defv(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,rest),[]);
			var result = new Array(_this.length);
			var _g = 0;
			var _g1 = _this.length;
			while(_g < _g1) {
				var i = _g++;
				result[i] = rec(_this[i]);
			}
			var rest = result;
			if(rest.length > 0) {
				out.rest = rest;
			}
			return out;
		}
	};
	return rec(self);
};
jali_pack_TermLift.map = function(self,fn) {
	var _g = self.rest;
	var _g1 = self.head;
	switch(_g1._hx_index) {
	case 0:
		if(_g == null) {
			return jali_pack_TermSum.TOf(jali_pack_HeadSum.Rest,[]);
		} else {
			var _rest = _g;
			var fn1 = fn;
			var f = function(self) {
				return jali_pack_TermLift.map(self,fn1);
			};
			var result = new Array(_rest.length);
			var _g2 = 0;
			var _g3 = _rest.length;
			while(_g2 < _g3) {
				var i = _g2++;
				result[i] = f(_rest[i]);
			}
			return jali_pack_TermSum.TOf(jali_pack_HeadSum.Rest,result);
		}
		break;
	case 1:
		var _rest = _g;
		var _data = _g1.data;
		var result = new Array(_data.length);
		var _g2 = 0;
		var _g3 = _data.length;
		while(_g2 < _g3) {
			var i = _g2++;
			result[i] = fn(_data[i]);
		}
		var tmp = jali_pack_HeadSum.Data(result);
		var fn2 = fn;
		var f = function(self) {
			return jali_pack_TermLift.map(self,fn2);
		};
		var result = new Array(_rest.length);
		var _g2 = 0;
		var _g3 = _rest.length;
		while(_g2 < _g3) {
			var i = _g2++;
			result[i] = f(_rest[i]);
		}
		return jali_pack_TermSum.TOf(tmp,result);
	case 2:
		var _rest = _g;
		var _code = _g1.code;
		var tmp = jali_pack_HeadSum.Code(_code);
		var fn3 = fn;
		var f = function(self) {
			return jali_pack_TermLift.map(self,fn3);
		};
		var result = new Array(_rest.length);
		var _g = 0;
		var _g1 = _rest.length;
		while(_g < _g1) {
			var i = _g++;
			result[i] = f(_rest[i]);
		}
		return jali_pack_TermSum.TOf(tmp,result);
	}
};
jali_pack_TermLift.t_reduce = function(self,unit,pure,plus,code) {
	code = stx_core_pack_OptionLift.defv(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,code),function(_) {
		return haxe_ds_Option.None;
	});
	var unit1 = unit;
	var pure1 = pure;
	var plus1 = plus;
	var code1 = code;
	var f = function(self) {
		return jali_pack_TermLift.t_reduce(self,unit1,pure1,plus1,code1);
	};
	var _g = self.rest;
	var _g1 = self.head;
	switch(_g1._hx_index) {
	case 0:
		if(_g == null) {
			return unit();
		} else {
			var _rest = _g;
			var result = new Array(_rest.length);
			var _g2 = 0;
			var _g3 = _rest.length;
			while(_g2 < _g3) {
				var i = _g2++;
				result[i] = f(_rest[i]);
			}
			return stx_core_pack_ArrayLift.lfold(result,plus,unit());
		}
		break;
	case 1:
		var _rest = _g;
		var _data = _g1.data;
		var result = new Array(_rest.length);
		var _g2 = 0;
		var _g3 = _rest.length;
		while(_g2 < _g3) {
			var i = _g2++;
			result[i] = f(_rest[i]);
		}
		var tmp = result;
		var result = new Array(_data.length);
		var _g2 = 0;
		var _g3 = _data.length;
		while(_g2 < _g3) {
			var i = _g2++;
			result[i] = pure(_data[i]);
		}
		return stx_core_pack_ArrayLift.lfold(tmp,plus,stx_core_pack_ArrayLift.lfold(result,plus,unit()));
	case 2:
		var _rest = _g;
		var _code = _g1.code;
		var unit2 = unit;
		var pure2 = stx_core_pack_OptionLift.defv(code(_code),pure);
		var plus2 = plus;
		var code2 = code;
		var f = function(self) {
			return jali_pack_TermLift.t_reduce(self,unit2,pure2,plus2,code2);
		};
		var result = new Array(_rest.length);
		var _g = 0;
		var _g1 = _rest.length;
		while(_g < _g1) {
			var i = _g++;
			result[i] = f(_rest[i]);
		}
		return stx_core_pack_ArrayLift.lfold(result,plus,unit());
	}
};
jali_pack_TermLift.optimise = function(self) {
	return jali_pack_TermLift.mod(self,function(x) {
		var _g = x.rest;
		var _g1 = x.head;
		if(_g == null) {
			var hd = _g1;
			return jali_pack_TermSum.TOf(hd,[]);
		} else {
			var hd = _g1;
			var subs = _g;
			return stx_core_use_UseNano.if_else(stx_core_pack_ArrayLift.all(subs,function(sub) {
				var _g = sub.rest;
				if(sub.head._hx_index == 0) {
					return true;
				} else {
					return false;
				}
			}),function() {
				var tmp = stx_core_pack_ArrayLift.flat_map(stx_core_pack_ArrayLift.map_filter(subs,function(term) {
					if(term.head._hx_index == 0) {
						var arr = term.rest;
						return haxe_ds_Option.Some(arr);
					} else {
						return haxe_ds_Option.None;
					}
				}),function(_) {
					return jali_pack_Tail.toStdArray(_);
				});
				return jali_pack_TermSum.TOf(hd,jali_pack_Tail.fromArrayT(tmp));
			},function() {
				return jali_pack_TermSum.TOf(hd,subs);
			});
		}
	});
};
jali_pack_TermLift.codeify = function(self) {
	return jali_pack_TermLift.mod(self,function(x) {
		var _g = x.head;
		if(_g._hx_index == 1) {
			var _g1 = _g.data;
			if(_g1.length == 1) {
				var _rest = x.rest;
				var str = _g1[0];
				return jali_pack_TermSum.TOf(jali_pack_HeadSum.Code(str),_rest);
			} else {
				return x;
			}
		} else {
			return x;
		}
	});
};
jali_pack_TermLift.mod = function(self,fn) {
	var _g = self.rest;
	var _g1 = self.head;
	var tmp;
	switch(_g1._hx_index) {
	case 0:
		if(_g == null) {
			tmp = jali_pack_TermSum.TOf(jali_pack_HeadSum.Rest,[]);
		} else {
			var _rest = _g;
			var fn1 = fn;
			var f = function(self) {
				return jali_pack_TermLift.mod(self,fn1);
			};
			var result = new Array(_rest.length);
			var _g2 = 0;
			var _g3 = _rest.length;
			while(_g2 < _g3) {
				var i = _g2++;
				result[i] = f(_rest[i]);
			}
			tmp = jali_pack_TermSum.TOf(jali_pack_HeadSum.Rest,result);
		}
		break;
	case 1:
		var _rest = _g;
		var _data = _g1.data;
		var tmp1 = jali_pack_HeadSum.Data(_data);
		var fn2 = fn;
		var f = function(self) {
			return jali_pack_TermLift.mod(self,fn2);
		};
		var result = new Array(_rest.length);
		var _g2 = 0;
		var _g3 = _rest.length;
		while(_g2 < _g3) {
			var i = _g2++;
			result[i] = f(_rest[i]);
		}
		tmp = jali_pack_TermSum.TOf(tmp1,result);
		break;
	case 2:
		var _rest = _g;
		var _code = _g1.code;
		var tmp1 = jali_pack_HeadSum.Code(_code);
		var fn3 = fn;
		var f = function(self) {
			return jali_pack_TermLift.mod(self,fn3);
		};
		var result = new Array(_rest.length);
		var _g = 0;
		var _g1 = _rest.length;
		while(_g < _g1) {
			var i = _g++;
			result[i] = f(_rest[i]);
		}
		tmp = jali_pack_TermSum.TOf(tmp1,result);
		break;
	}
	return fn(tmp);
};
jali_pack_TermLift.walk = function(self,fn) {
	fn(self);
	var _g = self.head;
	var _rest = self.rest;
	var _g_current = 0;
	var _g_array = _rest;
	while(_g_current < _g_array.length) {
		var term = _g_array[_g_current++];
		jali_pack_TermLift.walk(term,fn);
	}
};
jali_pack_TermLift.reduce = function(self,plus,pure,unit,code) {
	var plus1 = plus;
	var pure1 = pure;
	var unit1 = unit;
	var code1 = code;
	var f = function(self) {
		return jali_pack_TermLift.reduce(self,plus1,pure1,unit1,code1);
	};
	var fun = function(rest) {
		var result = new Array(rest.length);
		var _g = 0;
		var _g1 = rest.length;
		while(_g < _g1) {
			var i = _g++;
			result[i] = f(rest[i]);
		}
		return stx_core_pack_OptionLift.def(stx_core_pack_ArrayLift.lfold1(result,plus),unit);
	};
	if(self == null) {
		return unit();
	} else {
		var _g = self.rest;
		var _g1 = self.head;
		switch(_g1._hx_index) {
		case 0:
			if(_g == null) {
				return unit();
			} else {
				var _rest = _g;
				return fun(_rest);
			}
			break;
		case 1:
			var _rest = _g;
			var _data = _g1.data;
			var result = new Array(_data.length);
			var _g2 = 0;
			var _g3 = _data.length;
			while(_g2 < _g3) {
				var i = _g2++;
				result[i] = pure(_data[i]);
			}
			var tmp = stx_core_pack_OptionLift.def(stx_core_pack_ArrayLift.lfold1(result,plus),unit);
			var tmp1 = fun(_rest);
			return plus(tmp,tmp1);
		case 2:
			var _rest = _g;
			var _code = _g1.code;
			var tmp = code(_code);
			var tmp1 = fun(_rest);
			return plus(tmp,tmp1);
		}
	}
};
jali_pack_TermLift.toStringCompact = function(self) {
	var rec = null;
	rec = function(v,n) {
		if(n == null) {
			n = 0;
		}
		var t = "";
		var _g = 0;
		var _g1 = n;
		while(_g < _g1) {
			var i = _g++;
			t += " ";
		}
		if(v == null) {
			return "";
		} else {
			var _g = v.rest;
			var _g1 = v.head;
			switch(_g1._hx_index) {
			case 0:
				if(_g == null) {
					return "";
				} else {
					var rest = _g;
					var rec1 = "" + t;
					var n1 = ++n;
					var f = function(v) {
						return rec(v,n1);
					};
					var result = new Array(rest.length);
					var _g2 = 0;
					var _g3 = rest.length;
					while(_g2 < _g3) {
						var i = _g2++;
						result[i] = f(rest[i]);
					}
					return rec1 + result.join("" + t);
				}
				break;
			case 1:
				var rest = _g;
				var data = _g1.data;
				var f = Std.string;
				var result = new Array(data.length);
				var _g2 = 0;
				var _g3 = data.length;
				while(_g2 < _g3) {
					var i = _g2++;
					result[i] = f(data[i]);
				}
				var head = result.join(" ");
				var rec1 = "" + head + t;
				var n2 = ++n;
				var f = function(v) {
					return rec(v,n2);
				};
				var result = new Array(rest.length);
				var _g2 = 0;
				var _g3 = rest.length;
				while(_g2 < _g3) {
					var i = _g2++;
					result[i] = f(rest[i]);
				}
				return rec1 + result.join("" + t);
			case 2:
				var rest = _g;
				var code = _g1.code;
				var rec1 = "" + code + t;
				var n3 = ++n;
				var f = function(v) {
					return rec(v,n3);
				};
				var result = new Array(rest.length);
				var _g = 0;
				var _g1 = rest.length;
				while(_g < _g1) {
					var i = _g++;
					result[i] = f(rest[i]);
				}
				return rec1 + result.join("" + t);
			}
		}
	};
	return rec(self);
};
jali_pack_TermLift.toString = function(self) {
	var rec = null;
	rec = function(v,n) {
		if(n == null) {
			n = 1;
		}
		var t = "";
		var _g = 0;
		var _g1 = n;
		while(_g < _g1) {
			var i = _g++;
			t += "  ";
		}
		var n1 = ++n;
		var f = function(v) {
			return rec(v,n1);
		};
		var lvl = function(arr) {
			return "\n" + t + arr.join("\n" + t);
		};
		var f0 = function(arr) {
			var f0 = arr.map(f);
			return lvl(f0);
		};
		var _g = v.rest;
		var _g1 = v.head;
		switch(_g1._hx_index) {
		case 0:
			if(_g == null) {
				return "";
			} else {
				var tail = _g;
				if(!jali_pack_Tail.is_defined(tail)) {
					return "";
				} else {
					var rest = _g;
					return "" + t + f0(jali_pack_Tail.toStdArray(rest));
				}
			}
			break;
		case 1:
			var _g2 = _g1.data;
			var tail = _g;
			var data = _g2;
			if(!jali_pack_Tail.is_defined(tail)) {
				var f1 = Std.string;
				var result = new Array(data.length);
				var _g3 = 0;
				var _g4 = data.length;
				while(_g3 < _g4) {
					var i = _g3++;
					result[i] = f1(data[i]);
				}
				var head = result.join(" ");
				return "" + head;
			} else {
				var rest = _g;
				var data = _g2;
				var f1 = Std.string;
				var result = new Array(data.length);
				var _g2 = 0;
				var _g3 = data.length;
				while(_g2 < _g3) {
					var i = _g2++;
					result[i] = f1(data[i]);
				}
				var head = result.join(" ");
				return "" + head + " " + f0(jali_pack_Tail.toStdArray(rest));
			}
			break;
		case 2:
			var rest = _g;
			var code = _g1.code;
			return "" + code + " " + f0(jali_pack_Tail.toStdArray(rest));
		}
	};
	return "\n" + rec(self);
};
jali_pack_TermLift.toCouple = function(self) {
	var rest = self.rest;
	var head = self.head;
	return stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,head,rest);
};
var jali_pack_Term = {};
jali_pack_Term._new = function(self) {
	var this1 = self;
	return this1;
};
jali_pack_Term.make = function() {
	return jali_pack_TermSum.TOf;
};
jali_pack_Term.unit = function() {
	return jali_pack_TermSum.TOf(jali_pack_HeadSum.Rest,[]);
};
jali_pack_Term.lift = function(self) {
	return jali_pack_Term._new(self);
};
jali_pack_Term.parse = function(string) {
	return new stx_parse_Jali().parse(stx_parse_pack_Input.pure(stx_parse_pack_Enumerable.string(string)));
};
jali_pack_Term.fromTArray = function(arr) {
	return jali_pack_TermSum.TOf(jali_pack_HeadSum.Data(arr),[]);
};
jali_pack_Term.fromTermArray = function(arr) {
	return jali_pack_TermSum.TOf(jali_pack_HeadSum.Rest,arr);
};
jali_pack_Term.fromArray = function(arr) {
	switch(arr.length) {
	case 0:
		return jali_pack_TermSum.TOf(jali_pack_HeadSum.Rest,[]);
	case 1:
		var sub = arr[0];
		if(sub.length == 0) {
			return jali_pack_TermSum.TOf(jali_pack_HeadSum.Data([]),[]);
		} else {
			return jali_pack_Term.fromArray(sub);
		}
		break;
	default:
		var sub = stx_core_pack_ArrayLift.prj(arr).pop();
		if(sub.length == 0) {
			return jali_pack_TermSum.TOf(jali_pack_HeadSum.Data(arr),[]);
		} else {
			return jali_pack_TermSum.TOf(jali_pack_HeadSum.Data(arr),[jali_pack_Term.fromArray(sub)]);
		}
	}
};
jali_pack_Term.fromJsonSum = function(val) {
	switch(val._hx_index) {
	case 0:
		var record = val.record;
		var tmp = jali_LiftJali.make(jali_pack_TermSum.TOf);
		var f = stx_core_use_UseNano.decouple(stx_core_pack_Wildcard.__,function(l,r) {
			return jali_pack_TermSum.TOf(jali_pack_HeadSum.Code(l),[jali_pack_Term.fromJsonSum(r)]);
		});
		var result = new Array(record.length);
		var _g = 0;
		var _g1 = record.length;
		while(_g < _g1) {
			var i = _g++;
			result[i] = f(record[i]);
		}
		return jali_pack_Constructor.rest(tmp,jali_pack_Tail.fromArrayT(result));
	case 1:
		var array = val.array;
		var tmp = jali_LiftJali.make(jali_pack_TermSum.TOf);
		var result = new Array(array.length);
		var _g = 0;
		var _g1 = array.length;
		while(_g < _g1) {
			var i = _g++;
			result[i] = jali_pack_Term.fromJsonSum(array[i]);
		}
		return jali_pack_Constructor.rest(tmp,result);
	case 2:
		var x = val.x;
		return jali_pack_Constructor.datum(jali_LiftJali.make(jali_pack_TermSum.TOf),x,jali_pack_Tail.fromWildcard(stx_core_pack_Wildcard.__));
	}
};
jali_pack_Term.fromMap = function(map) {
	var parts = [];
	var _g = haxe_ds_StringMap.kvIterator(map.h);
	while(_g.hasNext()) {
		var _g1 = _g.next();
		var key = _g1.key;
		var val = _g1.value;
		stx_core_pack_ArrayLift.prj(parts).push(jali_pack_Constructor.code_data(jali_LiftJali.make(jali_pack_TermSum.TOf),key,[val]));
	}
	return jali_pack_TermSum.TOf(jali_pack_HeadSum.Rest,parts);
};
jali_pack_Term.access = function(this1,str) {
	return function(that) {
		return jali_pack_TermSum.TOf(jali_pack_HeadSum.Data([str]),jali_pack_Tail.fromArrayT([this1,that]));
	};
};
jali_pack_Term.resolve = function(this1,str) {
	return function(that) {
		return jali_pack_TermSum.TOf(jali_pack_HeadSum.Code(str),jali_pack_Tail.fromArrayT([this1,that]));
	};
};
jali_pack_Term.cat = function(this1) {
	return jali_pack_Term._.toCouple(jali_pack_Term.get_self(this1));
};
jali_pack_Term.prj = function(this1) {
	return this1;
};
jali_pack_Term.get_self = function(this1) {
	return jali_pack_Term.lift(this1);
};
var js_Boot = function() { };
js_Boot.__name__ = "js.Boot";
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var n = e.__constructs__[o._hx_index];
			var con = e[n];
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g = 0;
		var _g1 = intf.length;
		while(_g < _g1) {
			var i = _g++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		return ((o) instanceof Array);
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return o != null;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return ((o | 0) === o);
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(js_Boot.__downcastCheck(o,cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(((o) instanceof cl)) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ != null ? $hxEnums[o.__enum__] == cl : false;
	}
};
js_Boot.__downcastCheck = function(o,cl) {
	if(!((o) instanceof cl)) {
		if(cl.__isInterface__) {
			return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
		} else {
			return false;
		}
	} else {
		return true;
	}
};
js_Boot.__implements = function(o,iface) {
	return js_Boot.__interfLoop(js_Boot.getClass(o),iface);
};
js_Boot.__cast = function(o,t) {
	if(o == null || js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw haxe_Exception.thrown("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_node_Fs = require("fs");
var js_node_KeyValue = {};
js_node_KeyValue.get_key = function(this1) {
	return this1[0];
};
js_node_KeyValue.get_value = function(this1) {
	return this1[1];
};
var js_node_Path = require("path");
var js_node_buffer_Buffer = require("buffer").Buffer;
var js_node_stream_WritableNewOptionsAdapter = {};
js_node_stream_WritableNewOptionsAdapter.from = function(options) {
	if(!Object.prototype.hasOwnProperty.call(options,"final")) {
		Object.defineProperty(options,"final",{ get : function() {
			return options.final_;
		}});
	}
	return options;
};
var js_node_url_URLSearchParamsEntry = {};
js_node_url_URLSearchParamsEntry._new = function(name,value) {
	var this1 = [name,value];
	return this1;
};
js_node_url_URLSearchParamsEntry.get_name = function(this1) {
	return this1[0];
};
js_node_url_URLSearchParamsEntry.get_value = function(this1) {
	return this1[1];
};
var stx_LiftArrowletToCascade = function() { };
stx_LiftArrowletToCascade.__name__ = "stx.LiftArrowletToCascade";
stx_LiftArrowletToCascade.toCascade = function(arw) {
	return stx_arrowlet_pack_Cascade.fromArrowlet(arw);
};
var stx_LiftResolveToCascade = function() { };
stx_LiftResolveToCascade.__name__ = "stx.LiftResolveToCascade";
stx_LiftResolveToCascade.toCascade = function(arw) {
	return stx_arrowlet_pack_Resolve.toCascade(stx_arrowlet_pack_Resolve.lift(arw));
};
var stx_LiftAttemptToCascade = function() { };
stx_LiftAttemptToCascade.__name__ = "stx.LiftAttemptToCascade";
var stx_LiftRecoverToCascade = function() { };
stx_LiftRecoverToCascade.__name__ = "stx.LiftRecoverToCascade";
var stx_LiftExecuteToCascade = function() { };
stx_LiftExecuteToCascade.__name__ = "stx.LiftExecuteToCascade";
var stx_LiftAttemptFunctionToAttempt = function() { };
stx_LiftAttemptFunctionToAttempt.__name__ = "stx.LiftAttemptFunctionToAttempt";
var stx_Assert = function() { };
stx_Assert.__name__ = "stx.Assert";
var stx_LiftAssert = function() { };
stx_LiftAssert.__name__ = "stx.LiftAssert";
stx_LiftAssert.that = function(stx,pos) {
	return new stx_assert_Module(pos);
};
stx_LiftAssert.assert = function(__,pos) {
	return new stx_assert_module_That(pos);
};
stx_LiftAssert.report = function(b,err) {
	if(b) {
		return stx_core_pack_Report.unit();
	} else {
		return stx_core_pack_Report.pure(err);
	}
};
var stx_LiftErr = function() { };
stx_LiftErr.__name__ = "stx.LiftErr";
var stx_Package = function() { };
stx_Package.__name__ = "stx.Package";
var stx_RedBlackSum = $hxEnums["stx.RedBlackSum"] = { __ename__ : "stx.RedBlackSum", __constructs__ : ["Red","Black"]
	,Red: {_hx_index:0,__enum__:"stx.RedBlackSum",toString:$estr}
	,Black: {_hx_index:1,__enum__:"stx.RedBlackSum",toString:$estr}
};
var stx_LiftLinkedList = function() { };
stx_LiftLinkedList.__name__ = "stx.LiftLinkedList";
stx_LiftLinkedList.ds = function(ls) {
	return ls;
};
var stx_LiftStringMap = function() { };
stx_LiftStringMap.__name__ = "stx.LiftStringMap";
stx_LiftStringMap.ds = function(m) {
	var nm = stx_ds_RedBlackMap.make(stx_assert_pack_Comparable.string());
	var _g = haxe_ds_StringMap.kvIterator(m.h);
	while(_g.hasNext()) {
		var _g1 = _g.next();
		var key = _g1.key;
		var val = _g1.value;
		nm = stx_ds_RedBlackMap.set(nm,key,val);
	}
	return nm;
};
var stx_Fn = function() { };
stx_Fn.__name__ = "stx.Fn";
var stx_LiftSomethingNMotSureYet = function() { };
stx_LiftSomethingNMotSureYet.__name__ = "stx.LiftSomethingNMotSureYet";
stx_LiftSomethingNMotSureYet.uncurry = function(f) {
	return function(p1,p2) {
		return (f(p1))(p2);
	};
};
var stx_LiftUncurryTernary = function() { };
stx_LiftUncurryTernary.__name__ = "stx.LiftUncurryTernary";
stx_LiftUncurryTernary.uncurry = function(f) {
	return function(p1,p2,p3) {
		return ((f(p1))(p2))(p3);
	};
};
var stx_LiftSomethingElse = function() { };
stx_LiftSomethingElse.__name__ = "stx.LiftSomethingElse";
stx_LiftSomethingElse.pair = function(fn1,fn2) {
	return function(t) {
		var tmp = stx_core_pack_CoupleLift.fst(t);
		var tmp1 = fn1(tmp);
		var tmp = stx_core_pack_CoupleLift.snd(t);
		return stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,tmp1,fn2(tmp));
	};
};
var stx_LiftFn = function() { };
stx_LiftFn.__name__ = "stx.LiftFn";
stx_LiftFn.pinch = function(fn0) {
	return function(x) {
		var tmp = stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,x,x);
		return fn0(tmp);
	};
};
stx_LiftFn.repeat = function(fn) {
	return function(v) {
		var i = null;
		var o = null;
		_hx_loop1: while(true) {
			var _g = fn(i);
			switch(_g._hx_index) {
			case 0:
				var v = _g.v;
				i = v;
				break;
			case 1:
				var v1 = _g.v;
				o = v1;
				break _hx_loop1;
			}
		}
		return o;
	};
};
var stx_LiftUnary = function() { };
stx_LiftUnary.__name__ = "stx.LiftUnary";
stx_LiftUnary.fn = function(f) {
	return f;
};
var stx_LiftSink = function() { };
stx_LiftSink.__name__ = "stx.LiftSink";
var stx_LiftBlock = function() { };
stx_LiftBlock.__name__ = "stx.LiftBlock";
stx_LiftBlock.fn = function(f) {
	return f;
};
var stx_LiftThunk = function() { };
stx_LiftThunk.__name__ = "stx.LiftThunk";
stx_LiftThunk.fn = function(fn) {
	return fn;
};
var stx_LiftBinary = function() { };
stx_LiftBinary.__name__ = "stx.LiftBinary";
stx_LiftBinary.fn = function(fn) {
	return stx_fn_Binary._new(fn);
};
stx_LiftBinary.bind1 = function(fn,p) {
	var _g = fn;
	var a1 = p;
	return function(a2) {
		return _g(a1,a2);
	};
};
var stx_LiftPerhapsConstructor = function() { };
stx_LiftPerhapsConstructor.__name__ = "stx.LiftPerhapsConstructor";
stx_LiftPerhapsConstructor.perhaps = function(fn) {
	return function(x) {
		switch(x._hx_index) {
		case 0:
			var v = x.v;
			return fn(v);
		case 1:
			return haxe_ds_Option.None;
		}
	};
};
var stx_LiftPerhaps = function() { };
stx_LiftPerhaps.__name__ = "stx.LiftPerhaps";
stx_LiftPerhaps.perhaps = function(fn) {
	return function(x) {
		switch(x._hx_index) {
		case 0:
			var v = x.v;
			return haxe_ds_Option.Some(fn(v));
		case 1:
			return haxe_ds_Option.None;
		}
	};
};
var stx_LiftTernary = function() { };
stx_LiftTernary.__name__ = "stx.LiftTernary";
stx_LiftTernary.fn = function(fn) {
	return fn;
};
var stx_LiftIf = function() { };
stx_LiftIf.__name__ = "stx.LiftIf";
stx_LiftIf.if_else = function(b,yes,no) {
	if(b) {
		return yes();
	} else {
		return no();
	}
};
var stx_Fp = function() { };
stx_Fp.__name__ = "stx.Fp";
stx_Fp.handle = function(opt) {
};
var stx_LiftFp = function() { };
stx_LiftFp.__name__ = "stx.LiftFp";
stx_LiftFp.asState = function(fn) {
	return stx_fp_pack_State._new(fn);
};
var stx_Io = function() { };
stx_Io.__name__ = "stx.Io";
var stx_LiftLog = function() { };
stx_LiftLog.__name__ = "stx.LiftLog";
stx_LiftLog.log = function(wildcard) {
	return stx_log_pack_Log.instance;
};
stx_LiftLog.scope = function(stx,pos,method) {
	return stx_log_pack_LogPosition.scoping(stx_log_pack_LogPosition.fromPos(pos),method);
};
var stx_parse_pack_ParserLift = function() { };
stx_parse_pack_ParserLift.__name__ = "stx.parse.pack.ParserLift";
stx_parse_pack_ParserLift.or = function(p1,p2) {
	return stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Or(p1,p2,{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 82, className : "stx.parse.pack.ParserLift", methodName : "or"}));
};
stx_parse_pack_ParserLift.ors = function(ps) {
	return stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Ors(ps,{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 85, className : "stx.parse.pack.ParserLift", methodName : "ors"}));
};
stx_parse_pack_ParserLift.then = function(p,f) {
	return stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Then(p,f,{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 88, className : "stx.parse.pack.ParserLift", methodName : "then"}));
};
stx_parse_pack_ParserLift.and_then = function(p,fn) {
	return stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_AndThen(p,fn,{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 91, className : "stx.parse.pack.ParserLift", methodName : "and_then"}));
};
stx_parse_pack_ParserLift.many = function(p1) {
	return stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Many(p1,{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 94, className : "stx.parse.pack.ParserLift", methodName : "many"}));
};
stx_parse_pack_ParserLift.one_many = function(p1) {
	return stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_OneMany(p1,{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 97, className : "stx.parse.pack.ParserLift", methodName : "one_many"}));
};
stx_parse_pack_ParserLift.and_ = function(p1,p2) {
	return stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_With(p1,p2,function(a,_) {
		return a;
	},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 100, className : "stx.parse.pack.ParserLift", methodName : "and_"}));
};
stx_parse_pack_ParserLift.and = function(p1,p2) {
	return stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_With(p1,p2,function(l,r) {
		return stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,l,r);
	},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 103, className : "stx.parse.pack.ParserLift", methodName : "and"}));
};
stx_parse_pack_ParserLift.and_seq = function(p1,p2) {
	return stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_With(p1,p2,function(l,r) {
		return [l,r];
	},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 106, className : "stx.parse.pack.ParserLift", methodName : "and_seq"}));
};
stx_parse_pack_ParserLift.__and = function(p1,p2) {
	return stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_With(p1,p2,function(_,b) {
		return b;
	},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 113, className : "stx.parse.pack.ParserLift", methodName : "and_with"}));
};
stx_parse_pack_ParserLift.and_with = function(p1,p2,f) {
	return stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_With(p1,p2,f,{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 113, className : "stx.parse.pack.ParserLift", methodName : "and_with"}));
};
stx_parse_pack_ParserLift.commit = function(p1) {
	return stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Commit(p1,{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 116, className : "stx.parse.pack.ParserLift", methodName : "commit"}));
};
stx_parse_pack_ParserLift.notEmpty = function(arr) {
	return arr.length > 0;
};
stx_parse_pack_ParserLift.trace = function(p,f) {
	return stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Then(p,function(x) {
		haxe_Log.trace(f(x),{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 122, className : "stx.parse.pack.ParserLift", methodName : "trace"});
		return x;
	},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 88, className : "stx.parse.pack.ParserLift", methodName : "then"}));
};
stx_parse_pack_ParserLift.xs = function(p,f) {
	return stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Anon(function(i) {
		var out = p.parse(i);
		var tmp = stx_parse_pack_ParseResult.get_rest(out);
		f(tmp);
		return out;
	},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 128, className : "stx.parse.pack.ParserLift", methodName : "xs"}));
};
stx_parse_pack_ParserLift.identifier = function(x) {
	return stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Identifier(x,{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 135, className : "stx.parse.pack.ParserLift", methodName : "identifier"}));
};
stx_parse_pack_ParserLift.regexParser = function(str) {
	return stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Regex(str,{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 139, className : "stx.parse.pack.ParserLift", methodName : "regexParser"}));
};
stx_parse_pack_ParserLift.rep1sep = function(p1,sep) {
	return stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Rep1Sep(p1,sep,{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 143, className : "stx.parse.pack.ParserLift", methodName : "rep1sep"}));
};
stx_parse_pack_ParserLift.rep1sep0 = function(p1,sep) {
	var next = stx_parse_pack_Parser.get_self(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Many(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_With(sep,p1,function(l,r) {
		return stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,l,r);
	},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 103, className : "stx.parse.pack.ParserLift", methodName : "and"})),{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 94, className : "stx.parse.pack.ParserLift", methodName : "many"})));
	return stx_parse_pack_Parser.get_self(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Then(stx_parse_pack_Parser.get_self(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_With(p1,next,function(l,r) {
		return stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,l,r);
	},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 103, className : "stx.parse.pack.ParserLift", methodName : "and"}))),function(t) {
		var fst = stx_core_pack_CoupleLift.fst(t);
		var snd = Lambda.array(Lambda.flatMap(stx_core_pack_CoupleLift.snd(t),function(tp) {
			return [stx_core_pack_CoupleLift.fst(tp),stx_core_pack_CoupleLift.snd(tp)];
		}));
		var out = [stx_core_pack_CoupleLift.fst(t)].concat(snd);
		return out;
	},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 88, className : "stx.parse.pack.ParserLift", methodName : "then"})));
};
stx_parse_pack_ParserLift.repsep0 = function(p1,sep) {
	var next = stx_parse_pack_Parser.get_self(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Many(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_With(sep,p1,function(l,r) {
		return stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,l,r);
	},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 103, className : "stx.parse.pack.ParserLift", methodName : "and"})),{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 94, className : "stx.parse.pack.ParserLift", methodName : "many"})));
	return stx_parse_pack_Parser.get_self(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Or(stx_parse_pack_Parser.get_self(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Then(stx_parse_pack_Parser.get_self(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_With(p1,next,function(l,r) {
		return stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,l,r);
	},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 103, className : "stx.parse.pack.ParserLift", methodName : "and"}))),function(t) {
		var fst = stx_core_pack_CoupleLift.fst(t);
		var snd = Lambda.array(Lambda.flatMap(stx_core_pack_CoupleLift.snd(t),function(tp) {
			return [stx_core_pack_CoupleLift.fst(tp),stx_core_pack_CoupleLift.snd(tp)];
		}));
		var out = [stx_core_pack_CoupleLift.fst(t)].concat(snd);
		return out;
	},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 88, className : "stx.parse.pack.ParserLift", methodName : "then"}))),stx_parse_pack_parser_term_Succeed.pure([]),{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 82, className : "stx.parse.pack.ParserLift", methodName : "or"})));
};
stx_parse_pack_ParserLift.repsep = function(p1,sep) {
	return stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_RepSep(p1,sep,{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 162, className : "stx.parse.pack.ParserLift", methodName : "repsep"}));
};
stx_parse_pack_ParserLift.with_error_tag = function(p,name) {
	return stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_ErrorTransformer(p,function(err) {
		return err.map(function(info) {
			return stx_parse_pack_ParseErrorInfo.tag(info,name);
		});
	},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 165, className : "stx.parse.pack.ParserLift", methodName : "with_error_tag"}));
};
stx_parse_pack_ParserLift.filter = function(p,fn) {
	return stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_AndThen(p,function(o) {
		if(fn(o)) {
			return stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Succeed(o,{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 175, className : "stx.parse.pack.ParserLift", methodName : "filter"}));
		} else {
			return stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Failed("filter failed",false,{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 175, className : "stx.parse.pack.ParserLift", methodName : "filter"}));
		}
	},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 172, className : "stx.parse.pack.ParserLift", methodName : "filter"}));
};
stx_parse_pack_ParserLift.option = function(p) {
	return stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_OptionP(p,{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 180, className : "stx.parse.pack.ParserLift", methodName : "option"}));
};
stx_parse_pack_ParserLift.eof = function(input) {
	if(stx_parse_pack_Input.is_end(input)) {
		return stx_parse_pack_ParseSuccess.toParseResult(stx_parse_pack_ParseSuccess.make(input,null));
	} else {
		return stx_parse_pack_ParseFailure.toParseResult(stx_parse_pack_ParseFailure.at_with(input,"not at end",false,{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 183, className : "stx.parse.pack.ParserLift", methodName : "eof"}));
	}
};
stx_parse_pack_ParserLift.succeed = function(v) {
	return stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Succeed(v,{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 186, className : "stx.parse.pack.ParserLift", methodName : "succeed"}));
};
stx_parse_pack_ParserLift.inspect = function(parser,pre,post) {
	return stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Inspect(parser,pre,post,{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 189, className : "stx.parse.pack.ParserLift", methodName : "inspect"}));
};
var stx_parse_pack_Parser = {};
stx_parse_pack_Parser._new = function(self) {
	var this1 = self;
	return this1;
};
stx_parse_pack_Parser.fromConstructor = function(fn) {
	return stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_LAnon(fn));
};
stx_parse_pack_Parser.fromParserApi = function(it) {
	return stx_parse_pack_Parser._new(it);
};
stx_parse_pack_Parser.fromFunction = function(f) {
	return stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Anon(f,{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 51, className : "stx.parse.pack._Parser.Parser_Impl_", methodName : "fromFunction"}));
};
stx_parse_pack_Parser.lift = function(it) {
	return stx_parse_pack_Parser._new(it);
};
stx_parse_pack_Parser.mkHead = function(this1) {
	return { headParser : stx_parse_pack_Parser.get_self(this1), involvedSet : stx_ds_LinkedList.unit(), evalSet : stx_ds_LinkedList.unit()};
};
stx_parse_pack_Parser.elide = function(this1) {
	return stx_parse_pack_Parser.get_self(this1);
};
stx_parse_pack_Parser.Anon = function(fn) {
	return stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Anon(fn,{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 64, className : "stx.parse.pack._Parser.Parser_Impl_", methodName : "Anon"}));
};
stx_parse_pack_Parser.Failed = function(msg,is_error,id) {
	if(is_error == null) {
		is_error = false;
	}
	return stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Failed(msg,is_error,id));
};
stx_parse_pack_Parser.Succeed = function(value,id) {
	return stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Succeed(value,id));
};
stx_parse_pack_Parser.get_self = function(this1) {
	return stx_parse_pack_Parser._new(this1);
};
stx_parse_pack_Parser.asParser = function(this1) {
	return stx_parse_pack_Parser.get_self(this1);
};
var stx_core_pack_Clazz = $hx_exports["stx"]["Clazz"] = function() {
};
stx_core_pack_Clazz.__name__ = "stx.core.pack.Clazz";
stx_core_pack_Clazz.prototype = {
	definition: function() {
		return js_Boot.getClass(this);
	}
	,identifier: function() {
		var c = js_Boot.getClass(this);
		return c.__name__;
	}
	,__class__: stx_core_pack_Clazz
};
var stx_parse_pack_ParserApi = function() { };
stx_parse_pack_ParserApi.__name__ = "stx.parse.pack.ParserApi";
stx_parse_pack_ParserApi.__isInterface__ = true;
stx_parse_pack_ParserApi.prototype = {
	tag: null
	,id: null
	,uid: null
	,parse: null
	,name: null
	,__class__: stx_parse_pack_ParserApi
};
var stx_parse_pack_parser_term_Base = function(delegation,id) {
	stx_core_pack_Clazz.call(this);
	this.delegation = delegation;
	this.id = id;
	var c = js_Boot.getClass(this);
	this.tag = haxe_ds_Option.Some(c.__name__);
};
stx_parse_pack_parser_term_Base.__name__ = "stx.parse.pack.parser.term.Base";
stx_parse_pack_parser_term_Base.__interfaces__ = [stx_parse_pack_ParserApi];
stx_parse_pack_parser_term_Base.__super__ = stx_core_pack_Clazz;
stx_parse_pack_parser_term_Base.prototype = $extend(stx_core_pack_Clazz.prototype,{
	id: null
	,uid: null
	,tag: null
	,delegation: null
	,check: function() {
	}
	,parse: function(ipt) {
		var _g = this.tag;
		if(_g != null) {
			if(_g._hx_index == 0) {
				var v = _g.v;
				ipt.tag = v;
			}
		}
		this.check();
		return this.do_parse(ipt);
	}
	,do_parse: function(ipt) {
		return stx_parse_pack_ParseFailure.toParseResult(stx_parse_pack_ParseFailure.at_with(ipt,"default implementation",true,{ fileName : "stx/parse/pack/parser/term/Base.hx", lineNumber : 37, className : "stx.parse.pack.parser.term.Base", methodName : "do_parse"}));
	}
	,asParser: function() {
		return stx_parse_pack_Parser._new(this);
	}
	,name: function() {
		var c = js_Boot.getClass(this);
		return c.__name__;
	}
	,__class__: stx_parse_pack_parser_term_Base
});
var stx_parse_pack_parser_term_Direct = function(id) {
	stx_parse_pack_parser_term_Base.call(this,tink_core_Noise.Noise,id);
};
stx_parse_pack_parser_term_Direct.__name__ = "stx.parse.pack.parser.term.Direct";
stx_parse_pack_parser_term_Direct.__super__ = stx_parse_pack_parser_term_Base;
stx_parse_pack_parser_term_Direct.prototype = $extend(stx_parse_pack_parser_term_Base.prototype,{
	__class__: stx_parse_pack_parser_term_Direct
});
var stx_parse_pack_parser_term_Anon = function(method,id) {
	stx_parse_pack_parser_term_Direct.call(this,id);
	this.method = method;
};
stx_parse_pack_parser_term_Anon.__name__ = "stx.parse.pack.parser.term.Anon";
stx_parse_pack_parser_term_Anon.__super__ = stx_parse_pack_parser_term_Direct;
stx_parse_pack_parser_term_Anon.prototype = $extend(stx_parse_pack_parser_term_Direct.prototype,{
	method: null
	,do_parse: function(ipt) {
		var _g = stx_assert_pack_PredicateLift.errata(new stx_assert_Module(this.id).exists(),function(e) {
			return e.map(function(_) {
				return stx_parse_pack_ParseSystemFailure.E_UndefinedParseDelegate(ipt);
			});
		}).applyI(this.method);
		if(_g._hx_index == 0) {
			var e = _g.v;
			throw haxe_Exception.thrown(e);
		}
		return this.method(ipt);
	}
	,__class__: stx_parse_pack_parser_term_Anon
});
var tink_core_Noise = $hxEnums["tink.core.Noise"] = { __ename__ : "tink.core.Noise", __constructs__ : ["Noise"]
	,Noise: {_hx_index:0,__enum__:"tink.core.Noise",toString:$estr}
};
var stx_parse_pack_Input = {};
stx_parse_pack_Input.pure = function(en) {
	return { content : en, memo : stx_parse_pack_Memo.unit()};
};
stx_parse_pack_Input.drop = function(this1,len) {
	return { content : this1.content.drop(len), memo : this1.memo};
};
stx_parse_pack_Input.take = function(this1,len) {
	return this1.content.take(len);
};
stx_parse_pack_Input.tail = function(this1) {
	return { content : this1.content.drop(1), memo : this1.memo};
};
stx_parse_pack_Input.matchedBy = function(this1,e) {
	return this1.content.match(e);
};
stx_parse_pack_Input.head = function(this1) {
	return this1.content.head();
};
stx_parse_pack_Input.position = function(this1,r) {
	return this1.content.index;
};
stx_parse_pack_Input.textAround = function(this1,before,after) {
	if(after == null) {
		after = 10;
	}
	if(before == null) {
		before = 10;
	}
	var offset = Math.max(0,this1.content.index - before) | 0;
	var text = this1.content.take(before + after);
	var indicPadding = Math.min(this1.content.index,before) | 0;
	var indicator = StringTools.lpad("^","_",indicPadding + 1);
	return { text : text, indicator : indicator};
};
stx_parse_pack_Input.setRecursionHead = function(this1,head) {
	this1.memo.recursionHeads.h[this1.content.index + ""] = head;
};
stx_parse_pack_Input.removeRecursionHead = function(this1) {
	var key = this1.content.index + "";
	var _this = this1.memo.recursionHeads;
	if(Object.prototype.hasOwnProperty.call(_this.h,key)) {
		delete(_this.h[key]);
	}
};
stx_parse_pack_Input.getRecursionHead = function(this1) {
	var res = this1.memo.recursionHeads.h[this1.content.index + ""];
	if(res == null) {
		return haxe_ds_Option.None;
	} else {
		return haxe_ds_Option.Some(res);
	}
};
stx_parse_pack_Input.getFromCache = function(this1,genKey) {
	var key = genKey(this1.content.index);
	var res = this1.memo.memoEntries.h[key];
	if(res == null) {
		return haxe_ds_Option.None;
	} else {
		return haxe_ds_Option.Some(res);
	}
};
stx_parse_pack_Input.updateCacheAndGet = function(this1,genKey,entry) {
	var key = genKey(this1.content.index);
	this1.memo.memoEntries.h[key] = entry;
	return entry;
};
stx_parse_pack_Input.toString = function(this1) {
	return "at " + this1.content.index + ":#(" + Std.string(this1.content.head()) + ")";
};
stx_parse_pack_Input.is_end = function(this1) {
	return this1.content.is_end();
};
stx_parse_pack_Input.get_offset = function(this1) {
	return this1.content.index;
};
stx_parse_pack_Input.get_content = function(this1) {
	return this1.content;
};
var stx_parse_pack_ParseSuccess = {};
stx_parse_pack_ParseSuccess._new = function(self) {
	var this1 = self;
	return this1;
};
stx_parse_pack_ParseSuccess.lift = function(self) {
	return stx_parse_pack_ParseSuccess._new(self);
};
stx_parse_pack_ParseSuccess.make = function(rest,match) {
	return stx_parse_pack_ParseSuccess.lift(stx_parse_pack_RestWith.make(rest,match));
};
stx_parse_pack_ParseSuccess.map = function(this1,fn) {
	return stx_parse_pack_ParseSuccess.make(this1.rest,fn(this1.with));
};
stx_parse_pack_ParseSuccess.then = function(this1,rest) {
	return stx_parse_pack_ParseSuccess.make(rest,this1.with);
};
stx_parse_pack_ParseSuccess.toParseResult = function(this1) {
	return stx_core_pack_OutcomeSum.Success(this1);
};
stx_parse_pack_ParseSuccess.prj = function(this1) {
	return this1;
};
stx_parse_pack_ParseSuccess.get_self = function(this1) {
	return stx_parse_pack_ParseSuccess.lift(this1);
};
var stx_core_pack_OutcomeSum = $hxEnums["stx.core.pack.OutcomeSum"] = { __ename__ : "stx.core.pack.OutcomeSum", __constructs__ : ["Success","Failure"]
	,Success: ($_=function(t) { return {_hx_index:0,t:t,__enum__:"stx.core.pack.OutcomeSum",toString:$estr}; },$_.__params__ = ["t"],$_)
	,Failure: ($_=function(e) { return {_hx_index:1,e:e,__enum__:"stx.core.pack.OutcomeSum",toString:$estr}; },$_.__params__ = ["e"],$_)
};
var stx_parse_pack_RestWith = {};
stx_parse_pack_RestWith._new = function(self) {
	var this1 = self;
	return this1;
};
stx_parse_pack_RestWith.lift = function(self) {
	return stx_parse_pack_RestWith._new(self);
};
stx_parse_pack_RestWith.make = function(rest,$with) {
	return stx_parse_pack_RestWith.lift({ rest : rest, 'with' : $with});
};
stx_parse_pack_RestWith.prj = function(this1) {
	return this1;
};
stx_parse_pack_RestWith.get_self = function(this1) {
	return stx_parse_pack_RestWith.lift(this1);
};
var stx_parse_pack_ParseFailure = {};
stx_parse_pack_ParseFailure._new = function(self) {
	var this1 = self;
	return this1;
};
stx_parse_pack_ParseFailure.lift = function(self) {
	var this1 = self;
	return this1;
};
stx_parse_pack_ParseFailure.make = function(rest,stack) {
	var this1 = { rest : rest, 'with' : stack};
	return this1;
};
stx_parse_pack_ParseFailure.at_with = function(input,msg,fatal,pos) {
	if(fatal == null) {
		fatal = false;
	}
	var this1 = { rest : input, 'with' : stx_parse_pack_ParseError.at_with(input,msg,fatal,pos)};
	return this1;
};
stx_parse_pack_ParseFailure.next = function(this1,err) {
	var this2 = { rest : this1.rest, 'with' : this1.with.next(err)};
	return this2;
};
stx_parse_pack_ParseFailure.is_fatal = function(this1) {
	return stx_core_pack_OptionLift.defv(stx_core_pack_OptionLift.map(this1.with.head(),function(_) {
		return _.fatal;
	}),false);
};
stx_parse_pack_ParseFailure.is_parse_fail = function(this1) {
	return stx_core_pack_OptionLift.defv(stx_core_pack_OptionLift.map(this1.with.head(),function(_) {
		return _.msg == stx_parse_pack_ParseError.FAIL;
	}),false);
};
stx_parse_pack_ParseFailure.mod = function(this1,fn) {
	var this2 = { rest : this1.rest, 'with' : fn(this1.with)};
	return this2;
};
stx_parse_pack_ParseFailure.toParseResult = function(this1) {
	return stx_core_pack_OutcomeSum.Failure(this1);
};
stx_parse_pack_ParseFailure.prj = function(this1) {
	return this1;
};
stx_parse_pack_ParseFailure.get_self = function(this1) {
	var this2 = this1;
	return this2;
};
var stx_parse_pack_ParseError = {};
stx_parse_pack_ParseError.at_with = function(input,msg,fatal,pos) {
	if(fatal == null) {
		fatal = false;
	}
	return new stx_core_pack_Err(haxe_ds_Option.Some(stx_core_pack_Failure.ERR_OF(stx_parse_pack_ParseErrorInfo.make(stx_parse_pack_Input.get_offset(input),msg,fatal))),null,pos);
};
stx_parse_pack_ParseError.is_fatal = function(this1) {
	return stx_core_pack_OptionLift.defv(stx_core_pack_OptionLift.map(this1.head(),function(_) {
		return _.fatal;
	}),false);
};
stx_parse_pack_ParseError.is_parse_fail = function(this1) {
	return stx_core_pack_OptionLift.defv(stx_core_pack_OptionLift.map(this1.head(),function(_) {
		return _.msg == stx_parse_pack_ParseError.FAIL;
	}),false);
};
stx_parse_pack_ParseError.toString = function(this1) {
	return Std.string(this1.data);
};
stx_parse_pack_ParseError.toParseResultWithInput = function(this1,ipt) {
	var this2 = { rest : ipt, 'with' : this1};
	return stx_parse_pack_ParseResult.failure(this2);
};
var stx_core_pack_Failure = $hxEnums["stx.core.pack.Failure"] = { __ename__ : "stx.core.pack.Failure", __constructs__ : ["ERR","ERR_OF"]
	,ERR: ($_=function(spec) { return {_hx_index:0,spec:spec,__enum__:"stx.core.pack.Failure",toString:$estr}; },$_.__params__ = ["spec"],$_)
	,ERR_OF: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"stx.core.pack.Failure",toString:$estr}; },$_.__params__ = ["v"],$_)
};
var stx_parse_pack_ParseErrorInfo = {};
stx_parse_pack_ParseErrorInfo._new = function(self) {
	var this1 = self;
	return this1;
};
stx_parse_pack_ParseErrorInfo.make = function(idx,msg,fatal) {
	return stx_parse_pack_ParseErrorInfo._new({ idx : idx, msg : msg, fatal : fatal});
};
stx_parse_pack_ParseErrorInfo.tag = function(this1,name) {
	return stx_parse_pack_ParseErrorInfo.make(this1.idx,name,this1.fatal);
};
var stx_core_pack_Err = function(data,prev,pos) {
	this.data = data;
	this.prev = prev;
	this.pos = pos;
};
stx_core_pack_Err.__name__ = "stx.core.pack.Err";
stx_core_pack_Err.prototype = {
	uuid: null
	,get_uuid: function() {
		return stx_core_pack_Err.UUID;
	}
	,prev: null
	,data: null
	,pos: null
	,map: function(fn) {
		var next_data = stx_core_pack_OptionLift.map(this.data,function(t) {
			switch(t._hx_index) {
			case 0:
				var spec = t.spec;
				return stx_core_pack_Failure.ERR(spec);
			case 1:
				var t1 = t.v;
				return stx_core_pack_Failure.ERR_OF(fn(t1));
			}
		});
		var next_prev;
		var _g = this.prev;
		if(_g == null) {
			next_prev = haxe_ds_Option.None;
		} else if(_g._hx_index == 0) {
			var err = _g.v;
			next_prev = haxe_ds_Option.Some(err.map(fn));
		} else {
			next_prev = haxe_ds_Option.None;
		}
		return new stx_core_pack_Err(next_data,next_prev,this.pos);
	}
	,copy: function(data,prev,pos) {
		return new stx_core_pack_Err(stx_core_pack_OptionLift.defv(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,data),this.data),stx_core_pack_OptionLift.defv(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,prev),this.prev),stx_core_pack_OptionLift.defv(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,pos),this.pos));
	}
	,last: function() {
		var self = this;
		while(self.prev != haxe_ds_Option.None) {
			var _g = self.prev;
			if(_g._hx_index == 0) {
				var last = _g.v;
				self = last;
			} else {
				break;
			}
		}
		return self;
	}
	,next: function(that) {
		var last = that.copy(null,null,{ fileName : "stx/core/pack/Err.hx", lineNumber : 57, className : "stx.core.pack.Err", methodName : "next"});
		var stack = [];
		while(stx_core_pack_OptionLift.is_defined(last.prev)) {
			stack.push(stx_core_use_UseOptionNano.fudge(last.prev));
			last = stx_core_use_UseOptionNano.fudge(last.prev);
		}
		var next = Lambda.fold(stack,function(next,memo) {
			return next.copy(null,stx_core_pack_Option.fromNullT(memo),{ fileName : "stx/core/pack/Err.hx", lineNumber : 64, className : "stx.core.pack.Err", methodName : "next"});
		},this);
		return next;
	}
	,head: function() {
		var _g = this.data;
		if(_g._hx_index == 0) {
			var _g1 = _g.v;
			if(_g1._hx_index == 1) {
				var v = _g1.v;
				return haxe_ds_Option.Some(v);
			} else {
				return haxe_ds_Option.None;
			}
		} else {
			return haxe_ds_Option.None;
		}
	}
	,fault: function() {
		return this.pos;
	}
	,__class__: stx_core_pack_Err
};
var stx_parse_pack_parser_term_Or = function(fst,snd,id) {
	stx_parse_pack_parser_term_Base.call(this,stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,fst,snd),id);
	var _g = snd.tag;
	var _g1 = fst.tag;
	var tmp;
	if(_g1._hx_index == 0) {
		if(_g._hx_index == 0) {
			var l = _g1.v;
			var r = _g.v;
			tmp = haxe_ds_Option.Some("" + l + " || " + r);
		} else {
			tmp = haxe_ds_Option.None;
		}
	} else {
		tmp = haxe_ds_Option.None;
	}
	this.tag = tmp;
};
stx_parse_pack_parser_term_Or.__name__ = "stx.parse.pack.parser.term.Or";
stx_parse_pack_parser_term_Or.__super__ = stx_parse_pack_parser_term_Base;
stx_parse_pack_parser_term_Or.prototype = $extend(stx_parse_pack_parser_term_Base.prototype,{
	check: function() {
		if(this.delegation == null) {
			throw haxe_Exception.thrown("undefined parse delegate");
		}
	}
	,do_parse: function(ipt) {
		var _gthis = this;
		return stx_parse_pack_ParseResult.fold(stx_core_pack_CoupleLift.fst(this.delegation).parse(ipt),stx_parse_pack_ParseResult.success,function(err) {
			if(stx_core_pack_OptionLift.defv(stx_core_pack_OptionLift.map(err.with.head(),function(_) {
				return _.fatal;
			}),false)) {
				return stx_parse_pack_ParseResult.failure(err);
			} else {
				return stx_core_pack_CoupleLift.snd(_gthis.delegation).parse(ipt);
			}
		});
	}
	,__class__: stx_parse_pack_parser_term_Or
});
var stx_LiftParse = function() { };
stx_LiftParse.__name__ = "stx.LiftParse";
stx_LiftParse.parse = function(wildcard) {
	return new stx_parse_Module();
};
stx_LiftParse.ok = function(rest,match) {
	return stx_parse_pack_ParseSuccess.toParseResult(stx_parse_pack_ParseSuccess.make(rest,match));
};
stx_LiftParse.fail = function(rest,message,fatal,pos) {
	if(fatal == null) {
		fatal = false;
	}
	return stx_parse_pack_ParseFailure.toParseResult(stx_parse_pack_ParseFailure.at_with(rest,message,fatal,pos));
};
stx_LiftParse.parsify = function(regex,ipt) {
	var data = ipt.content.data;
	if(data == null) {
		data = "";
	}
	data = HxOverrides.substr(data,stx_parse_pack_Input.get_offset(ipt),null);
	return regex.exec(data);
};
stx_LiftParse.identifier = function(str,pos) {
	return stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Identifier(str,pos));
};
stx_LiftParse.alts = function(arr) {
	return stx_core_pack_ArrayLift.lfold1(arr,function(next,memo) {
		return stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Or(memo,next,{ fileName : "stx/Parse.hx", lineNumber : 169, className : "stx.LiftParse", methodName : "alts"}));
	});
};
stx_LiftParse.regex = function(s) {
	return stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Regex(s,{ fileName : "stx/Parse.hx", lineNumber : 172, className : "stx.LiftParse", methodName : "regex"}));
};
stx_LiftParse.defer = function(f) {
	return stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_LAnon(f));
};
stx_LiftParse.lookahead = function(p) {
	return stx_parse_pack_Parser.get_self(stx_parse_pack_Parser.Anon(function(input) {
		var _g = p.parse(input);
		switch(_g._hx_index) {
		case 0:
			var success = _g.t;
			return stx_parse_pack_ParseResult.success(stx_parse_pack_ParseSuccess.make(input,null));
		case 1:
			var failure = _g.e;
			return stx_parse_pack_ParseResult.failure(failure);
		}
	}));
};
stx_LiftParse.token = function(p) {
	return stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Then(p,function(arr) {
		return stx_core_pack_OptionLift.defv(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,arr),[]).join("");
	},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 88, className : "stx.parse.pack.ParserLift", methodName : "then"}));
};
stx_LiftParse.not = function(p) {
	return stx_parse_pack_Parser.get_self(stx_parse_pack_Parser.Anon(function(input) {
		var _g = p.parse(input);
		switch(_g._hx_index) {
		case 0:
			var success = _g.t;
			return stx_parse_pack_ParseFailure.toParseResult(stx_parse_pack_ParseFailure.at_with(input,"Parser succeeded rather than failed",false,{ fileName : "stx/Parse.hx", lineNumber : 197, className : "stx.LiftParse", methodName : "not"}));
		case 1:
			var failure = _g.e;
			return stx_core_use_UseNano.if_else(stx_core_pack_OptionLift.defv(stx_core_pack_OptionLift.map(failure.with.head(),function(_) {
				return _.fatal;
			}),false),function() {
				return stx_parse_pack_ParseResult.failure(failure);
			},function() {
				return stx_parse_pack_ParseResult.success(stx_parse_pack_ParseSuccess.make(input,null));
			});
		}
	}));
};
stx_LiftParse.id = function(s) {
	return stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Identifier(s,{ fileName : "stx/Parse.hx", lineNumber : 209, className : "stx.LiftParse", methodName : "id"}));
};
stx_LiftParse.predicated = function(p) {
	return stx_parse_pack_Parser.get_self(stx_parse_pack_Parser.Anon(function(x) {
		var res = p(x.content.take(1));
		if(res && !stx_parse_pack_Input.is_end(x)) {
			return stx_parse_pack_ParseSuccess.toParseResult(stx_parse_pack_ParseSuccess.make({ content : x.content.drop(1), memo : x.memo},x.content.take(1)));
		} else {
			var fatal = false;
			if(fatal == null) {
				fatal = false;
			}
			return stx_parse_pack_ParseFailure.toParseResult(stx_parse_pack_ParseFailure.at_with(x,"predicate failed",fatal,{ fileName : "stx/Parse.hx", lineNumber : 223, className : "stx.LiftParse", methodName : "predicated"}));
		}
	}));
};
stx_LiftParse.inspector = function(__,pre,post,pos) {
	return function(prs) {
		return stx_parse_pack_ParserLift.inspect(prs,stx_core_pack_OptionLift.defv(stx_core_use_UseNano.option(__,pre),function(v) {
			if(v.tag != null) {
				(stx_LiftLog.log(__))("" + v.tag + " \"" + Std.string(v.content.head()) + "\"",pos);
			}
		}),stx_core_pack_OptionLift.defv(stx_core_use_UseNano.option(__,post),function(v) {
			(stx_LiftLog.log(__))(stx_parse_pack_ParseResult.toString(v),pos);
		}));
	};
};
stx_LiftParse.tagged = function(p,tag) {
	p.tag = haxe_ds_Option.Some(tag);
	var name = tag;
	return stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_ErrorTransformer(p,function(err) {
		return err.map(function(info) {
			return stx_parse_pack_ParseErrorInfo.tag(info,name);
		});
	},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 165, className : "stx.parse.pack.ParserLift", methodName : "with_error_tag"}));
};
var stx_parse_pack_parser_term_Identifier = function(stamp,id) {
	stx_parse_pack_parser_term_Direct.call(this,id);
	this.stamp = stamp;
	this.tag = haxe_ds_Option.Some("Id(" + stamp + ")");
};
stx_parse_pack_parser_term_Identifier.__name__ = "stx.parse.pack.parser.term.Identifier";
stx_parse_pack_parser_term_Identifier.__super__ = stx_parse_pack_parser_term_Direct;
stx_parse_pack_parser_term_Identifier.prototype = $extend(stx_parse_pack_parser_term_Direct.prototype,{
	stamp: null
	,do_parse: function(ipt) {
		var len = this.stamp.length;
		var head = ipt.content.head();
		var offset = stx_parse_pack_Input.get_offset(ipt);
		var string = ipt.content.take(len);
		if(string == this.stamp) {
			var next = { content : ipt.content.drop(this.stamp.length), memo : ipt.memo};
			return stx_parse_pack_ParseSuccess.toParseResult(stx_parse_pack_ParseSuccess.make(next,this.stamp));
		} else {
			var fatal = false;
			if(fatal == null) {
				fatal = false;
			}
			return stx_parse_pack_ParseFailure.toParseResult(stx_parse_pack_ParseFailure.at_with(ipt,"\"Identifier expected *** " + this.stamp + " *** instead found: *** " + string + " ***",fatal,this.id));
		}
	}
	,__class__: stx_parse_pack_parser_term_Identifier
});
var stx_parse_pack_parser_term_Regex = function(stamp,id) {
	stx_parse_pack_parser_term_Direct.call(this,id);
	this.stamp = stamp;
	this.tag = haxe_ds_Option.Some("Regex(" + stamp + ")");
};
stx_parse_pack_parser_term_Regex.__name__ = "stx.parse.pack.parser.term.Regex";
stx_parse_pack_parser_term_Regex.__super__ = stx_parse_pack_parser_term_Direct;
stx_parse_pack_parser_term_Regex.prototype = $extend(stx_parse_pack_parser_term_Direct.prototype,{
	stamp: null
	,do_parse: function(ipt) {
		var ereg = new hre_RegExp(this.stamp,"g");
		var is_matched = ipt.content.match($bind(ereg,ereg.test));
		if(is_matched) {
			var match = stx_LiftParse.parsify(new hre_RegExp(this.stamp,"g"),ipt);
			var length = match.groups[0].length;
			return stx_parse_pack_ParseSuccess.toParseResult(stx_parse_pack_ParseSuccess.make({ content : ipt.content.drop(length), memo : ipt.memo},ipt.content.take(length)));
		} else {
			var fatal = false;
			if(fatal == null) {
				fatal = false;
			}
			return stx_parse_pack_ParseFailure.toParseResult(stx_parse_pack_ParseFailure.at_with(ipt,"" + this.stamp + " not matched",fatal,this.id));
		}
	}
	,__class__: stx_parse_pack_parser_term_Regex
});
var stx_parse_pack_parser_term_Ors = function(delegation,id) {
	stx_parse_pack_parser_term_Base.call(this,delegation,id);
};
stx_parse_pack_parser_term_Ors.__name__ = "stx.parse.pack.parser.term.Ors";
stx_parse_pack_parser_term_Ors.__super__ = stx_parse_pack_parser_term_Base;
stx_parse_pack_parser_term_Ors.prototype = $extend(stx_parse_pack_parser_term_Base.prototype,{
	check: function() {
		var _g = 0;
		var _g1 = this.delegation;
		while(_g < _g1.length) {
			var delegate = _g1[_g];
			++_g;
			if(delegate == null) {
				throw haxe_Exception.thrown("undefined parse delegate in " + Std.string(delegate));
			}
		}
	}
	,do_parse: function(ipt) {
		var pIndex = 0;
		while(pIndex < this.delegation.length) {
			var p = this.delegation[pIndex];
			var tmp = p == null;
			var res = p.parse(ipt);
			switch(res._hx_index) {
			case 0:
				var _g = res.t;
				return res;
			case 1:
				if(stx_core_pack_OptionLift.defv(stx_core_pack_OptionLift.map(res.e.with.head(),function(_) {
					return _.fatal;
				}),false) != false) {
					return res;
				}
				break;
			}
			++pIndex;
		}
		var fatal = false;
		if(fatal == null) {
			fatal = false;
		}
		return stx_parse_pack_ParseFailure.toParseResult(stx_parse_pack_ParseFailure.at_with(ipt,"None Match",fatal,this.id));
	}
	,__class__: stx_parse_pack_parser_term_Ors
});
var stx_parse_pack_parser_term_Then = function(delegation,transform,id) {
	stx_parse_pack_parser_term_Base.call(this,delegation,id);
	var _g = new stx_assert_Module(id).exists().applyI(delegation);
	if(_g._hx_index == 0) {
		var e = _g.v;
		throw haxe_Exception.thrown(e);
	}
	this.transform = transform;
	this.tag = delegation.tag;
};
stx_parse_pack_parser_term_Then.__name__ = "stx.parse.pack.parser.term.Then";
stx_parse_pack_parser_term_Then.__super__ = stx_parse_pack_parser_term_Base;
stx_parse_pack_parser_term_Then.prototype = $extend(stx_parse_pack_parser_term_Base.prototype,{
	transform: null
	,check: function() {
		var _g = stx_assert_pack_PredicateLift.errata(new stx_assert_Module(this.id).exists(),function(e) {
			var this1 = e.fault();
			return new stx_core_pack_Err(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,stx_core_pack_Failure.ERR_OF(stx_parse_pack_ParseSystemFailure.E_UndefinedParseDelegate())),haxe_ds_Option.None,this1);
		}).applyI(this.delegation);
		if(_g._hx_index == 0) {
			var e = _g.v;
			throw haxe_Exception.thrown(e);
		}
	}
	,do_parse: function(input) {
		var _gthis = this;
		return stx_parse_pack_ParseResult.fold(this.delegation.parse(input),function(match) {
			return stx_core_pack_OutcomeSum.Success(stx_parse_pack_ParseSuccess.map(match,_gthis.transform));
		},function(err) {
			return stx_parse_pack_ParseFailure.toParseResult(err);
		});
	}
	,__class__: stx_parse_pack_parser_term_Then
});
var stx_assert_Module = function(pos) {
	stx_core_pack_Clazz.call(this);
	this.pos = pos;
};
stx_assert_Module.__name__ = "stx.assert.Module";
stx_assert_Module.__super__ = stx_core_pack_Clazz;
stx_assert_Module.prototype = $extend(stx_core_pack_Clazz.prototype,{
	pos: null
	,equals: function() {
		return stx_assert_pack_Assertion.equals(this.pos);
	}
	,alike: function() {
		return new stx_assert_pack_assertion_term_Alike(this.pos);
	}
	,gt: function() {
		return stx_assert_pack_Assertion.gt(this.pos);
	}
	,gt_eq: function() {
		return new stx_assert_pack_assertion_term_GreaterThanOrEquals(this.pos);
	}
	,lt: function() {
		return new stx_assert_pack_assertion_term_LessThan(this.pos);
	}
	,lt_eq: function() {
		return new stx_assert_pack_assertion_term_LessThanOrEquals(this.pos);
	}
	,always: function() {
		return stx_assert_pack_Predicate.always(this.pos);
	}
	,never: function() {
		return stx_assert_pack_Predicate.never(this.pos);
	}
	,is: function(clazz) {
		return new stx_assert_pack_predicate_term_Is(clazz,this.pos);
	}
	,throws: function() {
		return new stx_assert_pack_predicate_term_Throws(this.pos);
	}
	,'void': function() {
		return new stx_assert_pack_predicate_term_Void(this.pos);
	}
	,exists: function() {
		return new stx_assert_pack_predicate_term_Exists(this.pos);
	}
	,matches: function(reg,opt) {
		return new stx_assert_pack_predicate_term_Matches(this.pos,reg,opt,{ fileName : "stx/assert/pack/Predicate.hx", lineNumber : 31, className : "stx.assert.pack._Predicate.Predicate_Impl_", methodName : "matches"});
	}
	,__class__: stx_assert_Module
});
var stx_parse_pack_parser_term_Many = function(delegation,id) {
	var _gthis = this;
	var _g = stx_assert_pack_PredicateLift.errata(new stx_assert_Module(id).exists(),function(e) {
		var this1 = e.fault();
		return new stx_core_pack_Err(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,stx_core_pack_Failure.ERR_OF(stx_parse_pack_ParseSystemFailure.E_UndefinedParserInConstructor(_gthis))),haxe_ds_Option.None,this1);
	}).applyI(delegation);
	if(_g._hx_index == 0) {
		var e = _g.v;
		throw haxe_Exception.thrown(e);
	}
	stx_parse_pack_parser_term_Base.call(this,delegation,id);
	var _g = delegation.tag;
	var tmp;
	if(_g._hx_index == 0) {
		var v = _g.v;
		tmp = haxe_ds_Option.Some("(" + v + ")*");
	} else {
		tmp = haxe_ds_Option.None;
	}
	this.tag = tmp;
};
stx_parse_pack_parser_term_Many.__name__ = "stx.parse.pack.parser.term.Many";
stx_parse_pack_parser_term_Many.__super__ = stx_parse_pack_parser_term_Base;
stx_parse_pack_parser_term_Many.prototype = $extend(stx_parse_pack_parser_term_Base.prototype,{
	check: function() {
		var _g = stx_assert_pack_PredicateLift.errata(new stx_assert_Module(this.id).exists(),function(e) {
			var this1 = e.fault();
			return new stx_core_pack_Err(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,stx_core_pack_Failure.ERR_OF(stx_parse_pack_ParseSystemFailure.E_UndefinedParseDelegate())),haxe_ds_Option.None,this1);
		}).applyI(this.delegation);
		if(_g._hx_index == 0) {
			var e = _g.v;
			throw haxe_Exception.thrown(e);
		}
	}
	,do_parse: function(input) {
		var arr = [];
		var n_input = input;
		_hx_loop1: while(true) {
			var res = this.delegation.parse(n_input);
			switch(res._hx_index) {
			case 0:
				var m = res.t;
				arr.push(m.with);
				n_input = m.rest;
				break;
			case 1:
				var e = res.e;
				if(stx_core_pack_OptionLift.defv(stx_core_pack_OptionLift.map(e.with.head(),function(_) {
					return _.fatal;
				}),false) == true) {
					return stx_parse_pack_ParseFailure.toParseResult(e);
				} else {
					break _hx_loop1;
				}
				break;
			default:
				break _hx_loop1;
			}
		}
		return stx_parse_pack_ParseSuccess.toParseResult(stx_parse_pack_ParseSuccess.make(n_input,arr));
	}
	,__class__: stx_parse_pack_parser_term_Many
});
var stx_parse_pack_parser_term_OneMany = function(delegation,id) {
	stx_parse_pack_parser_term_Many.call(this,delegation,id);
};
stx_parse_pack_parser_term_OneMany.__name__ = "stx.parse.pack.parser.term.OneMany";
stx_parse_pack_parser_term_OneMany.__super__ = stx_parse_pack_parser_term_Many;
stx_parse_pack_parser_term_OneMany.prototype = $extend(stx_parse_pack_parser_term_Many.prototype,{
	do_parse: function(ipt) {
		var _gthis = this;
		stx_LiftAssert.assert(stx_core_pack_Wildcard.__,this.delegation.id).exists(this.delegation);
		return stx_parse_pack_ParseResult.fold(this.delegation.parse(ipt),function(succ) {
			var _this = new stx_parse_pack_parser_term_Many(_gthis.delegation,{ fileName : "stx/parse/pack/parser/term/OneMany.hx", lineNumber : 9, className : "stx.parse.pack.parser.term.OneMany", methodName : "do_parse"});
			var ipt = succ.rest;
			var _g = _this.tag;
			if(_g != null) {
				if(_g._hx_index == 0) {
					var v = _g.v;
					ipt.tag = v;
				}
			}
			_this.check();
			return stx_parse_pack_ParseResult.s_fold(_this.do_parse(ipt),function(succI,_) {
				return stx_parse_pack_ParseResult.success(stx_parse_pack_ParseSuccess.then(stx_parse_pack_ParseSuccess.map(succ,function(res) {
					return [res].concat(succI.with);
				}),succI.rest));
			},function(err,res) {
				return stx_core_use_UseNano.if_else(stx_core_pack_OptionLift.defv(stx_core_pack_OptionLift.map(err.with.head(),function(_) {
					return _.fatal;
				}),false),function() {
					return stx_parse_pack_ParseResult.failure(err);
				},function() {
					return stx_parse_pack_ParseResult.success(stx_parse_pack_ParseSuccess.map(succ,function(x) {
						return [x];
					}));
				});
			});
		},stx_parse_pack_ParseResult.failure);
	}
	,__class__: stx_parse_pack_parser_term_OneMany
});
var stx_assert_pack_PredicateLift = function() { };
stx_assert_pack_PredicateLift.__name__ = "stx.assert.pack.PredicateLift";
stx_assert_pack_PredicateLift.ands = function(self,rest) {
	return Lambda.fold(rest,function(next,memo) {
		return new stx_assert_pack_predicate_term_And(memo,next,{ fileName : "stx/assert/pack/Predicate.hx", lineNumber : 62, className : "stx.assert.pack.PredicateLift", methodName : "ands"});
	},self);
};
stx_assert_pack_PredicateLift.ors = function(self,rest) {
	return Lambda.fold(rest,function(next,memo) {
		return new stx_assert_pack_predicate_term_Or(memo,next,{ fileName : "stx/assert/pack/Predicate.hx", lineNumber : 71, className : "stx.assert.pack.PredicateLift", methodName : "ors"});
	},self);
};
stx_assert_pack_PredicateLift.and = function(self,that) {
	return new stx_assert_pack_predicate_term_And(self,that,{ fileName : "stx/assert/pack/Predicate.hx", lineNumber : 79, className : "stx.assert.pack.PredicateLift", methodName : "and"});
};
stx_assert_pack_PredicateLift.or = function(self,that) {
	return new stx_assert_pack_predicate_term_Or(self,that,{ fileName : "stx/assert/pack/Predicate.hx", lineNumber : 86, className : "stx.assert.pack.PredicateLift", methodName : "or"});
};
stx_assert_pack_PredicateLift.xor = function(self,that) {
	return new stx_assert_pack_predicate_term_XOr(self,that,{ fileName : "stx/assert/pack/Predicate.hx", lineNumber : 92, className : "stx.assert.pack.PredicateLift", methodName : "xor"});
};
stx_assert_pack_PredicateLift.not = function(self) {
	return new stx_assert_pack_predicate_term_Not(self,{ fileName : "stx/assert/pack/Predicate.hx", lineNumber : 98, className : "stx.assert.pack.PredicateLift", methodName : "not"});
};
stx_assert_pack_PredicateLift.errata = function(self,fn) {
	return new stx_assert_pack_predicate_term_Transform(self,fn,{ fileName : "stx/assert/pack/Predicate.hx", lineNumber : 102, className : "stx.assert.pack.PredicateLift", methodName : "errata"});
};
var stx_fn_type_App1R = function() { };
stx_fn_type_App1R.__name__ = "stx.fn.type.App1R";
stx_fn_type_App1R.__isInterface__ = true;
stx_fn_type_App1R.prototype = {
	applyI: null
	,__class__: stx_fn_type_App1R
};
var stx_assert_type_PredicateApi = function() { };
stx_assert_type_PredicateApi.__name__ = "stx.assert.type.PredicateApi";
stx_assert_type_PredicateApi.__isInterface__ = true;
stx_assert_type_PredicateApi.__interfaces__ = [stx_fn_type_App1R];
var stx_assert_pack_predicate_term_Open = function(pos) {
	this.pos = pos;
};
stx_assert_pack_predicate_term_Open.__name__ = "stx.assert.pack.predicate.term.Open";
stx_assert_pack_predicate_term_Open.__interfaces__ = [stx_assert_type_PredicateApi];
stx_assert_pack_predicate_term_Open.prototype = {
	pos: null
	,get_pos: function() {
		return this.pos;
	}
	,applyI: function(v) {
		return stx_core_pack_Report.unit();
	}
	,error: function() {
		return new stx_core_pack_Err(haxe_ds_Option.None,haxe_ds_Option.None,stx_core_use_UseNano.fault(stx_core_pack_Wildcard.__,this.get_pos()));
	}
	,__class__: stx_assert_pack_predicate_term_Open
};
var stx_assert_pack_predicate_term_Transform = function(delegate,transform,pos) {
	stx_assert_pack_predicate_term_Open.call(this,pos);
	this.transform = transform;
	this.delegate = delegate;
};
stx_assert_pack_predicate_term_Transform.__name__ = "stx.assert.pack.predicate.term.Transform";
stx_assert_pack_predicate_term_Transform.__super__ = stx_assert_pack_predicate_term_Open;
stx_assert_pack_predicate_term_Transform.prototype = $extend(stx_assert_pack_predicate_term_Open.prototype,{
	transform: null
	,delegate: null
	,applyI: function(v) {
		return stx_core_pack_Report.errata(this.delegate.applyI(v),this.transform);
	}
	,__class__: stx_assert_pack_predicate_term_Transform
});
var stx_parse_pack_ParseSystemFailure = $hxEnums["stx.parse.pack.ParseSystemFailure"] = { __ename__ : "stx.parse.pack.ParseSystemFailure", __constructs__ : ["E_NoRecursionHead","E_UndefinedParserInConstructor","E_UndefinedParseDelegate"]
	,E_NoRecursionHead: {_hx_index:0,__enum__:"stx.parse.pack.ParseSystemFailure",toString:$estr}
	,E_UndefinedParserInConstructor: ($_=function(parent) { return {_hx_index:1,parent:parent,__enum__:"stx.parse.pack.ParseSystemFailure",toString:$estr}; },$_.__params__ = ["parent"],$_)
	,E_UndefinedParseDelegate: ($_=function(ipt) { return {_hx_index:2,ipt:ipt,__enum__:"stx.parse.pack.ParseSystemFailure",toString:$estr}; },$_.__params__ = ["ipt"],$_)
};
var stx_parse_pack_ParseResult = {};
stx_parse_pack_ParseResult._new = function(self) {
	var this1 = self;
	return this1;
};
stx_parse_pack_ParseResult.lift = function(self) {
	return stx_parse_pack_ParseResult._new(self);
};
stx_parse_pack_ParseResult.fromSuccess = function(self) {
	return stx_parse_pack_ParseResult.success(self);
};
stx_parse_pack_ParseResult.success = function(self) {
	return stx_core_pack_OutcomeSum.Success(self);
};
stx_parse_pack_ParseResult.fromFailure = function(self) {
	return stx_parse_pack_ParseResult.failure(self);
};
stx_parse_pack_ParseResult.failure = function(self) {
	return stx_core_pack_OutcomeSum.Failure(self);
};
stx_parse_pack_ParseResult.pos = function(this1) {
	return stx_parse_pack_ParseResult.get_rest(this1);
};
stx_parse_pack_ParseResult.get_rest = function(this1) {
	return stx_core_pack_OutcomeLift.fold(this1,function(s) {
		return s.rest;
	},function(f) {
		return f.rest;
	});
};
stx_parse_pack_ParseResult.fold = function(this1,succ,fail) {
	switch(this1._hx_index) {
	case 0:
		var _succ = this1.t;
		return succ(_succ);
	case 1:
		var _fail = this1.e;
		return fail(_fail);
	}
};
stx_parse_pack_ParseResult.s_fold = function(this1,succ,fail) {
	switch(this1._hx_index) {
	case 0:
		var _succ = this1.t;
		return succ(_succ,stx_parse_pack_ParseResult.get_self(this1));
	case 1:
		var _fail = this1.e;
		return fail(_fail,stx_parse_pack_ParseResult.get_self(this1));
	}
};
stx_parse_pack_ParseResult.map = function(this1,fn) {
	return stx_parse_pack_ParseResult.lift(stx_parse_pack_ParseResult.fold(this1,function(s) {
		return stx_parse_pack_ParseResult.success(stx_parse_pack_ParseSuccess.map(s,fn));
	},stx_parse_pack_ParseResult.failure));
};
stx_parse_pack_ParseResult.elide = function(this1) {
	return this1;
};
stx_parse_pack_ParseResult.toString = function(this1) {
	return stx_parse_pack_ParseResult.fold(this1,function(success) {
		return stx_show_Lift.show(stx_core_pack_Wildcard.__,success.with);
	},function(failure) {
		return stx_show_Lift.show(stx_core_pack_Wildcard.__,failure.with);
	});
};
stx_parse_pack_ParseResult.value = function(this1) {
	return stx_parse_pack_ParseResult.fold(this1,function(s) {
		return stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,s.with);
	},function(_) {
		return haxe_ds_Option.None;
	});
};
stx_parse_pack_ParseResult.prj = function(this1) {
	return this1;
};
stx_parse_pack_ParseResult.get_self = function(this1) {
	return stx_parse_pack_ParseResult.lift(this1);
};
var stx_parse_pack_parser_term_With = function(l,r,transform,id) {
	var lhs = new stx_assert_Module(id).exists().applyI(l);
	var rhs = new stx_assert_Module(id).exists().applyI(r);
	var this1 = stx_core_pack_Report.merge(lhs,rhs);
	if(this1._hx_index == 0) {
		var e = this1.v;
		throw haxe_Exception.thrown(e);
	}
	stx_parse_pack_parser_term_Base.call(this,stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,l,r),id);
	this.transform = transform;
	var _g = r.tag;
	var _g1 = l.tag;
	var tmp;
	if(_g1._hx_index == 0) {
		if(_g._hx_index == 0) {
			var l = _g1.v;
			var r = _g.v;
			tmp = haxe_ds_Option.Some("(" + l + ") (" + r + ")");
		} else {
			tmp = haxe_ds_Option.None;
		}
	} else {
		tmp = haxe_ds_Option.None;
	}
	this.tag = tmp;
};
stx_parse_pack_parser_term_With.__name__ = "stx.parse.pack.parser.term.With";
stx_parse_pack_parser_term_With.__super__ = stx_parse_pack_parser_term_Base;
stx_parse_pack_parser_term_With.prototype = $extend(stx_parse_pack_parser_term_Base.prototype,{
	transform: null
	,check: function() {
		var _g = new stx_assert_Module({ fileName : "stx/parse/pack/parser/term/With.hx", lineNumber : 17, className : "stx.parse.pack.parser.term.With", methodName : "check"}).exists().applyI(this.delegation);
		if(_g._hx_index == 0) {
			var e = _g.v;
			throw haxe_Exception.thrown(e);
		}
	}
	,do_parse: function(input) {
		var _gthis = this;
		return stx_parse_pack_ParseResult.fold(stx_core_pack_CoupleLift.fst(this.delegation).parse(input),function(matchI) {
			return stx_parse_pack_ParseResult.fold(stx_core_pack_CoupleLift.snd(_gthis.delegation).parse(matchI.rest),function(matchII) {
				return stx_parse_pack_ParseResult.success(stx_parse_pack_ParseSuccess.make(matchII.rest,_gthis.transform(matchI.with,matchII.with)));
			},stx_parse_pack_ParseResult.failure);
		},stx_parse_pack_ParseResult.failure);
	}
	,__class__: stx_parse_pack_parser_term_With
});
var stx_core_pack_Report = {};
stx_core_pack_Report._new = function(self) {
	var this1 = self;
	return this1;
};
stx_core_pack_Report.lift = function(self) {
	return stx_core_pack_Report._new(self);
};
stx_core_pack_Report.unit = function() {
	return stx_core_pack_Report._new(haxe_ds_Option.None);
};
stx_core_pack_Report.conf = function(e) {
	return stx_core_pack_Report._new(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,e));
};
stx_core_pack_Report.pure = function(e) {
	return stx_core_pack_Report._new(haxe_ds_Option.Some(e));
};
stx_core_pack_Report.crunch = function(this1) {
	if(this1._hx_index == 0) {
		var e = this1.v;
		throw haxe_Exception.thrown(e);
	}
};
stx_core_pack_Report.fromStdOption = function(opt) {
	var opt1 = opt;
	return stx_core_pack_Report._new(opt1);
};
stx_core_pack_Report.prj = function(this1) {
	return this1;
};
stx_core_pack_Report.defv = function(this1,error) {
	return stx_core_pack_OptionLift.defv(this1,error);
};
stx_core_pack_Report.merge = function(this1,that) {
	return stx_core_pack_Report.fromStdOption(stx_core_pack_OptionLift.merge(this1,stx_core_pack_Report.prj(that),function(lhs,rhs) {
		return lhs.next(rhs);
	}));
};
stx_core_pack_Report.errata = function(this1,fn) {
	var tmp;
	switch(this1._hx_index) {
	case 0:
		var v = this1.v;
		tmp = stx_core_pack_Option.fromNullT(fn(v));
		break;
	case 1:
		tmp = haxe_ds_Option.None;
		break;
	}
	return stx_core_pack_Report._new(tmp);
};
stx_core_pack_Report.ok = function(this1) {
	if(this1._hx_index == 1) {
		return true;
	} else {
		return false;
	}
};
var stx_Parse = function() { };
stx_Parse.__name__ = "stx.Parse";
stx_Parse.anything = function() {
	return stx_parse_pack_Parser.get_self(stx_parse_pack_Parser.Anon(function(input) {
		if(stx_parse_pack_Input.is_end(input)) {
			return stx_parse_pack_ParseFailure.toParseResult(stx_parse_pack_ParseFailure.at_with(input,"EOF",false,{ fileName : "stx/Parse.hx", lineNumber : 47, className : "stx.Parse", methodName : "anything"}));
		} else {
			return stx_parse_pack_ParseSuccess.toParseResult(stx_parse_pack_ParseSuccess.make({ content : input.content.drop(1), memo : input.memo},input.content.head()));
		}
	}));
};
stx_Parse.range = function(min,max) {
	return function(s) {
		var x = s.charCodeAt(0);
		if(x >= min) {
			return x <= max;
		} else {
			return false;
		}
	};
};
stx_Parse.mergeString = function(a,b) {
	return a + b;
};
stx_Parse.mergeOption = function(a,b) {
	if(b._hx_index == 0) {
		var v = b.v;
		a += v;
		return a;
	} else {
		return "";
	}
};
stx_Parse.mergeTAndArray = function(a,b) {
	return [a].concat(b);
};
stx_Parse.mergeOptionAndArray = function(a,b) {
	return stx_core_pack_OptionLift.fold(a,function(t) {
		return [t].concat(b);
	},function() {
		return b;
	});
};
stx_Parse.primitive = function() {
	var p1 = stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Or(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Or(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Then(stx_Parse.truth,function(x) {
		return stx_core_pack_PrimitiveDef.PBool(x == "true");
	},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 88, className : "stx.parse.pack.ParserLift", methodName : "then"})),stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Then(stx_Parse.float,stx_fn_unary_Implementation.then(Std.parseFloat,stx_core_pack_PrimitiveDef.PFloat),{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 88, className : "stx.parse.pack.ParserLift", methodName : "then"})),{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 82, className : "stx.parse.pack.ParserLift", methodName : "or"})),stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Then(stx_Parse.integer,function(str) {
		return stx_core_pack_PrimitiveDef.PInt(stx_core_pack_OptionLift.defv(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,Std.parseInt(str)),0));
	},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 88, className : "stx.parse.pack.ParserLift", methodName : "then"})),{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 82, className : "stx.parse.pack.ParserLift", methodName : "or"}));
	var _e = stx_Parse.literalR;
	return stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Or(p1,stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Then(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_LAnon(function() {
		return stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Regex(_e,{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 139, className : "stx.parse.pack.ParserLift", methodName : "regexParser"}));
	})),stx_core_pack_PrimitiveDef.PString,{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 88, className : "stx.parse.pack.ParserLift", methodName : "then"})),{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 82, className : "stx.parse.pack.ParserLift", methodName : "or"}));
};
stx_Parse.spaced = function(p) {
	return stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_With(p,stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Many(stx_Parse.gap,{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 94, className : "stx.parse.pack.ParserLift", methodName : "many"})),function(a,_) {
		return a;
	},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 100, className : "stx.parse.pack.ParserLift", methodName : "and_"}));
};
stx_Parse.returned = function(p) {
	return stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_With(p,stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Many(stx_Parse.whitespace,{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 94, className : "stx.parse.pack.ParserLift", methodName : "many"})),function(a,_) {
		return a;
	},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 100, className : "stx.parse.pack.ParserLift", methodName : "and_"}));
};
stx_Parse.until = function(p) {
	var rec = null;
	rec = function(ipt,memo) {
		var _g = p.parse(ipt);
		switch(_g._hx_index) {
		case 0:
			var success = _g.t;
			return stx_parse_pack_ParseSuccess.toParseResult(stx_parse_pack_ParseSuccess.make(ipt,memo));
		case 1:
			var failure = _g.e;
			return stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_AndThen(stx_Parse.anything(),function(x) {
				var memo1 = stx_core_pack_ArrayLift.snoc(memo,x);
				return stx_parse_pack_Parser.get_self(stx_parse_pack_Parser.Anon(function(ipt) {
					return rec(ipt,memo1);
				}));
			},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 91, className : "stx.parse.pack.ParserLift", methodName : "and_then"})).parse(ipt);
		}
	};
	var prs = rec;
	var _g = prs;
	var memo = [];
	return stx_parse_pack_Parser.get_self(stx_parse_pack_Parser.Anon(function(ipt) {
		return _g(ipt,memo);
	}));
};
stx_Parse.eq = function(v) {
	return stx_parse_pack_Parser.get_self(stx_parse_pack_Parser.Anon(function(i) {
		var this1 = i.content.head();
		if(v == this1) {
			return stx_parse_pack_ParseSuccess.toParseResult(stx_parse_pack_ParseSuccess.make({ content : i.content.drop(1), memo : i.memo},i.content.head()));
		} else {
			var fatal = false;
			if(fatal == null) {
				fatal = false;
			}
			return stx_parse_pack_ParseFailure.toParseResult(stx_parse_pack_ParseFailure.at_with(i,"no " + Std.string(v) + " found",fatal,{ fileName : "stx/Parse.hx", lineNumber : 136, className : "stx.Parse", methodName : "eq"}));
		}
	}));
};
stx_Parse.eof = function() {
	return stx_parse_pack_Parser._new(stx_parse_pack_Parser.Anon(stx_parse_pack_ParserLift.eof));
};
stx_Parse.any = function() {
	return stx_Parse.anything();
};
var stx_Pack = function() { };
stx_Pack.__name__ = "stx.Pack";
var stx_fn_type_App2R = function() { };
stx_fn_type_App2R.__name__ = "stx.fn.type.App2R";
stx_fn_type_App2R.__isInterface__ = true;
stx_fn_type_App2R.prototype = {
	applyII: null
	,__class__: stx_fn_type_App2R
};
var stx_RecallApi = function() { };
stx_RecallApi.__name__ = "stx.RecallApi";
stx_RecallApi.__isInterface__ = true;
stx_RecallApi.__interfaces__ = [stx_fn_type_App2R];
stx_RecallApi.prototype = {
	asRecallDef: null
	,__class__: stx_RecallApi
};
var stx_TaskOpSum = $hxEnums["stx.TaskOpSum"] = { __ename__ : "stx.TaskOpSum", __constructs__ : ["Pursue","Escape"]
	,Pursue: {_hx_index:0,__enum__:"stx.TaskOpSum",toString:$estr}
	,Escape: ($_=function(pos) { return {_hx_index:1,pos:pos,__enum__:"stx.TaskOpSum",toString:$estr}; },$_.__params__ = ["pos"],$_)
};
var stx_Bang = {};
stx_Bang.pure = function(fn) {
	return tink_core_Future.async(function(cb) {
		fn();
		cb(tink_core_Noise.Noise);
	});
};
var stx_LiftRun = function() { };
stx_LiftRun.__name__ = "stx.LiftRun";
stx_LiftRun.run = function(__) {
	return new stx_run_pack_Module();
};
stx_LiftRun.timer = function(__) {
	return stx_run_pack_Timer.unit();
};
stx_LiftRun.toVoid = function(rc) {
	return new stx_run_pack_recall_term_Anon(function(i,cont) {
		rc.applyII(i,cont);
	}).asRecallDef();
};
var stx_ActApi = function() { };
stx_ActApi.__name__ = "stx.ActApi";
stx_ActApi.__isInterface__ = true;
stx_ActApi.prototype = {
	upply: null
	,reply: null
	,report: null
	,asActApi: null
	,__class__: stx_ActApi
};
var stx_LiftString = function() { };
stx_LiftString.__name__ = "stx.LiftString";
stx_LiftString.sep = function(path) {
	if(new haxe_io_Path(path).backslash) {
		return "\\";
	} else {
		return "/";
	}
};
var stx_AppliableApi = function() { };
stx_AppliableApi.__name__ = "stx.AppliableApi";
stx_AppliableApi.__isInterface__ = true;
stx_AppliableApi.prototype = {
	apply: null
	,__class__: stx_AppliableApi
};
var stx_BinomialApi = function() { };
stx_BinomialApi.__name__ = "stx.BinomialApi";
stx_BinomialApi.__isInterface__ = true;
stx_BinomialApi.prototype = {
	duoply: null
	,__class__: stx_BinomialApi
};
var stx_RepliableApi = function() { };
stx_RepliableApi.__name__ = "stx.RepliableApi";
stx_RepliableApi.__isInterface__ = true;
stx_RepliableApi.prototype = {
	reply: null
	,__class__: stx_RepliableApi
};
var stx_SymbolApi = function() { };
stx_SymbolApi.__name__ = "stx.SymbolApi";
stx_SymbolApi.__isInterface__ = true;
stx_SymbolApi.prototype = {
	get_id: null
	,set_id: null
	,__class__: stx_SymbolApi
};
var stx_LogicSum = $hxEnums["stx.LogicSum"] = { __ename__ : "stx.LogicSum", __constructs__ : ["Seq","Alt","Neg","App"]
	,Seq: ($_=function(l,r) { return {_hx_index:0,l:l,r:r,__enum__:"stx.LogicSum",toString:$estr}; },$_.__params__ = ["l","r"],$_)
	,Alt: ($_=function(l,r) { return {_hx_index:1,l:l,r:r,__enum__:"stx.LogicSum",toString:$estr}; },$_.__params__ = ["l","r"],$_)
	,Neg: ($_=function(v) { return {_hx_index:2,v:v,__enum__:"stx.LogicSum",toString:$estr}; },$_.__params__ = ["v"],$_)
	,App: ($_=function(v) { return {_hx_index:3,v:v,__enum__:"stx.LogicSum",toString:$estr}; },$_.__params__ = ["v"],$_)
};
var stx_OpSum = $hxEnums["stx.OpSum"] = { __ename__ : "stx.OpSum", __constructs__ : ["Nop","Unop","Binop"]
	,Nop: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"stx.OpSum",toString:$estr}; },$_.__params__ = ["v"],$_)
	,Unop: ($_=function(op,v) { return {_hx_index:1,op:op,v:v,__enum__:"stx.OpSum",toString:$estr}; },$_.__params__ = ["op","v"],$_)
	,Binop: ($_=function(op,l,r) { return {_hx_index:2,op:op,l:l,r:r,__enum__:"stx.OpSum",toString:$estr}; },$_.__params__ = ["op","l","r"],$_)
};
var stx_LiftStd = function() { };
stx_LiftStd.__name__ = "stx.LiftStd";
stx_LiftStd.core = function(__) {
	return new stx_core_Module();
};
stx_LiftStd.here = function(_,pos) {
	return stx_core_pack_Position._new(pos);
};
stx_LiftStd.rtid = function() {
	return function() {
	};
};
stx_LiftStd.chunk = function(_,v) {
	if(v == null) {
		return stx_core_type_ChunkSum.Tap;
	} else {
		return stx_core_type_ChunkSum.Val(v);
	}
};
stx_LiftStd.cell = function(_,v) {
	return stx_core_Cell.fromT(v);
};
stx_LiftStd.report = function(__,err) {
	var this1 = function() {
		return stx_core_Reporter.command;
	};
	(this1())(err);
};
var stx_arrowlet_core_lift_LiftChoiceToArrowlet = function() { };
stx_arrowlet_core_lift_LiftChoiceToArrowlet.__name__ = "stx.arrowlet.core.lift.LiftChoiceToArrowlet";
stx_arrowlet_core_lift_LiftChoiceToArrowlet.left = function(self) {
	return stx_arrowlet_core_pack_Arrowlet.lift(new stx_arrowlet_core_pack_left_$choice_term_Choice(self).asArrowletDef());
};
stx_arrowlet_core_lift_LiftChoiceToArrowlet.right = function(self) {
	return stx_arrowlet_core_pack_Arrowlet.lift(new stx_arrowlet_core_pack_right_$choice_term_Choice(self).asArrowletDef());
};
var stx_arrowlet_core_lift_LiftFun1FutureToArrowlet = function() { };
stx_arrowlet_core_lift_LiftFun1FutureToArrowlet.__name__ = "stx.arrowlet.core.lift.LiftFun1FutureToArrowlet";
stx_arrowlet_core_lift_LiftFun1FutureToArrowlet.toArrowlet = function(fn) {
	return stx_arrowlet_core_pack_Arrowlet.lift(new stx_arrowlet_core_pack_arrowlet_term_Fun1Future(fn).asArrowletDef());
};
var stx_arrowlet_core_lift_LiftFun1RToArrowlet = function() { };
stx_arrowlet_core_lift_LiftFun1RToArrowlet.__name__ = "stx.arrowlet.core.lift.LiftFun1RToArrowlet";
stx_arrowlet_core_lift_LiftFun1RToArrowlet.toArrowlet = function(fn) {
	return stx_arrowlet_core_pack_Arrowlet.fromFun1R(fn);
};
var stx_arrowlet_core_lift_LiftFun2RToArrowlet = function() { };
stx_arrowlet_core_lift_LiftFun2RToArrowlet.__name__ = "stx.arrowlet.core.lift.LiftFun2RToArrowlet";
stx_arrowlet_core_lift_LiftFun2RToArrowlet.toArrowlet = function(fn) {
	return stx_arrowlet_core_pack_Arrowlet.fromFun2R(fn);
};
var stx_arrowlet_core_lift_LiftFutureToArrowlet = function() { };
stx_arrowlet_core_lift_LiftFutureToArrowlet.__name__ = "stx.arrowlet.core.lift.LiftFutureToArrowlet";
stx_arrowlet_core_lift_LiftFutureToArrowlet.then = function(ft,arw) {
	return stx_arrowlet_core_pack_ArrowletLift.then(stx_arrowlet_core_pack_Arrowlet.lift(new stx_arrowlet_core_pack_arrowlet_term_Future(ft).asArrowletDef()),arw);
};
var stx_arrowlet_core_lift_LiftHandlerToArrowlet = function() { };
stx_arrowlet_core_lift_LiftHandlerToArrowlet.__name__ = "stx.arrowlet.core.lift.LiftHandlerToArrowlet";
stx_arrowlet_core_lift_LiftHandlerToArrowlet.toArrowlet = function(fn) {
	return stx_arrowlet_core_pack_Arrowlet.lift(new stx_arrowlet_core_pack_arrowlet_term_Handler(fn).asArrowletDef());
};
var stx_arrowlet_core_lift_LiftReplyFutureToArrowlet = function() { };
stx_arrowlet_core_lift_LiftReplyFutureToArrowlet.__name__ = "stx.arrowlet.core.lift.LiftReplyFutureToArrowlet";
stx_arrowlet_core_lift_LiftReplyFutureToArrowlet.toArrowlet = function(fn) {
	return stx_arrowlet_core_pack_Arrowlet.lift(new stx_arrowlet_core_pack_arrowlet_term_ReplyFuture(fn).asArrowletDef());
};
var stx_arrowlet_core_lift_LiftThunkToArrowlet = function() { };
stx_arrowlet_core_lift_LiftThunkToArrowlet.__name__ = "stx.arrowlet.core.lift.LiftThunkToArrowlet";
stx_arrowlet_core_lift_LiftThunkToArrowlet.toArrowlet = function(fn) {
	return stx_arrowlet_core_pack_Arrowlet.fromFunXR(fn);
};
var stx_arrowlet_core_lift_LiftToLeftChoice = function() { };
stx_arrowlet_core_lift_LiftToLeftChoice.__name__ = "stx.arrowlet.core.lift.LiftToLeftChoice";
stx_arrowlet_core_lift_LiftToLeftChoice.toLeftChoice = function(arw) {
	return stx_arrowlet_core_pack_Arrowlet.lift(new stx_arrowlet_core_pack_left_$choice_term_Base(arw));
};
var stx_arrowlet_core_lift_LiftToRightChoice = function() { };
stx_arrowlet_core_lift_LiftToRightChoice.__name__ = "stx.arrowlet.core.lift.LiftToRightChoice";
stx_arrowlet_core_lift_LiftToRightChoice.toRightChoice = function(arw) {
	return stx_arrowlet_core_pack_Arrowlet.lift(new stx_arrowlet_core_pack_right_$choice_term_Base(arw));
};
var stx_arrowlet_core_pack_ArrowletApi = function() {
};
stx_arrowlet_core_pack_ArrowletApi.__name__ = "stx.arrowlet.core.pack.ArrowletApi";
stx_arrowlet_core_pack_ArrowletApi.prototype = {
	applyII: function(p,t) {
		var output = this.doApplyII(p,t);
		return output;
	}
	,doApplyII: function(p,t) {
		throw haxe_Exception.thrown(new stx_core_pack_Err(haxe_ds_Option.Some(stx_core_pack_Failure.ERR("E_AbstractMethod")),null,stx_core_use_UseNano.fault(stx_core_pack_Wildcard.__,{ fileName : "stx/arrowlet/core/pack/Arrowlet.hx", lineNumber : 28, className : "stx.arrowlet.core.pack.ArrowletApi", methodName : "doApplyII"})));
	}
	,asArrowletDef: function() {
		return this;
	}
	,__class__: stx_arrowlet_core_pack_ArrowletApi
};
var stx_arrowlet_core_pack_ArrowletLift = function() { };
stx_arrowlet_core_pack_ArrowletLift.__name__ = "stx.arrowlet.core.pack.ArrowletLift";
stx_arrowlet_core_pack_ArrowletLift.unto = function(t) {
	return stx_arrowlet_core_pack_ArrowletLift.lift(t.asArrowletDef());
};
stx_arrowlet_core_pack_ArrowletLift.lift = function(def) {
	return stx_arrowlet_core_pack_Arrowlet.lift(def);
};
stx_arrowlet_core_pack_ArrowletLift.inject = function(self,v) {
	return stx_arrowlet_core_pack_ArrowletLift.then(self,stx_arrowlet_core_pack_Arrowlet.fromFun1R(function(b) {
		return v;
	}));
};
stx_arrowlet_core_pack_ArrowletLift.then = function(lhs,rhs) {
	return stx_arrowlet_core_pack_ArrowletLift.unto(stx_arrowlet_core_pack_Arrowlet.Then(lhs,rhs));
};
stx_arrowlet_core_pack_ArrowletLift.first = function(self) {
	return stx_arrowlet_core_pack_ArrowletLift.both(self,stx_arrowlet_core_pack_Arrowlet.unit());
};
stx_arrowlet_core_pack_ArrowletLift.second = function(self) {
	return stx_arrowlet_core_pack_ArrowletLift.both(stx_arrowlet_core_pack_Arrowlet.unit(),self);
};
stx_arrowlet_core_pack_ArrowletLift.split = function(lhs,rhs) {
	return stx_arrowlet_core_pack_ArrowletLift.unto(new stx_arrowlet_core_pack_arrowlet_term_Split(lhs,rhs));
};
stx_arrowlet_core_pack_ArrowletLift.both = function(lhs,rhs) {
	return stx_arrowlet_core_pack_ArrowletLift.unto(new stx_arrowlet_core_pack_arrowlet_term_Both(lhs,rhs));
};
stx_arrowlet_core_pack_ArrowletLift.swap = function(self) {
	return stx_arrowlet_core_pack_ArrowletLift.then(self,stx_arrowlet_core_pack_Arrowlet.fromFun1R(function(tp) {
		return stx_core_pack_CoupleLift.swap(tp);
	}));
};
stx_arrowlet_core_pack_ArrowletLift.fan = function(self) {
	return stx_arrowlet_core_pack_ArrowletLift.postfix(self,function(v) {
		return stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,v,v);
	});
};
stx_arrowlet_core_pack_ArrowletLift.joint = function(lhs,rhs) {
	return stx_arrowlet_core_pack_ArrowletLift.then(lhs,stx_arrowlet_core_pack_ArrowletLift.split(stx_arrowlet_core_pack_Arrowlet.unit(),rhs));
};
stx_arrowlet_core_pack_ArrowletLift.bound = function(lhs,rhs) {
	return stx_arrowlet_core_pack_ArrowletLift.unto(new stx_arrowlet_core_pack_arrowlet_term_Bound(lhs,rhs));
};
stx_arrowlet_core_pack_ArrowletLift.or = function(lhs,rhs) {
	return stx_arrowlet_core_pack_ArrowletLift.lift(new stx_arrowlet_core_pack_arrowlet_term_Or(lhs,rhs).asArrowletDef());
};
stx_arrowlet_core_pack_ArrowletLift.left = function(self) {
	return stx_arrowlet_core_lift_LiftToLeftChoice.toLeftChoice(self);
};
stx_arrowlet_core_pack_ArrowletLift.right = function(self) {
	return stx_arrowlet_core_lift_LiftToRightChoice.toRightChoice(self);
};
stx_arrowlet_core_pack_ArrowletLift.prefix = function(self,fn) {
	return stx_arrowlet_core_pack_ArrowletLift.then(stx_arrowlet_core_pack_ArrowletLift.unto(new stx_arrowlet_core_pack_arrowlet_term_Sync(fn)),self);
};
stx_arrowlet_core_pack_ArrowletLift.postfix = function(self,fn) {
	return stx_arrowlet_core_pack_ArrowletLift.then(self,stx_arrowlet_core_pack_ArrowletLift.unto(new stx_arrowlet_core_pack_arrowlet_term_Sync(fn)));
};
stx_arrowlet_core_pack_ArrowletLift.inform = function(lhs,rhs) {
	return stx_arrowlet_core_pack_ArrowletLift.unto(new stx_arrowlet_core_pack_arrowlet_term_Inform(lhs,rhs));
};
stx_arrowlet_core_pack_ArrowletLift.broach = function(self) {
	return stx_arrowlet_core_pack_ArrowletLift.bound(self,stx_arrowlet_core_pack_Arrowlet.fromFun2R(function(tI,tII) {
		return stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,tI,tII);
	}));
};
stx_arrowlet_core_pack_ArrowletLift.state = function(self) {
	return stx_arrowlet_core_pack_ArrowletLift.bound(self,stx_arrowlet_core_pack_Arrowlet.fromFun2R(stx_fn_binary_Implementation.then(stx_fn_Binary._new(function(tI,tII) {
		return stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,tI,tII);
	}),function(tp) {
		return stx_core_pack_CoupleLift.swap(tp);
	})));
};
stx_arrowlet_core_pack_ArrowletLift.fulfill = function(self,i) {
	return stx_arrowlet_core_pack_ArrowletLift.unto(stx_arrowlet_core_pack_Arrowlet.Anon(function(_,cont) {
		return stx_arrowlet_core_pack_ArrowletLift.prepare(self,i,cont);
	}));
};
stx_arrowlet_core_pack_ArrowletLift.deliver = function(self,cb) {
	return stx_arrowlet_core_pack_ArrowletLift.unto(stx_arrowlet_core_pack_Arrowlet.Anon(function(i,cont) {
		var inner = cont.inner();
		inner.later(function(res) {
			switch(res._hx_index) {
			case 0:
				var o = res.t;
				cb(o);
				break;
			case 1:
				var e = res.e;
				stx_arrowlet_core_pack_Terminal.error(cont,e);
				break;
			}
		});
		return stx_arrowlet_core_pack_ArrowletLift.prepare(self,i,inner);
	}));
};
stx_arrowlet_core_pack_ArrowletLift.prepare = function(self,i,cont) {
	return self.applyII(i,cont);
};
stx_arrowlet_core_pack_ArrowletLift.context = function(self,i,success,failure) {
	return stx_arrowlet_core_pack_Arrowlet.Anon(function(_,cont) {
		var inner = cont.inner();
		inner.later(function(outcome) {
			stx_arrowlet_core_pack_Terminal.value(cont,tink_core_Noise.Noise);
			stx_core_pack_OutcomeLift.fold(outcome,success,failure);
		});
		var tmp = stx_arrowlet_core_pack_ArrowletLift.prepare(self,i,inner);
		cont.after(tmp);
		return cont.serve();
	});
};
stx_arrowlet_core_pack_ArrowletLift.flat_map = function(self,fn) {
	return stx_arrowlet_core_pack_ArrowletLift.unto(new stx_arrowlet_core_pack_arrowlet_term_FlatMap(self,fn));
};
var stx_arrowlet_core_pack_Arrowlet = {};
stx_arrowlet_core_pack_Arrowlet._new = function(self) {
	var this1 = self;
	return this1;
};
stx_arrowlet_core_pack_Arrowlet.lift = function(self) {
	return stx_arrowlet_core_pack_Arrowlet._new(self);
};
stx_arrowlet_core_pack_Arrowlet.unit = function() {
	return stx_arrowlet_core_pack_Arrowlet.lift(new stx_arrowlet_core_pack_arrowlet_term_Sync(function(i) {
		return i;
	}).asArrowletDef());
};
stx_arrowlet_core_pack_Arrowlet.pure = function(o) {
	return stx_arrowlet_core_pack_Arrowlet.lift(new stx_arrowlet_core_pack_arrowlet_term_Pure(o));
};
stx_arrowlet_core_pack_Arrowlet.Sync = function(self) {
	return stx_arrowlet_core_pack_Arrowlet.lift(new stx_arrowlet_core_pack_arrowlet_term_Sync(self));
};
stx_arrowlet_core_pack_Arrowlet.Then = function(self,that) {
	return new stx_arrowlet_core_pack_arrowlet_term_Then(self,that);
};
stx_arrowlet_core_pack_Arrowlet.Anon = function(fn) {
	return stx_arrowlet_core_pack_Arrowlet.lift(new stx_arrowlet_core_pack_arrowlet_term_Anon(fn));
};
stx_arrowlet_core_pack_Arrowlet.Apply = function() {
	return stx_arrowlet_core_pack_Arrowlet.lift(stx_arrowlet_core_pack_arrowlet_term_Apply._new());
};
stx_arrowlet_core_pack_Arrowlet.FlatMap = function(self,func) {
	return stx_arrowlet_core_pack_Arrowlet.lift(new stx_arrowlet_core_pack_arrowlet_term_FlatMap(self,func));
};
stx_arrowlet_core_pack_Arrowlet.fromFunXR = function(f) {
	return stx_arrowlet_core_pack_Arrowlet.lift(new stx_arrowlet_core_pack_arrowlet_term_Sync(function(_) {
		return f();
	}));
};
stx_arrowlet_core_pack_Arrowlet.fromFun1R = function(f) {
	return stx_arrowlet_core_pack_Arrowlet.lift(new stx_arrowlet_core_pack_arrowlet_term_Sync(f));
};
stx_arrowlet_core_pack_Arrowlet.fromFun2R = function(f) {
	return stx_arrowlet_core_pack_Arrowlet.lift(new stx_arrowlet_core_pack_arrowlet_term_Sync(stx_core_use_UseNano.decouple(stx_core_pack_Wildcard.__,f)));
};
stx_arrowlet_core_pack_Arrowlet.fromFunSink = function(fn) {
	return stx_arrowlet_core_pack_Arrowlet.lift(stx_arrowlet_core_pack_Arrowlet.Anon(function(i,term) {
		var trigger = new tink_core_FutureTrigger();
		fn(i,function(o) {
			stx_arrowlet_core_pack_Terminal.value(term,o);
		});
		return term.serve();
	}));
};
var stx_arrowlet_core_pack_Response = {};
stx_arrowlet_core_pack_Response._new = function(deferred) {
	var this1 = new stx_arrowlet_core_pack_ResponseApi(deferred);
	return this1;
};
stx_arrowlet_core_pack_Response.until = function(task) {
	return stx_arrowlet_core_pack_Response._new(new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(task)));
};
stx_arrowlet_core_pack_Response.error = function(e) {
	return stx_arrowlet_core_pack_Response.until(new stx_run_pack_task_term_Error(e));
};
stx_arrowlet_core_pack_Response.submit = function(this1,scheduler) {
	scheduler = stx_core_pack_OptionLift.defv(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,scheduler),stx_run_pack_Scheduler.ZERO);
	scheduler.put(stx_run_pack_Schedule.Task(this1));
};
stx_arrowlet_core_pack_Response.toTask = function(this1) {
	return this1;
};
var stx_run_pack_TaskApi = function() { };
stx_run_pack_TaskApi.__name__ = "stx.run.pack.TaskApi";
stx_run_pack_TaskApi.__isInterface__ = true;
stx_run_pack_TaskApi.prototype = {
	rtid: null
	,get_progress: null
	,set_progress: null
	,pursue: null
	,escape: null
	,asTaskApi: null
	,__class__: stx_run_pack_TaskApi
};
var stx_run_pack_task_term_Base = function() {
	this.uuid = stx_core_use_UseNano.uuid(stx_core_pack_Wildcard.__);
	stx_core_pack_Clazz.call(this);
	this.rtid = function() {
	};
	this.progression(stx_run_pack_ProgressSum.Pending,{ fileName : "stx/run/pack/task/term/Base.hx", lineNumber : 61, className : "stx.run.pack.task.term.Base", methodName : "new"});
};
stx_run_pack_task_term_Base.__name__ = "stx.run.pack.task.term.Base";
stx_run_pack_task_term_Base.__interfaces__ = [stx_run_pack_TaskApi];
stx_run_pack_task_term_Base.__super__ = stx_core_pack_Clazz;
stx_run_pack_task_term_Base.prototype = $extend(stx_core_pack_Clazz.prototype,{
	progress: null
	,get_progress: function() {
		return this.progress;
	}
	,set_progress: function(progress) {
		return this.progress = progress;
	}
	,escape: function() {
		var _gthis = this;
		this.exec(function() {
			_gthis.progression(stx_run_pack_ProgressSum.Escaped,{ fileName : "stx/run/pack/task/term/Base.hx", lineNumber : 19, className : "stx.run.pack.task.term.Base", methodName : "escape"});
			_gthis.do_escape();
			_gthis.do_cleanup();
		});
	}
	,exec: function(f) {
		var _g = this.get_progress().data;
		switch(_g._hx_index) {
		case 0:case 1:
			break;
		case 6:
			var _g1 = _g.e;
			break;
		default:
			try {
				f();
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
				var _g1 = haxe_Exception.caught(_g).unwrap();
				if(((_g1) instanceof stx_core_pack_Err)) {
					var e = _g1;
					var data = e.map(stx_run_pack_AutomationFailure.E_UnknownAutomation);
					if(e.get_uuid() == stx_run_pack_AutomationError.UUID) {
						this.progression(stx_run_pack_ProgressSum.Problem(((e) instanceof stx_run_pack_AutomationError) ? e : null),{ fileName : "stx/run/pack/task/term/Base.hx", lineNumber : 33, className : "stx.run.pack.task.term.Base", methodName : "exec"});
					} else {
						this.progression(stx_run_pack_ProgressSum.Problem(data),{ fileName : "stx/run/pack/task/term/Base.hx", lineNumber : 35, className : "stx.run.pack.task.term.Base", methodName : "exec"});
					}
				} else {
					var e = _g1;
					var data = stx_run_pack_AutomationFailure.E_UnknownAutomation(e);
					if(Std.string(e) == "Stack overflow") {
						data = stx_run_pack_AutomationFailure.E_StackOverflow;
					}
					this.progression(stx_run_pack_ProgressSum.Problem(stx_run_pack_AutomationError.make(data,haxe_ds_Option.None,stx_core_use_UseNano.here(stx_core_pack_Wildcard.__,{ fileName : "stx/run/pack/task/term/Base.hx", lineNumber : 42, className : "stx.run.pack.task.term.Base", methodName : "exec"}))),{ fileName : "stx/run/pack/task/term/Base.hx", lineNumber : 42, className : "stx.run.pack.task.term.Base", methodName : "exec"});
				}
			}
		}
	}
	,pursue: function() {
		var _gthis = this;
		this.exec(function() {
			var cont = _gthis.do_pursue();
			switch(_gthis.get_progress().data._hx_index) {
			case 0:case 1:
				_gthis.do_cleanup();
				break;
			default:
			}
		});
	}
	,rtid: null
	,do_pursue: function() {
		return false;
	}
	,do_escape: function() {
	}
	,do_cleanup: function() {
	}
	,uuid: null
	,asTaskApi: function() {
		return this;
	}
	,progression: function(progress,pos) {
		this.set_progress(stx_run_pack_Progression.pure(progress));
	}
	,toString: function() {
		var c = js_Boot.getClass(this);
		var name = stx_core_pack_OptionLift.defv(stx_core_pack_ArrayLift.last(c.__name__.split(".")),"");
		return "" + name + " " + Std.string(this.get_progress().data);
	}
	,__class__: stx_run_pack_task_term_Base
});
var stx_run_pack_task_term_Deferred = function(deferred) {
	stx_run_pack_task_term_Base.call(this);
	this.deferred = deferred;
	this.poll = stx_run_pack_Backoff.unit();
};
stx_run_pack_task_term_Deferred.__name__ = "stx.run.pack.task.term.Deferred";
stx_run_pack_task_term_Deferred.__super__ = stx_run_pack_task_term_Base;
stx_run_pack_task_term_Deferred.prototype = $extend(stx_run_pack_task_term_Base.prototype,{
	escaped: null
	,poll: null
	,deferred: null
	,impl: null
	,init: null
	,arrived: null
	,get_arrived: function() {
		return this.impl != null;
	}
	,do_delegate: function() {
		stx_log_pack_Log.trace(stx_log_pack_Log.close(stx_LiftLog.log(stx_core_pack_Wildcard.__)),"Deferred#do_delegate arrived:" + Std.string(this.get_arrived()) + " escaped:" + Std.string(this.escaped),{ fileName : "stx/run/pack/task/term/Deferred.hx", lineNumber : 21, className : "stx.run.pack.task.term.Deferred", methodName : "do_delegate"});
		if(this.get_arrived()) {
			if(this.escaped) {
				this.impl.escape();
			} else {
				this.impl.pursue();
			}
			stx_log_pack_Log.trace(stx_log_pack_Log.close(stx_LiftLog.log(stx_core_pack_Wildcard.__)),this.impl,{ fileName : "stx/run/pack/task/term/Deferred.hx", lineNumber : 28, className : "stx.run.pack.task.term.Deferred", methodName : "do_delegate"});
			stx_log_pack_Log.trace(stx_log_pack_Log.close(stx_LiftLog.log(stx_core_pack_Wildcard.__)),this.impl.get_progress().data,{ fileName : "stx/run/pack/task/term/Deferred.hx", lineNumber : 29, className : "stx.run.pack.task.term.Deferred", methodName : "do_delegate"});
			this.set_progress(this.impl.get_progress());
		}
		var _g = this.get_progress().data;
		switch(_g._hx_index) {
		case 3:
			var _g1 = _g.cb;
			return true;
		case 4:
			var _g1 = _g.milliseconds;
			return true;
		case 5:
			return true;
		default:
			return false;
		}
	}
	,should_pursue: function() {
		var _g = this.get_progress().data;
		switch(_g._hx_index) {
		case 3:
			var _g1 = _g.cb;
			return true;
		case 4:
			var _g1 = _g.milliseconds;
			return true;
		case 5:
			return true;
		default:
			return false;
		}
	}
	,do_pursue: function() {
		var _gthis = this;
		stx_log_pack_Log.trace(stx_log_pack_Log.close(stx_LiftLog.log(stx_core_pack_Wildcard.__)),"Deferred#do_pursue",{ fileName : "stx/run/pack/task/term/Deferred.hx", lineNumber : 42, className : "stx.run.pack.task.term.Deferred", methodName : "do_pursue"});
		if(!this.init) {
			this.set_progress(stx_run_pack_Progression.pure(stx_run_pack_ProgressSum.Pending));
			this.init = true;
			stx_log_pack_Log.trace(stx_log_pack_Log.close(stx_LiftLog.log(stx_core_pack_Wildcard.__)),"Deferred#do_pursue({init : true})",{ fileName : "stx/run/pack/task/term/Deferred.hx", lineNumber : 46, className : "stx.run.pack.task.term.Deferred", methodName : "do_pursue"});
			var reaction = function(value) {
				_gthis.impl = value;
				return _gthis.do_delegate();
			};
			this.deferred.handle(reaction);
			if(this.get_arrived()) {
				stx_log_pack_Log.trace(stx_log_pack_Log.close(stx_LiftLog.log(stx_core_pack_Wildcard.__)),"synchronous",{ fileName : "stx/run/pack/task/term/Deferred.hx", lineNumber : 55, className : "stx.run.pack.task.term.Deferred", methodName : "do_pursue"});
				this.do_delegate();
			} else {
				stx_log_pack_Log.trace(stx_log_pack_Log.close(stx_LiftLog.log(stx_core_pack_Wildcard.__)),"asynchronous",{ fileName : "stx/run/pack/task/term/Deferred.hx", lineNumber : 58, className : "stx.run.pack.task.term.Deferred", methodName : "do_pursue"});
				var ret = this.deferred.map(function(_) {
					return tink_core_Noise.Noise;
				});
				this.set_progress(stx_run_pack_Progression.pure(stx_run_pack_ProgressSum.Waiting(ret.gather())));
			}
		} else {
			stx_log_pack_Log.trace(stx_log_pack_Log.close(stx_LiftLog.log(stx_core_pack_Wildcard.__)),"Deferred#do_pursue({init : false}) " + Std.string(this.get_progress().data),{ fileName : "stx/run/pack/task/term/Deferred.hx", lineNumber : 62, className : "stx.run.pack.task.term.Deferred", methodName : "do_pursue"});
			if(stx_assert_pack_Assertion.ok(new stx_assert_Module({ fileName : "stx/run/pack/task/term/Deferred.hx", lineNumber : 63, className : "stx.run.pack.task.term.Deferred", methodName : "do_pursue"}).alike(),stx_run_pack_ProgressSum.Waiting(null),this.get_progress().data)) {
				if(this.get_arrived()) {
					this.do_delegate();
				} else {
					this.set_progress(stx_run_pack_Progression.pure(stx_run_pack_ProgressSum.Polling(this.poll.delta)));
				}
			} else if(stx_assert_pack_Assertion.ok(new stx_assert_Module({ fileName : "stx/run/pack/task/term/Deferred.hx", lineNumber : 70, className : "stx.run.pack.task.term.Deferred", methodName : "do_pursue"}).alike(),stx_run_pack_ProgressSum.Polling(null),this.get_progress().data)) {
				if(this.get_arrived()) {
					this.do_delegate();
				} else if(this.poll.ready()) {
					stx_log_pack_Log.trace(stx_log_pack_Log.close(stx_LiftLog.log(stx_core_pack_Wildcard.__)),"ready",{ fileName : "stx/run/pack/task/term/Deferred.hx", lineNumber : 75, className : "stx.run.pack.task.term.Deferred", methodName : "do_pursue"});
					this.poll.roll();
					this.set_progress(stx_run_pack_Progression.pure(stx_run_pack_ProgressSum.Polling(this.poll.delta)));
				} else {
					stx_log_pack_Log.trace(stx_log_pack_Log.close(stx_LiftLog.log(stx_core_pack_Wildcard.__)),"not ready",{ fileName : "stx/run/pack/task/term/Deferred.hx", lineNumber : 79, className : "stx.run.pack.task.term.Deferred", methodName : "do_pursue"});
				}
			} else {
				var tmp;
				if(this.impl != null) {
					var _g = this.get_progress().data;
					switch(_g._hx_index) {
					case 3:
						var _g1 = _g.cb;
						tmp = true;
						break;
					case 4:
						var _g1 = _g.milliseconds;
						tmp = true;
						break;
					case 5:
						tmp = true;
						break;
					default:
						tmp = false;
					}
				} else {
					tmp = false;
				}
				if(tmp) {
					stx_log_pack_Log.trace(stx_log_pack_Log.close(stx_LiftLog.log(stx_core_pack_Wildcard.__)),"Deferred#do_pursue({ case : \"default\" })",{ fileName : "stx/run/pack/task/term/Deferred.hx", lineNumber : 84, className : "stx.run.pack.task.term.Deferred", methodName : "do_pursue"});
					this.do_delegate();
				}
			}
		}
		var _g = this.get_progress().data;
		switch(_g._hx_index) {
		case 3:
			var _g1 = _g.cb;
			return true;
		case 4:
			var _g1 = _g.milliseconds;
			return true;
		case 5:
			return true;
		default:
			return false;
		}
	}
	,do_escape: function() {
		this.escaped = true;
		this.deferred.handle(function(task) {
			task.escape();
		});
	}
	,__class__: stx_run_pack_task_term_Deferred
});
var stx_arrowlet_core_pack_ResponseApi = function(deferred) {
	stx_run_pack_task_term_Deferred.call(this,deferred);
	this.complete_trigger = new tink_core_FutureTrigger();
	this.complete = this.complete_trigger;
};
stx_arrowlet_core_pack_ResponseApi.__name__ = "stx.arrowlet.core.pack.ResponseApi";
stx_arrowlet_core_pack_ResponseApi.__super__ = stx_run_pack_task_term_Deferred;
stx_arrowlet_core_pack_ResponseApi.prototype = $extend(stx_run_pack_task_term_Deferred.prototype,{
	complete_trigger: null
	,complete: null
	,do_pursue: function() {
		var recall = stx_run_pack_task_term_Deferred.prototype.do_pursue.call(this);
		switch(this.get_progress().data._hx_index) {
		case 0:case 1:
			this.complete_trigger.trigger(tink_core_Noise.Noise);
			break;
		default:
		}
		return recall;
	}
	,__class__: stx_arrowlet_core_pack_ResponseApi
});
var stx_run_pack_task_term_Both = function(lhs,rhs) {
	this.init = false;
	stx_run_pack_task_term_Base.call(this);
	this.lhs = lhs;
	this.rhs = rhs;
};
stx_run_pack_task_term_Both.__name__ = "stx.run.pack.task.term.Both";
stx_run_pack_task_term_Both.__super__ = stx_run_pack_task_term_Base;
stx_run_pack_task_term_Both.prototype = $extend(stx_run_pack_task_term_Base.prototype,{
	init: null
	,lhs: null
	,rhs: null
	,do_pursue: function() {
		var _gthis = this;
		if(!this.init) {
			this.init = true;
			this.lhs.pursue();
			this.rhs.pursue();
		}
		return stx_core_pack_OptionLift.def(stx_core_pack_OptionLift.map(stx_core_pack_Report.merge(stx_run_pack_Progression.error(this.lhs.get_progress()),stx_run_pack_Progression.error(this.rhs.get_progress())),function(e) {
			_gthis.progression(stx_run_pack_ProgressSum.Problem(e),{ fileName : "stx/run/pack/task/term/Both.hx", lineNumber : 22, className : "stx.run.pack.task.term.Both", methodName : "do_pursue"});
			_gthis.lhs.escape();
			_gthis.rhs.escape();
			return false;
		}),function() {
			var _g = _gthis.rhs.get_progress().data;
			var _g1 = _gthis.lhs.get_progress().data;
			if(_g1._hx_index == 4) {
				if(_g._hx_index == 4) {
					var l = _g1.milliseconds;
					var r = _g.milliseconds;
					var t = l < stx_run_pack_MilliSeconds.prj(r) ? l : r;
					_gthis.progression(stx_run_pack_ProgressSum.Polling(t),{ fileName : "stx/run/pack/task/term/Both.hx", lineNumber : 30, className : "stx.run.pack.task.term.Both", methodName : "do_pursue"});
					return true;
				} else {
					var tmp = stx_run_pack_Progression.is_less_than(_gthis.lhs.get_progress(),_gthis.rhs.get_progress()) ? _gthis.rhs.get_progress().data : _gthis.lhs.get_progress().data;
					_gthis.progression(tmp,{ fileName : "stx/run/pack/task/term/Both.hx", lineNumber : 33, className : "stx.run.pack.task.term.Both", methodName : "do_pursue"});
					return stx_run_pack_Progression.get_ongoing(_gthis.get_progress());
				}
			} else {
				var tmp = stx_run_pack_Progression.is_less_than(_gthis.lhs.get_progress(),_gthis.rhs.get_progress()) ? _gthis.rhs.get_progress().data : _gthis.lhs.get_progress().data;
				_gthis.progression(tmp,{ fileName : "stx/run/pack/task/term/Both.hx", lineNumber : 33, className : "stx.run.pack.task.term.Both", methodName : "do_pursue"});
				return stx_run_pack_Progression.get_ongoing(_gthis.get_progress());
			}
		});
	}
	,__class__: stx_run_pack_task_term_Both
});
var stx_arrowlet_core_pack_TerminalApiBase = function(parent) {
	this.handlers = [];
	this.trigger = new tink_core_FutureTrigger();
	this.depends = [];
	this.future = this.trigger;
	stx_run_pack_task_term_Both.call(this,new stx_arrowlet_core_pack_TerminalDepend(this.depends),new stx_arrowlet_core_pack_TerminalWait(this.trigger));
	if(parent != null) {
		var tmp = this.serve();
		parent.after(tmp);
	}
};
stx_arrowlet_core_pack_TerminalApiBase.__name__ = "stx.arrowlet.core.pack.TerminalApiBase";
stx_arrowlet_core_pack_TerminalApiBase.__super__ = stx_run_pack_task_term_Both;
stx_arrowlet_core_pack_TerminalApiBase.prototype = $extend(stx_run_pack_task_term_Both.prototype,{
	handlers: null
	,stored: null
	,future: null
	,trigger: null
	,canceller: null
	,depends: null
	,do_escape: function() {
	}
	,do_pursue: function() {
		var _gthis = this;
		if(this.stored == null) {
			if(this.canceller == null) {
				this.canceller = this.trigger.handle(function(s) {
					_gthis.stored = s;
				});
			} else {
				this.canceller = new tink_core__$Callback_LinkPair(this.canceller,this.trigger.handle(function(s) {
					_gthis.stored = s;
				}));
			}
		} else {
			this.internal();
			this.trigger.trigger(this.stored);
		}
		if(stx_run_pack_task_term_Both.prototype.do_pursue.call(this)) {
			return true;
		} else {
			var ret = this.future.map(function(_) {
				return tink_core_Noise.Noise;
			});
			this.progression(stx_run_pack_ProgressSum.Waiting(ret.gather()),{ fileName : "stx/arrowlet/core/pack/Terminal.hx", lineNumber : 68, className : "stx.arrowlet.core.pack.TerminalApiBase", methodName : "do_pursue"});
			return true;
		}
	}
	,serve: function() {
		return stx_arrowlet_core_pack_Response.until(this);
	}
	,issue: function(res) {
		this.stored = res;
	}
	,after: function(response) {
		this.depends.push(response);
	}
	,later: function(cb) {
		var _gthis = this;
		var handle = null;
		handle = function() {
			cb(_gthis.stored);
			return HxOverrides.remove(_gthis.handlers,handle);
		};
		this.handlers.push(handle);
	}
	,inner: function() {
		var inner = new stx_arrowlet_core_pack_TerminalApiBase(this);
		return inner.asTerminalDef();
	}
	,asTerminalDef: function() {
		return this;
	}
	,internal: function() {
		var _g = 0;
		var _g1 = this.handlers;
		while(_g < _g1.length) {
			var handler = _g1[_g];
			++_g;
			handler();
		}
	}
	,__class__: stx_arrowlet_core_pack_TerminalApiBase
});
var stx_run_pack_task_term_When = function(trigger) {
	this.received = false;
	var _gthis = this;
	stx_run_pack_task_term_Base.call(this);
	this.trigger = trigger == null ? new tink_core_FutureTrigger() : trigger;
	var ret = this.trigger.map(function(_) {
		_gthis.received = true;
		return tink_core_Noise.Noise;
	});
	this.progression(stx_run_pack_ProgressSum.Waiting(ret.gather()),{ fileName : "stx/run/pack/task/term/When.hx", lineNumber : 10, className : "stx.run.pack.task.term.When", methodName : "new"});
};
stx_run_pack_task_term_When.__name__ = "stx.run.pack.task.term.When";
stx_run_pack_task_term_When.__super__ = stx_run_pack_task_term_Base;
stx_run_pack_task_term_When.prototype = $extend(stx_run_pack_task_term_Base.prototype,{
	trigger: null
	,received: null
	,do_pursue: function() {
		if(this.received) {
			this.progression(stx_run_pack_ProgressSum.Secured,{ fileName : "stx/run/pack/task/term/When.hx", lineNumber : 21, className : "stx.run.pack.task.term.When", methodName : "do_pursue"});
			return false;
		} else {
			return true;
		}
	}
	,__class__: stx_run_pack_task_term_When
});
var stx_arrowlet_core_pack_TerminalWait = function(trigger) {
	stx_run_pack_task_term_When.call(this,trigger);
};
stx_arrowlet_core_pack_TerminalWait.__name__ = "stx.arrowlet.core.pack.TerminalWait";
stx_arrowlet_core_pack_TerminalWait.__super__ = stx_run_pack_task_term_When;
stx_arrowlet_core_pack_TerminalWait.prototype = $extend(stx_run_pack_task_term_When.prototype,{
	__class__: stx_arrowlet_core_pack_TerminalWait
});
var stx_run_pack_task_term_All = function(arr) {
	this.arr = arr;
	this.init = false;
	stx_run_pack_task_term_Base.call(this);
};
stx_run_pack_task_term_All.__name__ = "stx.run.pack.task.term.All";
stx_run_pack_task_term_All.__super__ = stx_run_pack_task_term_Base;
stx_run_pack_task_term_All.prototype = $extend(stx_run_pack_task_term_Base.prototype,{
	arr: null
	,init: null
	,do_escape: function() {
		var _g = 0;
		var _g1 = this.arr;
		while(_g < _g1.length) {
			var task = _g1[_g];
			++_g;
			task.escape();
		}
	}
	,do_cleanup: function() {
		this.arr = [];
	}
	,do_pursue: function() {
		var recurring = true;
		if(!this.init) {
			this.init = true;
		}
		var f = function(task) {
			var _g = task.get_progress().data;
			if(_g._hx_index == 6) {
				var e = _g.e;
				return true;
			} else {
				return false;
			}
		};
		var partition = stx_core_pack_ArrayLift.lfold(this.arr,function(next,memo) {
			if(f(next)) {
				memo.a.push(next);
			} else {
				memo.b.push(next);
			}
			return memo;
		},{ a : [], b : []});
		if(partition.a.length > 0) {
			var tmp = stx_core_pack_ArrayLift.lfold(partition.a,function(next,memo) {
				return stx_core_pack_OptionLift.flat_map(stx_run_pack_Progression.error(next.get_progress()),function(e) {
					return stx_core_pack_OptionLift.map(memo,function(e2) {
						return e2.next(e);
					});
				});
			},haxe_ds_Option.None);
			var this1 = stx_core_use_UseNano.fault(stx_core_pack_Wildcard.__,{ fileName : "stx/run/pack/task/term/All.hx", lineNumber : 43, className : "stx.run.pack.task.term.All", methodName : "do_pursue"});
			this.set_progress(stx_run_pack_Progression.pure(stx_run_pack_ProgressSum.Problem(stx_core_pack_OptionLift.defv(tmp,new stx_core_pack_Err(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,stx_core_pack_Failure.ERR_OF(stx_run_pack_AutomationFailure.E_NoValueFound)),haxe_ds_Option.None,this1)))));
			var _g = 0;
			var _g1 = partition.b;
			while(_g < _g1.length) {
				var task = _g1[_g];
				++_g;
				task.escape();
			}
			return false;
		} else if(partition.b.length <= 0) {
			this.progression(stx_run_pack_ProgressSum.Secured,{ fileName : "stx/run/pack/task/term/All.hx", lineNumber : 50, className : "stx.run.pack.task.term.All", methodName : "do_pursue"});
			return false;
		} else {
			var _g = 0;
			var _g1 = this.arr;
			while(_g < _g1.length) {
				var task = _g1[_g];
				++_g;
				task.pursue();
				if(stx_core_pack_OptionLift.is_defined(stx_run_pack_Progression.error(task.get_progress()))) {
					return true;
				}
			}
			var tmp = stx_core_pack_OptionLift.map(stx_core_pack_ArrayLift.lfold1(partition.b,function(next,memo) {
				if(stx_run_pack_Progression.is_less_than(memo.get_progress(),next.get_progress())) {
					return memo;
				} else {
					return next;
				}
			}),function(t) {
				return t.get_progress().data;
			});
			var this1 = stx_core_use_UseNano.fault(stx_core_pack_Wildcard.__,{ fileName : "stx/run/pack/task/term/All.hx", lineNumber : 61, className : "stx.run.pack.task.term.All", methodName : "do_pursue"});
			this.set_progress(stx_run_pack_Progression.pure(stx_core_pack_OptionLift.defv(tmp,stx_run_pack_ProgressSum.Problem(new stx_core_pack_Err(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,stx_core_pack_Failure.ERR_OF(stx_run_pack_AutomationFailure.E_NoValueFound)),haxe_ds_Option.None,this1)))));
			var _g = this.get_progress().data;
			switch(_g._hx_index) {
			case 3:
				var _g1 = _g.cb;
				return true;
			case 4:
				var _g1 = _g.milliseconds;
				return true;
			case 5:
				return true;
			default:
				return false;
			}
		}
	}
	,__class__: stx_run_pack_task_term_All
});
var stx_arrowlet_core_pack_TerminalDepend = function(arr) {
	stx_run_pack_task_term_All.call(this,arr);
};
stx_arrowlet_core_pack_TerminalDepend.__name__ = "stx.arrowlet.core.pack.TerminalDepend";
stx_arrowlet_core_pack_TerminalDepend.__super__ = stx_run_pack_task_term_All;
stx_arrowlet_core_pack_TerminalDepend.prototype = $extend(stx_run_pack_task_term_All.prototype,{
	__class__: stx_arrowlet_core_pack_TerminalDepend
});
var tink_core_FutureObject = function() { };
tink_core_FutureObject.__name__ = "tink.core.FutureObject";
tink_core_FutureObject.__isInterface__ = true;
tink_core_FutureObject.prototype = {
	map: null
	,flatMap: null
	,handle: null
	,gather: null
	,eager: null
	,__class__: tink_core_FutureObject
};
var tink_core_FutureTrigger = function() {
	this.list = new tink_core_CallbackList();
};
tink_core_FutureTrigger.__name__ = "tink.core.FutureTrigger";
tink_core_FutureTrigger.__interfaces__ = [tink_core_FutureObject];
tink_core_FutureTrigger.gatherFuture = function(f) {
	return new tink_core__$Future_SuspendableFuture(function($yield) {
		return f.handle($yield);
	});
};
tink_core_FutureTrigger.prototype = {
	result: null
	,list: null
	,handle: function(callback) {
		var _g = this.list;
		if(_g == null) {
			tink_core_Callback.invoke(callback,this.result);
			return null;
		} else {
			var v = _g;
			var node = new tink_core__$Callback_ListCell(callback,v);
			v.cells.push(node);
			v.used++;
			return node;
		}
	}
	,map: function(f) {
		var _g = this.list;
		if(_g == null) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(this.result)));
		} else {
			var v = _g;
			var ret = new tink_core_FutureTrigger();
			var _this = this.list;
			var node = new tink_core__$Callback_ListCell(function(v) {
				var node = f(v);
				ret.trigger(node);
			},_this);
			_this.cells.push(node);
			_this.used++;
			return ret;
		}
	}
	,flatMap: function(f) {
		var _g = this.list;
		if(_g == null) {
			return f(this.result);
		} else {
			var v = _g;
			var ret = new tink_core_FutureTrigger();
			var _this = this.list;
			var node = new tink_core__$Callback_ListCell(function(v) {
				f(v).handle($bind(ret,ret.trigger));
			},_this);
			_this.cells.push(node);
			_this.used++;
			return ret;
		}
	}
	,gather: function() {
		return this;
	}
	,eager: function() {
		return this;
	}
	,asFuture: function() {
		return this;
	}
	,trigger: function(result) {
		if(this.list == null) {
			return false;
		} else {
			var list = this.list;
			this.list = null;
			this.result = result;
			list.invoke(result,true);
			return true;
		}
	}
	,__class__: tink_core_FutureTrigger
};
var tink_core_CallbackList = function() {
	this.busy = false;
	this.queue = [];
	this.used = 0;
	this.cells = [];
};
tink_core_CallbackList.__name__ = "tink.core.CallbackList";
tink_core_CallbackList.prototype = {
	cells: null
	,used: null
	,queue: null
	,busy: null
	,ondrain: function() {
	}
	,get_length: function() {
		return this.used;
	}
	,release: function() {
		if(--this.used < this.used >> 1) {
			this.compact();
		}
	}
	,add: function(cb) {
		var node = new tink_core__$Callback_ListCell(cb,this);
		this.cells.push(node);
		this.used++;
		return node;
	}
	,invoke: function(data,destructive) {
		if(this.busy) {
			var _g = $bind(this,this.invoke);
			var data1 = data;
			var destructive1 = destructive;
			var tmp = function() {
				_g(data1,destructive1);
			};
			this.queue.push(tmp);
		} else {
			this.busy = true;
			var length = this.cells.length;
			var _g1 = 0;
			var _g2 = length;
			while(_g1 < _g2) {
				var i = _g1++;
				var _this = this.cells[i];
				if(_this.list != null) {
					tink_core_Callback.invoke(_this.cb,data);
				}
			}
			this.busy = false;
			if(destructive) {
				var added = this.cells.length - length;
				var _g1 = 0;
				var _g2 = length;
				while(_g1 < _g2) {
					var i = _g1++;
					var _this = this.cells[i];
					_this.cb = null;
					_this.list = null;
				}
				var _g1 = 0;
				var _g2 = added;
				while(_g1 < _g2) {
					var i = _g1++;
					this.cells[i] = this.cells[length + i];
				}
				this.resize(added);
			} else if(this.used < this.cells.length) {
				this.compact();
			}
			if(this.queue.length > 0) {
				(this.queue.shift())();
			}
		}
	}
	,compact: function() {
		if(this.busy) {
			return;
		} else if(this.used == 0) {
			this.resize(0);
			this.ondrain();
		} else {
			var compacted = 0;
			var _g = 0;
			var _g1 = this.cells.length;
			while(_g < _g1) {
				var i = _g++;
				var _g2 = this.cells[i];
				var _g3 = _g2.list;
				if(_g2.cb != null) {
					var v = _g2;
					if(compacted != i) {
						this.cells[compacted] = v;
					}
					if(++compacted == this.used) {
						break;
					}
				}
			}
			this.resize(this.used);
		}
	}
	,resize: function(length) {
		this.cells.length = length;
	}
	,clear: function() {
		if(this.busy) {
			this.queue.push($bind(this,this.clear));
		}
		var _g = 0;
		var _g1 = this.cells;
		while(_g < _g1.length) {
			var cell = _g1[_g];
			++_g;
			cell.cb = null;
			cell.list = null;
		}
		this.resize(0);
	}
	,__class__: tink_core_CallbackList
};
var stx_run_pack_ProgressSum = $hxEnums["stx.run.pack.ProgressSum"] = { __ename__ : "stx.run.pack.ProgressSum", __constructs__ : ["Escaped","Secured","Working","Waiting","Polling","Pending","Problem"]
	,Escaped: {_hx_index:0,__enum__:"stx.run.pack.ProgressSum",toString:$estr}
	,Secured: {_hx_index:1,__enum__:"stx.run.pack.ProgressSum",toString:$estr}
	,Working: {_hx_index:2,__enum__:"stx.run.pack.ProgressSum",toString:$estr}
	,Waiting: ($_=function(cb) { return {_hx_index:3,cb:cb,__enum__:"stx.run.pack.ProgressSum",toString:$estr}; },$_.__params__ = ["cb"],$_)
	,Polling: ($_=function(milliseconds) { return {_hx_index:4,milliseconds:milliseconds,__enum__:"stx.run.pack.ProgressSum",toString:$estr}; },$_.__params__ = ["milliseconds"],$_)
	,Pending: {_hx_index:5,__enum__:"stx.run.pack.ProgressSum",toString:$estr}
	,Problem: ($_=function(e) { return {_hx_index:6,e:e,__enum__:"stx.run.pack.ProgressSum",toString:$estr}; },$_.__params__ = ["e"],$_)
};
var stx_arrowlet_core_pack_Terminal = {};
stx_arrowlet_core_pack_Terminal.unit = function() {
	return new stx_arrowlet_core_pack_TerminalApiBase().asTerminalDef();
};
stx_arrowlet_core_pack_Terminal.value = function(this1,o) {
	this1.issue(stx_core_pack_OutcomeSum.Success(o));
};
stx_arrowlet_core_pack_Terminal.error = function(this1,e) {
	this1.issue(stx_core_pack_OutcomeSum.Failure(e));
};
var stx_arrowlet_core_pack_arrowlet_term_Anon = function(delegate) {
	stx_arrowlet_core_pack_ArrowletApi.call(this);
	this.delegate = delegate;
};
stx_arrowlet_core_pack_arrowlet_term_Anon.__name__ = "stx.arrowlet.core.pack.arrowlet.term.Anon";
stx_arrowlet_core_pack_arrowlet_term_Anon.__super__ = stx_arrowlet_core_pack_ArrowletApi;
stx_arrowlet_core_pack_arrowlet_term_Anon.prototype = $extend(stx_arrowlet_core_pack_ArrowletApi.prototype,{
	delegate: null
	,doApplyII: function(i,cont) {
		return this.delegate(i,cont);
	}
	,__class__: stx_arrowlet_core_pack_arrowlet_term_Anon
});
var stx_arrowlet_core_pack_arrowlet_term_Apply = {};
stx_arrowlet_core_pack_arrowlet_term_Apply._ = function() {
	return stx_arrowlet_core_pack_arrowlet_term__$Apply_Constructor.ZERO;
};
stx_arrowlet_core_pack_arrowlet_term_Apply.inj = function() {
	return stx_arrowlet_core_pack_arrowlet_term__$Apply_Constructor.ZERO;
};
stx_arrowlet_core_pack_arrowlet_term_Apply._new = function() {
	var this1 = new stx_arrowlet_core_pack_arrowlet_term__$Apply_ApplyImplementation();
	return this1;
};
stx_arrowlet_core_pack_arrowlet_term_Apply.unit = function() {
	return stx_arrowlet_core_pack_arrowlet_term__$Apply_Constructor.ZERO.unit();
};
var stx_arrowlet_core_pack_arrowlet_term__$Apply_Constructor = function() {
	stx_core_pack_Clazz.call(this);
};
stx_arrowlet_core_pack_arrowlet_term__$Apply_Constructor.__name__ = "stx.arrowlet.core.pack.arrowlet.term._Apply.Constructor";
stx_arrowlet_core_pack_arrowlet_term__$Apply_Constructor.__super__ = stx_core_pack_Clazz;
stx_arrowlet_core_pack_arrowlet_term__$Apply_Constructor.prototype = $extend(stx_core_pack_Clazz.prototype,{
	unit: function() {
		return stx_arrowlet_core_pack_arrowlet_term_Apply._new();
	}
	,__class__: stx_arrowlet_core_pack_arrowlet_term__$Apply_Constructor
});
var stx_arrowlet_core_pack_arrowlet_term__$Apply_ApplyImplementation = function() {
	stx_arrowlet_core_pack_ArrowletApi.call(this);
};
stx_arrowlet_core_pack_arrowlet_term__$Apply_ApplyImplementation.__name__ = "stx.arrowlet.core.pack.arrowlet.term._Apply.ApplyImplementation";
stx_arrowlet_core_pack_arrowlet_term__$Apply_ApplyImplementation.__super__ = stx_arrowlet_core_pack_ArrowletApi;
stx_arrowlet_core_pack_arrowlet_term__$Apply_ApplyImplementation.prototype = $extend(stx_arrowlet_core_pack_ArrowletApi.prototype,{
	doApplyII: function(i,cont) {
		return stx_core_pack_CoupleLift.decouple(i,function(arw,i) {
			return stx_arrowlet_core_pack_ArrowletLift.prepare(arw,i,cont);
		});
	}
	,__class__: stx_arrowlet_core_pack_arrowlet_term__$Apply_ApplyImplementation
});
var stx_arrowlet_core_pack_arrowlet_term_Both = function(lhs,rhs) {
	stx_arrowlet_core_pack_ArrowletApi.call(this);
	this.lhs = lhs;
	this.rhs = rhs;
};
stx_arrowlet_core_pack_arrowlet_term_Both.__name__ = "stx.arrowlet.core.pack.arrowlet.term.Both";
stx_arrowlet_core_pack_arrowlet_term_Both.__super__ = stx_arrowlet_core_pack_ArrowletApi;
stx_arrowlet_core_pack_arrowlet_term_Both.prototype = $extend(stx_arrowlet_core_pack_ArrowletApi.prototype,{
	lhs: null
	,rhs: null
	,doApplyII: function(i,cont) {
		var l_val = haxe_ds_Option.None;
		var r_val = haxe_ds_Option.None;
		var l_cancel = function() {
			return;
		};
		var r_cancel = function() {
			return;
		};
		var guard = function() {
			switch(l_val._hx_index) {
			case 0:
				var _g = l_val.v;
				switch(_g._hx_index) {
				case 0:
					if(r_val._hx_index == 0) {
						var _g1 = r_val.v;
						if(_g1._hx_index == 0) {
							var l = _g.t;
							var r = _g1.t;
							var guard = stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,l,r);
							stx_arrowlet_core_pack_Terminal.value(cont,guard);
						}
					}
					break;
				case 1:
					if(r_val._hx_index == 1) {
						var x = _g.e;
						r_cancel();
						stx_arrowlet_core_pack_Terminal.error(cont,x);
					}
					break;
				}
				break;
			case 1:
				if(r_val._hx_index == 0) {
					var _g = r_val.v;
					if(_g._hx_index == 1) {
						var x = _g.e;
						l_cancel();
						stx_arrowlet_core_pack_Terminal.error(cont,x);
					}
				}
				break;
			}
		};
		var l_set = cont.inner();
		l_set.later(function(oi) {
			l_val = haxe_ds_Option.Some(oi);
			guard();
		});
		var r_set = cont.inner();
		r_set.later(function(oii) {
			r_val = haxe_ds_Option.Some(oii);
			guard();
		});
		var l_task = stx_arrowlet_core_pack_ArrowletLift.prepare(this.lhs,stx_core_pack_CoupleLift.fst(i),l_set);
		var l_cancel1 = ($_=stx_arrowlet_core_pack_Response.toTask(l_task),$bind($_,$_.escape));
		var r_task = stx_arrowlet_core_pack_ArrowletLift.prepare(this.rhs,stx_core_pack_CoupleLift.snd(i),r_set);
		var r_cancel1 = ($_=stx_arrowlet_core_pack_Response.toTask(r_task),$bind($_,$_.escape));
		return cont.serve();
	}
	,__class__: stx_arrowlet_core_pack_arrowlet_term_Both
});
var stx_arrowlet_core_pack_arrowlet_term_Bound = function(lhs,rhs) {
	stx_arrowlet_core_pack_ArrowletApi.call(this);
	this.lhs = lhs;
	this.rhs = rhs;
};
stx_arrowlet_core_pack_arrowlet_term_Bound.__name__ = "stx.arrowlet.core.pack.arrowlet.term.Bound";
stx_arrowlet_core_pack_arrowlet_term_Bound.__super__ = stx_arrowlet_core_pack_ArrowletApi;
stx_arrowlet_core_pack_arrowlet_term_Bound.prototype = $extend(stx_arrowlet_core_pack_ArrowletApi.prototype,{
	lhs: null
	,rhs: null
	,doApplyII: function(i,cont) {
		var _gthis = this;
		return new stx_arrowlet_core_pack_arrowlet_term_FlatMap(this.lhs,function(oI) {
			return stx_arrowlet_core_pack_ArrowletLift.then(stx_arrowlet_core_pack_Arrowlet.pure(stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,i,oI)),_gthis.rhs);
		}).applyII(i,cont);
	}
	,__class__: stx_arrowlet_core_pack_arrowlet_term_Bound
});
var stx_arrowlet_core_pack_arrowlet_term_Delay = function(milliseconds) {
	stx_arrowlet_core_pack_ArrowletApi.call(this);
	this.milliseconds = milliseconds;
};
stx_arrowlet_core_pack_arrowlet_term_Delay.__name__ = "stx.arrowlet.core.pack.arrowlet.term.Delay";
stx_arrowlet_core_pack_arrowlet_term_Delay.__super__ = stx_arrowlet_core_pack_ArrowletApi;
stx_arrowlet_core_pack_arrowlet_term_Delay.prototype = $extend(stx_arrowlet_core_pack_ArrowletApi.prototype,{
	milliseconds: null
	,doApplyII: function(i,cont) {
		var ft = new tink_core_FutureTrigger();
		stx_run_pack_Act.Delay(this.milliseconds).reply().handle(function(_) {
			stx_arrowlet_core_pack_Terminal.value(cont,i);
		});
		return cont.serve();
	}
	,__class__: stx_arrowlet_core_pack_arrowlet_term_Delay
});
var stx_arrowlet_core_pack_arrowlet_term_Fan = function(delegate) {
	stx_arrowlet_core_pack_ArrowletApi.call(this);
	this.delegate = delegate;
};
stx_arrowlet_core_pack_arrowlet_term_Fan.__name__ = "stx.arrowlet.core.pack.arrowlet.term.Fan";
stx_arrowlet_core_pack_arrowlet_term_Fan.__super__ = stx_arrowlet_core_pack_ArrowletApi;
stx_arrowlet_core_pack_arrowlet_term_Fan.prototype = $extend(stx_arrowlet_core_pack_ArrowletApi.prototype,{
	delegate: null
	,doApplyII: function(i,cont) {
		var inner = cont.inner();
		inner.later(function(o) {
			var tmp = stx_core_pack_OutcomeLift.map(o,function(v) {
				return stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,v,v);
			});
			cont.issue(tmp);
		});
		return stx_arrowlet_core_pack_ArrowletLift.prepare(this.delegate,i,inner);
	}
	,__class__: stx_arrowlet_core_pack_arrowlet_term_Fan
});
var stx_arrowlet_core_pack_arrowlet_term_FlatMap = function(self,func) {
	stx_arrowlet_core_pack_ArrowletApi.call(this);
	this.self = self;
	this.func = func;
};
stx_arrowlet_core_pack_arrowlet_term_FlatMap.__name__ = "stx.arrowlet.core.pack.arrowlet.term.FlatMap";
stx_arrowlet_core_pack_arrowlet_term_FlatMap.__super__ = stx_arrowlet_core_pack_ArrowletApi;
stx_arrowlet_core_pack_arrowlet_term_FlatMap.prototype = $extend(stx_arrowlet_core_pack_ArrowletApi.prototype,{
	self: null
	,func: null
	,doApplyII: function(i,cont) {
		var _gthis = this;
		var outer_task_future = new tink_core_FutureTrigger();
		var inner_task_future = new tink_core_FutureTrigger();
		var automation_future = inner_task_future.flatMap(function(task0) {
			return outer_task_future.map(function(task1) {
				return stx_run_pack_Task.seq(task0,task1);
			});
		});
		var inner = cont.inner();
		inner.later(function(oI) {
			var inner = cont.inner();
			inner.later(function(oII) {
				cont.issue(oII);
			});
			var inner_task = stx_core_pack_OutcomeLift.fold(oI,function(v) {
				return stx_arrowlet_core_pack_ArrowletLift.prepare(_gthis.func(v),i,inner);
			},function(e) {
				stx_arrowlet_core_pack_Terminal.error(cont,e);
				return cont.serve();
			});
			var tmp = stx_arrowlet_core_pack_Response.toTask(inner_task);
			inner_task_future.trigger(tmp);
		});
		var outer_task = stx_arrowlet_core_pack_ArrowletLift.prepare(this.self,i,inner);
		var tmp = stx_arrowlet_core_pack_Response.toTask(outer_task);
		outer_task_future.trigger(tmp);
		return cont.serve();
	}
	,__class__: stx_arrowlet_core_pack_arrowlet_term_FlatMap
});
var stx_arrowlet_core_pack_arrowlet_term_Fun1Future = function(delegate) {
	stx_arrowlet_core_pack_ArrowletApi.call(this);
	this.delegate = delegate;
};
stx_arrowlet_core_pack_arrowlet_term_Fun1Future.__name__ = "stx.arrowlet.core.pack.arrowlet.term.Fun1Future";
stx_arrowlet_core_pack_arrowlet_term_Fun1Future.__super__ = stx_arrowlet_core_pack_ArrowletApi;
stx_arrowlet_core_pack_arrowlet_term_Fun1Future.prototype = $extend(stx_arrowlet_core_pack_ArrowletApi.prototype,{
	delegate: null
	,doApplyII: function(i,cont) {
		var handler = function(o) {
			stx_arrowlet_core_pack_Terminal.value(cont,o);
		};
		var canceller = this.delegate(i).handle(handler);
		return cont.serve();
	}
	,__class__: stx_arrowlet_core_pack_arrowlet_term_Fun1Future
});
var stx_arrowlet_core_pack_arrowlet_term_Future = function(delegate) {
	stx_arrowlet_core_pack_ArrowletApi.call(this);
	this.delegate = delegate;
};
stx_arrowlet_core_pack_arrowlet_term_Future.__name__ = "stx.arrowlet.core.pack.arrowlet.term.Future";
stx_arrowlet_core_pack_arrowlet_term_Future.__super__ = stx_arrowlet_core_pack_ArrowletApi;
stx_arrowlet_core_pack_arrowlet_term_Future.prototype = $extend(stx_arrowlet_core_pack_ArrowletApi.prototype,{
	delegate: null
	,doApplyII: function(i,cont) {
		var _e = cont;
		var tmp = function(o) {
			stx_arrowlet_core_pack_Terminal.value(_e,o);
		};
		this.delegate.handle(tmp);
		return cont.serve();
	}
	,__class__: stx_arrowlet_core_pack_arrowlet_term_Future
});
var stx_arrowlet_core_pack_arrowlet_term_Handler = function(delegate) {
	stx_arrowlet_core_pack_ArrowletApi.call(this);
	this.delegate = delegate;
};
stx_arrowlet_core_pack_arrowlet_term_Handler.__name__ = "stx.arrowlet.core.pack.arrowlet.term.Handler";
stx_arrowlet_core_pack_arrowlet_term_Handler.__super__ = stx_arrowlet_core_pack_ArrowletApi;
stx_arrowlet_core_pack_arrowlet_term_Handler.prototype = $extend(stx_arrowlet_core_pack_ArrowletApi.prototype,{
	delegate: null
	,doApplyII: function(i,cont) {
		var _e = cont;
		var tmp = function(o) {
			stx_arrowlet_core_pack_Terminal.value(_e,o);
		};
		this.delegate(tmp);
		return cont.serve();
	}
	,__class__: stx_arrowlet_core_pack_arrowlet_term_Handler
});
var stx_arrowlet_core_pack_arrowlet_term_Inform = function(lhs,rhs) {
	stx_arrowlet_core_pack_ArrowletApi.call(this);
	this.lhs = lhs;
	this.rhs = rhs;
};
stx_arrowlet_core_pack_arrowlet_term_Inform.__name__ = "stx.arrowlet.core.pack.arrowlet.term.Inform";
stx_arrowlet_core_pack_arrowlet_term_Inform.__super__ = stx_arrowlet_core_pack_ArrowletApi;
stx_arrowlet_core_pack_arrowlet_term_Inform.prototype = $extend(stx_arrowlet_core_pack_ArrowletApi.prototype,{
	lhs: null
	,rhs: null
	,doApplyII: function(i,cont) {
		var _gthis = this;
		return stx_arrowlet_core_pack_ArrowletLift.flat_map(this.lhs,function(oI) {
			return stx_arrowlet_core_pack_Arrowlet.Anon(function(_,contI) {
				return stx_arrowlet_core_pack_ArrowletLift.flat_map(_gthis.rhs,function(aOiOii) {
					return aOiOii;
				}).applyII(oI,contI);
			});
		}).applyII(i,cont);
	}
	,__class__: stx_arrowlet_core_pack_arrowlet_term_Inform
});
var stx_arrowlet_core_pack_arrowlet_term_Or = function(lhs,rhs) {
	stx_arrowlet_core_pack_ArrowletApi.call(this);
	this.lhs = lhs;
	this.rhs = rhs;
};
stx_arrowlet_core_pack_arrowlet_term_Or.__name__ = "stx.arrowlet.core.pack.arrowlet.term.Or";
stx_arrowlet_core_pack_arrowlet_term_Or.__super__ = stx_arrowlet_core_pack_ArrowletApi;
stx_arrowlet_core_pack_arrowlet_term_Or.prototype = $extend(stx_arrowlet_core_pack_ArrowletApi.prototype,{
	lhs: null
	,rhs: null
	,doApplyII: function(i,cont) {
		var _gthis = this;
		return stx_core_pack_EitherLift.fold(i,function(iI) {
			return stx_arrowlet_core_pack_ArrowletLift.prepare(_gthis.lhs,iI,cont);
		},function(iII) {
			return stx_arrowlet_core_pack_ArrowletLift.prepare(_gthis.rhs,iII,cont);
		});
	}
	,__class__: stx_arrowlet_core_pack_arrowlet_term_Or
});
var stx_arrowlet_core_pack_arrowlet_term_Pure = function(secreted) {
	stx_arrowlet_core_pack_ArrowletApi.call(this);
	this.secreted = secreted;
};
stx_arrowlet_core_pack_arrowlet_term_Pure.__name__ = "stx.arrowlet.core.pack.arrowlet.term.Pure";
stx_arrowlet_core_pack_arrowlet_term_Pure.__super__ = stx_arrowlet_core_pack_ArrowletApi;
stx_arrowlet_core_pack_arrowlet_term_Pure.prototype = $extend(stx_arrowlet_core_pack_ArrowletApi.prototype,{
	secreted: null
	,doApplyII: function(i,cont) {
		stx_arrowlet_core_pack_Terminal.value(cont,this.secreted);
		return cont.serve();
	}
	,__class__: stx_arrowlet_core_pack_arrowlet_term_Pure
});
var stx_arrowlet_core_pack_arrowlet_term_ReplyFuture = function(delegate) {
	stx_arrowlet_core_pack_ArrowletApi.call(this);
	this.delegate = delegate;
};
stx_arrowlet_core_pack_arrowlet_term_ReplyFuture.__name__ = "stx.arrowlet.core.pack.arrowlet.term.ReplyFuture";
stx_arrowlet_core_pack_arrowlet_term_ReplyFuture.__super__ = stx_arrowlet_core_pack_ArrowletApi;
stx_arrowlet_core_pack_arrowlet_term_ReplyFuture.prototype = $extend(stx_arrowlet_core_pack_ArrowletApi.prototype,{
	delegate: null
	,doApplyII: function(i,cont) {
		var handler = function(o) {
			stx_arrowlet_core_pack_Terminal.value(cont,o);
		};
		var canceller = this.delegate().handle(handler);
		return cont.serve();
	}
	,__class__: stx_arrowlet_core_pack_arrowlet_term_ReplyFuture
});
var stx_arrowlet_core_pack_arrowlet_term_Split = function(lhs,rhs) {
	stx_arrowlet_core_pack_ArrowletApi.call(this);
	this.delegate = stx_arrowlet_core_pack_Arrowlet.lift(new stx_arrowlet_core_pack_arrowlet_term_Both(lhs,rhs).asArrowletDef());
};
stx_arrowlet_core_pack_arrowlet_term_Split.__name__ = "stx.arrowlet.core.pack.arrowlet.term.Split";
stx_arrowlet_core_pack_arrowlet_term_Split.__super__ = stx_arrowlet_core_pack_ArrowletApi;
stx_arrowlet_core_pack_arrowlet_term_Split.prototype = $extend(stx_arrowlet_core_pack_ArrowletApi.prototype,{
	delegate: null
	,doApplyII: function(i,cont) {
		return this.delegate.applyII(stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,i,i),cont);
	}
	,__class__: stx_arrowlet_core_pack_arrowlet_term_Split
});
var stx_arrowlet_core_pack_arrowlet_term_Sync = function(delegate) {
	stx_arrowlet_core_pack_ArrowletApi.call(this);
	this.delegate = delegate;
};
stx_arrowlet_core_pack_arrowlet_term_Sync.__name__ = "stx.arrowlet.core.pack.arrowlet.term.Sync";
stx_arrowlet_core_pack_arrowlet_term_Sync.__super__ = stx_arrowlet_core_pack_ArrowletApi;
stx_arrowlet_core_pack_arrowlet_term_Sync.prototype = $extend(stx_arrowlet_core_pack_ArrowletApi.prototype,{
	delegate: null
	,doApplyII: function(i,cont) {
		stx_arrowlet_core_pack_Terminal.value(cont,this.delegate(i));
		return cont.serve();
	}
	,__class__: stx_arrowlet_core_pack_arrowlet_term_Sync
});
var stx_arrowlet_core_pack_arrowlet_term_Then = function(lhs,rhs) {
	stx_arrowlet_core_pack_ArrowletApi.call(this);
	this.lhs = lhs;
	this.rhs = rhs;
};
stx_arrowlet_core_pack_arrowlet_term_Then.__name__ = "stx.arrowlet.core.pack.arrowlet.term.Then";
stx_arrowlet_core_pack_arrowlet_term_Then.__super__ = stx_arrowlet_core_pack_ArrowletApi;
stx_arrowlet_core_pack_arrowlet_term_Then.prototype = $extend(stx_arrowlet_core_pack_ArrowletApi.prototype,{
	lhs: null
	,rhs: null
	,doApplyII: function(i,cont) {
		var _gthis = this;
		return new stx_arrowlet_core_pack_arrowlet_term_FlatMap(this.lhs,function(oI) {
			return stx_arrowlet_core_pack_Arrowlet.lift(stx_arrowlet_core_pack_Arrowlet.Anon(function(_,cont) {
				return _gthis.rhs.applyII(oI,cont);
			}));
		}).applyII(i,cont);
	}
	,__class__: stx_arrowlet_core_pack_arrowlet_term_Then
});
var stx_arrowlet_core_pack_arrowlet_term_Thread = {};
stx_arrowlet_core_pack_arrowlet_term_Thread.submit = function(this1,scheduler) {
	stx_arrowlet_core_pack_Response.submit(stx_arrowlet_core_pack_ArrowletLift.prepare(this1,tink_core_Noise.Noise,stx_arrowlet_core_pack_Terminal.ZERO),scheduler);
};
var stx_arrowlet_core_pack_left_$choice_term_Base = function(delegate) {
	stx_arrowlet_core_pack_ArrowletApi.call(this);
	this.delegate = delegate;
};
stx_arrowlet_core_pack_left_$choice_term_Base.__name__ = "stx.arrowlet.core.pack.left_choice.term.Base";
stx_arrowlet_core_pack_left_$choice_term_Base.__super__ = stx_arrowlet_core_pack_ArrowletApi;
stx_arrowlet_core_pack_left_$choice_term_Base.prototype = $extend(stx_arrowlet_core_pack_ArrowletApi.prototype,{
	delegate: null
	,doApplyII: function(either,cont) {
		switch(either._hx_index) {
		case 0:
			var v = either.v;
			return stx_arrowlet_core_pack_ArrowletLift.prepare(stx_arrowlet_core_pack_ArrowletLift.then(stx_arrowlet_core_pack_Arrowlet.Apply(),stx_arrowlet_core_pack_Arrowlet.fromFun1R(haxe_ds_Either.Left)),stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,this.delegate,v),cont);
		case 1:
			var v = either.v;
			stx_arrowlet_core_pack_Terminal.value(cont,haxe_ds_Either.Right(v));
			return cont.serve();
		}
	}
	,__class__: stx_arrowlet_core_pack_left_$choice_term_Base
});
var stx_arrowlet_core_pack_left_$choice_term_Choice = function(delegate) {
	stx_arrowlet_core_pack_ArrowletApi.call(this);
	this.delegate = delegate;
};
stx_arrowlet_core_pack_left_$choice_term_Choice.__name__ = "stx.arrowlet.core.pack.left_choice.term.Choice";
stx_arrowlet_core_pack_left_$choice_term_Choice.__super__ = stx_arrowlet_core_pack_ArrowletApi;
stx_arrowlet_core_pack_left_$choice_term_Choice.prototype = $extend(stx_arrowlet_core_pack_ArrowletApi.prototype,{
	delegate: null
	,doApplyII: function(either,cont) {
		switch(either._hx_index) {
		case 0:
			var i = either.v;
			return stx_arrowlet_core_pack_ArrowletLift.prepare(stx_arrowlet_core_pack_Arrowlet.Apply(),stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,this.delegate,i),cont);
		case 1:
			var oii = either.v;
			stx_arrowlet_core_pack_Terminal.value(cont,haxe_ds_Either.Right(oii));
			return cont.serve();
		}
	}
	,__class__: stx_arrowlet_core_pack_left_$choice_term_Choice
});
var stx_arrowlet_core_pack_right_$choice_term_Base = function(delegate) {
	stx_arrowlet_core_pack_ArrowletApi.call(this);
	this.delegate = delegate;
};
stx_arrowlet_core_pack_right_$choice_term_Base.__name__ = "stx.arrowlet.core.pack.right_choice.term.Base";
stx_arrowlet_core_pack_right_$choice_term_Base.__super__ = stx_arrowlet_core_pack_ArrowletApi;
stx_arrowlet_core_pack_right_$choice_term_Base.prototype = $extend(stx_arrowlet_core_pack_ArrowletApi.prototype,{
	delegate: null
	,doApplyII: function(i,cont) {
		switch(i._hx_index) {
		case 0:
			var v = i.v;
			stx_arrowlet_core_pack_Terminal.value(cont,haxe_ds_Either.Left(v));
			return cont.serve();
		case 1:
			var v = i.v;
			return stx_arrowlet_core_pack_ArrowletLift.prepare(stx_arrowlet_core_pack_ArrowletLift.then(stx_arrowlet_core_pack_Arrowlet.Apply(),stx_arrowlet_core_pack_Arrowlet.fromFun1R(haxe_ds_Either.Right)),stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,this.delegate,v),cont);
		}
	}
	,__class__: stx_arrowlet_core_pack_right_$choice_term_Base
});
var stx_arrowlet_core_pack_right_$choice_term_Choice = function(delegate) {
	stx_arrowlet_core_pack_ArrowletApi.call(this);
	this.delegate = delegate;
};
stx_arrowlet_core_pack_right_$choice_term_Choice.__name__ = "stx.arrowlet.core.pack.right_choice.term.Choice";
stx_arrowlet_core_pack_right_$choice_term_Choice.__super__ = stx_arrowlet_core_pack_ArrowletApi;
stx_arrowlet_core_pack_right_$choice_term_Choice.prototype = $extend(stx_arrowlet_core_pack_ArrowletApi.prototype,{
	delegate: null
	,doApplyII: function(i,cont) {
		switch(i._hx_index) {
		case 0:
			var v = i.v;
			stx_arrowlet_core_pack_Terminal.value(cont,haxe_ds_Either.Left(v));
			return cont.serve();
		case 1:
			var v = i.v;
			return stx_arrowlet_core_pack_ArrowletLift.prepare(stx_arrowlet_core_pack_ArrowletLift.postfix(stx_arrowlet_core_pack_Arrowlet.Apply(),function(either) {
				return stx_core_pack_EitherLift.flip(either);
			}),stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,this.delegate,v),cont);
		}
	}
	,__class__: stx_arrowlet_core_pack_right_$choice_term_Choice
});
var stx_arrowlet_lift_LiftThunkToProceed = function() { };
stx_arrowlet_lift_LiftThunkToProceed.__name__ = "stx.arrowlet.lift.LiftThunkToProceed";
stx_arrowlet_lift_LiftThunkToProceed.cascade = function(ipt) {
	return stx_arrowlet_pack_Proceed.fromFunXR(ipt);
};
var stx_arrowlet_pack_ArrangeLift = function() { };
stx_arrowlet_pack_ArrangeLift.__name__ = "stx.arrowlet.pack.ArrangeLift";
stx_arrowlet_pack_ArrangeLift.state = function(self) {
	return stx_arrowlet_pack_Attempt.lift(stx_arrowlet_core_pack_ArrowletLift.postfix(stx_arrowlet_core_pack_ArrowletLift.broach(self),stx_core_use_UseNano.decouple(stx_core_pack_Wildcard.__,function(tp,chk) {
		var _g = function(tI,tII) {
			return stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,tI,tII);
		};
		var tII = stx_core_pack_CoupleLift.snd(tp);
		return stx_core_pack_ResLift.map(chk,function(tI) {
			return _g(tI,tII);
		});
	})));
};
stx_arrowlet_pack_ArrangeLift.toCascade = function(self) {
	return stx_arrowlet_pack_Cascade.lift(stx_arrowlet_core_pack_Arrowlet.Anon(function(i,cont) {
		return stx_core_pack_ResLift.fold(i,function(tp) {
			return stx_arrowlet_core_pack_ArrowletLift.prepare(self,tp,cont);
		},function(err) {
			var tmp = stx_core_use_UseNano.failure(stx_core_pack_Wildcard.__,err);
			stx_arrowlet_core_pack_Terminal.value(cont,tmp);
			return cont.serve();
		});
	}));
};
var stx_arrowlet_pack_Arrange = {};
stx_arrowlet_pack_Arrange._new = function(self) {
	var this1 = self;
	return this1;
};
stx_arrowlet_pack_Arrange.lift = function(self) {
	return stx_arrowlet_pack_Arrange._new(self);
};
stx_arrowlet_pack_Arrange.pure = function(o) {
	return stx_arrowlet_pack_Arrange.lift(stx_arrowlet_core_pack_Arrowlet.Anon(function(i,cont) {
		stx_arrowlet_core_pack_Terminal.value(cont,stx_core_use_UseNano.success(stx_core_pack_Wildcard.__,o));
		return cont.serve();
	}));
};
stx_arrowlet_pack_Arrange.fromFun1Attempt = function(f) {
	var fN = stx_arrowlet_pack_Attempt.lift(stx_arrowlet_core_pack_ArrowletLift.then(stx_arrowlet_core_pack_ArrowletLift.postfix(stx_arrowlet_core_pack_Arrowlet.unit(),stx_core_use_UseNano.decouple(stx_core_pack_Wildcard.__,function(l,r) {
		return stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,stx_arrowlet_core_pack_Arrowlet.lift(f(l).asArrowletDef()),r);
	})),stx_arrowlet_core_pack_Arrowlet.Apply()));
	return stx_arrowlet_pack_Arrange.lift(fN.asArrowletDef());
};
stx_arrowlet_pack_Arrange.bind_fold = function(fn,array) {
	var result = new Array(array.length);
	var _g = 0;
	var _g1 = array.length;
	while(_g < _g1) {
		var i = _g++;
		result[i] = (function(a1,_g) {
			return function(a2) {
				return _g[0](a1[0],a2);
			};
		})([array[i]],[fn]);
	}
	var _this = result;
	var f = stx_arrowlet_pack_Arrange.fromFun1Attempt;
	var result = new Array(_this.length);
	var _g = 0;
	var _g1 = _this.length;
	while(_g < _g1) {
		var i = _g++;
		result[i] = f(_this[i]);
	}
	return stx_core_pack_ArrayLift.lfold1(result,function(next,memo) {
		return stx_arrowlet_pack_Arrange.lift(stx_arrowlet_pack_AttemptLift.attempt(stx_arrowlet_pack_Arrange._.state(memo),stx_arrowlet_pack_Attempt.lift(next)));
	});
};
var stx_arrowlet_pack_AttemptLift = function() { };
stx_arrowlet_pack_AttemptLift.__name__ = "stx.arrowlet.pack.AttemptLift";
stx_arrowlet_pack_AttemptLift.lift = function(self) {
	return stx_arrowlet_pack_Attempt._new(self);
};
stx_arrowlet_pack_AttemptLift.then = function(self,that) {
	return stx_arrowlet_pack_AttemptLift.lift(stx_arrowlet_core_pack_Arrowlet.Then(self,that));
};
stx_arrowlet_pack_AttemptLift.resolve = function(self,next) {
	return stx_arrowlet_core_pack_Arrowlet.lift(stx_arrowlet_core_pack_Arrowlet.Then(stx_arrowlet_pack_Attempt.toArrowlet(self),stx_arrowlet_pack_Resolve.toArrowlet(next)));
};
stx_arrowlet_pack_AttemptLift.process = function(self,next) {
	return stx_arrowlet_pack_AttemptLift.then(self,stx_arrowlet_pack_Process.toCascade(next));
};
stx_arrowlet_pack_AttemptLift.errata = function(self,fn) {
	return stx_arrowlet_pack_AttemptLift.lift(stx_arrowlet_core_pack_ArrowletLift.postfix(self,function(oc) {
		return stx_core_pack_ResLift.errata(oc,fn);
	}));
};
stx_arrowlet_pack_AttemptLift.attempt = function(self,next) {
	return stx_arrowlet_pack_AttemptLift.then(self,stx_arrowlet_pack_AttemptLift.toCascade(next));
};
stx_arrowlet_pack_AttemptLift.reframe = function(self) {
	return stx_arrowlet_pack_CascadeLift.reframe(stx_arrowlet_pack_AttemptLift.toCascade(self));
};
stx_arrowlet_pack_AttemptLift.toCascade = function(self) {
	return stx_arrowlet_pack_Cascade.lift(stx_arrowlet_core_pack_Arrowlet.Anon(function(i,cont) {
		return stx_core_pack_ResLift.fold(i,function(v) {
			return stx_arrowlet_core_pack_ArrowletLift.prepare(self,v,cont);
		},function(e) {
			var tmp = stx_core_use_UseNano.failure(stx_core_pack_Wildcard.__,e);
			stx_arrowlet_core_pack_Terminal.value(cont,tmp);
			return cont.serve();
		});
	}));
};
stx_arrowlet_pack_AttemptLift.forward = function(self,i) {
	return stx_arrowlet_pack_Proceed.lift(stx_arrowlet_core_pack_Arrowlet.Anon(function(_,cont) {
		return stx_arrowlet_core_pack_ArrowletLift.prepare(self,i,cont);
	}));
};
var stx_arrowlet_pack_Attempt = {};
stx_arrowlet_pack_Attempt._new = function(self) {
	var this1 = self;
	return this1;
};
stx_arrowlet_pack_Attempt.lift = function(self) {
	return stx_arrowlet_pack_Attempt._new(self);
};
stx_arrowlet_pack_Attempt.unit = function() {
	return stx_arrowlet_pack_Attempt.lift(stx_arrowlet_core_pack_Arrowlet.Anon(function(i,cont) {
		stx_arrowlet_core_pack_Terminal.value(cont,stx_core_use_UseNano.success(stx_core_pack_Wildcard.__,i));
		return cont.serve();
	}));
};
stx_arrowlet_pack_Attempt.pure = function(res) {
	return stx_arrowlet_pack_Attempt.lift(stx_arrowlet_core_pack_Arrowlet.Anon(function(_,cont) {
		stx_arrowlet_core_pack_Terminal.value(cont,res);
		return cont.serve();
	}));
};
stx_arrowlet_pack_Attempt.fromFun1Res = function(fn) {
	return stx_arrowlet_pack_Attempt.lift(stx_arrowlet_core_pack_Arrowlet.Anon(function(pI,cont) {
		stx_arrowlet_core_pack_Terminal.value(cont,fn(pI));
		return cont.serve();
	}));
};
stx_arrowlet_pack_Attempt.fromFun1R = function(fn) {
	return stx_arrowlet_pack_Attempt.lift(stx_arrowlet_core_pack_Arrowlet.Anon(function(i,cont) {
		stx_arrowlet_core_pack_Terminal.value(cont,stx_core_use_UseNano.success(stx_core_pack_Wildcard.__,fn(i)));
		return cont.serve();
	}));
};
stx_arrowlet_pack_Attempt.toArrowlet = function(this1) {
	return this1;
};
stx_arrowlet_pack_Attempt.fromFun1Proceed = function(fn) {
	return stx_arrowlet_pack_Attempt.lift(stx_arrowlet_core_pack_Arrowlet.Anon(function(i,cont) {
		return stx_arrowlet_pack_ProceedLift.prepare(fn(i),cont);
	}));
};
var stx_arrowlet_pack_CascadeLift = function() { };
stx_arrowlet_pack_CascadeLift.__name__ = "stx.arrowlet.pack.CascadeLift";
stx_arrowlet_pack_CascadeLift.prepare = function(self,i,cont) {
	return stx_arrowlet_core_pack_Arrowlet._.prepare(stx_arrowlet_pack_Cascade.toArrowlet(self),i,cont);
};
stx_arrowlet_pack_CascadeLift.lift = function(self) {
	return stx_arrowlet_pack_Cascade._new(self);
};
stx_arrowlet_pack_CascadeLift.or = function(self,that) {
	return stx_arrowlet_pack_CascadeLift.lift(stx_arrowlet_core_pack_Arrowlet.Anon(function(ipt,cont) {
		switch(ipt._hx_index) {
		case 0:
			var _g = ipt.t;
			switch(_g._hx_index) {
			case 0:
				var l = _g.v;
				return stx_arrowlet_core_pack_ArrowletLift.prepare(self,stx_core_pack_OutcomeSum.Success(l),cont);
			case 1:
				var r = _g.v;
				return stx_arrowlet_core_pack_ArrowletLift.prepare(that,stx_core_pack_OutcomeSum.Success(r),cont);
			}
			break;
		case 1:
			var e = ipt.e;
			return (stx_arrowlet_pack_CascadeLift.typical_fail_handler(cont))(e);
		}
	}));
};
stx_arrowlet_pack_CascadeLift.errata = function(self,fn) {
	return stx_arrowlet_pack_CascadeLift.lift(stx_arrowlet_core_pack_Arrowlet.Anon(function(i,cont) {
		return stx_core_pack_ResLift.fold(i,function(i) {
			return stx_arrowlet_core_pack_ArrowletLift.prepare(stx_arrowlet_core_pack_ArrowletLift.postfix(self,function(o) {
				return stx_core_pack_ResLift.errata(o,fn);
			}),stx_core_use_UseNano.success(stx_core_pack_Wildcard.__,i),cont);
		},stx_arrowlet_pack_CascadeLift.typical_fail_handler(cont));
	}));
};
stx_arrowlet_pack_CascadeLift.reframe = function(self) {
	return stx_arrowlet_pack_Reframe.fromCascade(stx_arrowlet_pack_CascadeLift.lift(stx_arrowlet_core_pack_Arrowlet.Anon(function(ipt,cont) {
		var inner = cont.inner();
		inner.later(function(opt) {
			var tmp = stx_core_pack_OutcomeLift.map(opt,function(res) {
				return stx_core_pack_ResLift.zip(res,ipt);
			});
			cont.issue(tmp);
		});
		var tmp = stx_arrowlet_core_pack_ArrowletLift.prepare(self,ipt,inner);
		cont.after(tmp);
		return cont.serve();
	})));
};
stx_arrowlet_pack_CascadeLift.then = function(self,that) {
	return stx_arrowlet_pack_CascadeLift.lift(stx_arrowlet_core_pack_Arrowlet.Then(self,that));
};
stx_arrowlet_pack_CascadeLift.attempt = function(self,that) {
	return stx_arrowlet_pack_CascadeLift.then(self,stx_arrowlet_pack_Attempt._.toCascade(that));
};
stx_arrowlet_pack_CascadeLift.process = function(self,that) {
	return stx_arrowlet_pack_CascadeLift.then(self,stx_arrowlet_pack_Process.toCascade(that));
};
stx_arrowlet_pack_CascadeLift.postfix = function(self,fn) {
	return stx_arrowlet_pack_CascadeLift.process(self,stx_arrowlet_pack_Process.fromFun1R(fn));
};
stx_arrowlet_pack_CascadeLift.prefix = function(self,fn) {
	return stx_arrowlet_core_pack_ArrowletLift.then(stx_arrowlet_pack_Cascade.fromArrowlet(stx_arrowlet_core_pack_Arrowlet.fromFun1R(fn)),stx_arrowlet_pack_Cascade.toArrowlet(self));
};
stx_arrowlet_pack_CascadeLift.typical_fail_handler = function(cont) {
	return function(e) {
		var tmp = stx_core_use_UseNano.failure(stx_core_pack_Wildcard.__,e);
		stx_arrowlet_core_pack_Terminal.value(cont,tmp);
		return cont.serve();
	};
};
stx_arrowlet_pack_CascadeLift.context = function(self,i,success,failure) {
	return stx_arrowlet_core_pack_Arrowlet.Anon(function(_,cont) {
		var inner = cont.inner();
		inner.later(function(outcome) {
			stx_core_pack_OutcomeLift.fold(outcome,function(res) {
				stx_core_pack_ResLift.fold(res,success,failure);
				stx_arrowlet_core_pack_Terminal.value(cont,tink_core_Noise.Noise);
			},function(_) {
				stx_arrowlet_core_pack_Terminal.error(cont,tink_core_Noise.Noise);
			});
		});
		var tmp = stx_core_use_UseNano.success(stx_core_pack_Wildcard.__,i);
		var tmp1 = stx_arrowlet_core_pack_ArrowletLift.prepare(self,tmp,inner);
		cont.after(tmp1);
		return cont.serve();
	});
};
var stx_arrowlet_pack_Cascade = {};
stx_arrowlet_pack_Cascade._new = function(self) {
	var this1 = self;
	return this1;
};
stx_arrowlet_pack_Cascade.lift = function(self) {
	return stx_arrowlet_pack_Cascade._new(self);
};
stx_arrowlet_pack_Cascade.unit = function() {
	return stx_arrowlet_pack_Cascade.lift(stx_arrowlet_core_pack_Arrowlet.fromFun1R(function(oc) {
		return oc;
	}));
};
stx_arrowlet_pack_Cascade.pure = function(ocO) {
	return stx_arrowlet_pack_Cascade.lift(stx_arrowlet_core_pack_Arrowlet.fromFun1R(function(ocI) {
		return stx_core_pack_ResLift.fold(ocI,function(i) {
			return ocO;
		},function(e) {
			return stx_core_use_UseNano.failure(stx_core_pack_Wildcard.__,e);
		});
	}));
};
stx_arrowlet_pack_Cascade.fromArrowlet = function(arw) {
	return stx_arrowlet_pack_Cascade.lift(stx_arrowlet_core_pack_Arrowlet.Anon(function(i,cont) {
		return stx_core_pack_ResLift.fold(i,function(i) {
			var inner = cont.inner();
			inner.later(function(res) {
				var outer_res = stx_core_pack_OutcomeSum.Success(stx_core_pack_OutcomeLift.fold(res,function(t) {
					return stx_core_use_UseNano.success(stx_core_pack_Wildcard.__,t);
				},function(e) {
					var this1 = stx_core_use_UseNano.fault(stx_core_pack_Wildcard.__,{ fileName : "stx/arrowlet/pack/Cascade.hx", lineNumber : 38, className : "stx.arrowlet.pack._Cascade.Cascade_Impl_", methodName : "fromArrowlet"});
					return stx_core_use_UseNano.failure(stx_core_pack_Wildcard.__,new stx_core_pack_Err(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,stx_core_pack_Failure.ERR_OF(e)),haxe_ds_Option.None,this1));
				}));
				cont.issue(outer_res);
			});
			var tmp = stx_arrowlet_core_pack_ArrowletLift.prepare(arw,i,inner);
			cont.after(tmp);
			return cont.serve();
		},function(e) {
			var tmp = stx_core_use_UseNano.failure(stx_core_pack_Wildcard.__,e);
			stx_arrowlet_core_pack_Terminal.value(cont,tmp);
			return cont.serve();
		});
	}));
};
stx_arrowlet_pack_Cascade.fromAttempt = function(arw) {
	return stx_arrowlet_pack_Cascade.lift(stx_arrowlet_core_pack_Arrowlet.Anon(function(i,cont) {
		return stx_core_pack_ResLift.fold(i,function(i) {
			var inner = cont.inner();
			inner.later(function(res) {
				var tmp = stx_core_pack_OutcomeLift.fold(res,function(t) {
					return stx_core_use_UseNano.success(stx_core_pack_Wildcard.__,t);
				},function(e) {
					var this1 = stx_core_use_UseNano.fault(stx_core_pack_Wildcard.__,{ fileName : "stx/arrowlet/pack/Cascade.hx", lineNumber : 62, className : "stx.arrowlet.pack._Cascade.Cascade_Impl_", methodName : "fromAttempt"});
					return stx_core_use_UseNano.failure(stx_core_pack_Wildcard.__,new stx_core_pack_Err(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,stx_core_pack_Failure.ERR_OF(e)),haxe_ds_Option.None,this1));
				});
				stx_arrowlet_core_pack_Terminal.value(cont,tmp);
			});
			var tmp = stx_arrowlet_core_pack_ArrowletLift.prepare(arw,i,inner);
			cont.after(tmp);
			return cont.serve();
		},stx_arrowlet_pack_Cascade.typical_fail_handler(cont));
	}));
};
stx_arrowlet_pack_Cascade.fromProceed = function(arw) {
	return stx_arrowlet_pack_Cascade.lift(stx_arrowlet_core_pack_Arrowlet.Anon(function(i,cont) {
		return stx_core_pack_ResLift.fold(i,function(_) {
			return stx_arrowlet_core_pack_ArrowletLift.prepare(arw,_,cont);
		},stx_arrowlet_pack_Cascade.typical_fail_handler(cont));
	}));
};
stx_arrowlet_pack_Cascade.typical_fail_handler = function(cont) {
	return function(e) {
		var tmp = stx_core_use_UseNano.failure(stx_core_pack_Wildcard.__,e);
		stx_arrowlet_core_pack_Terminal.value(cont,tmp);
		return cont.serve();
	};
};
stx_arrowlet_pack_Cascade.toArrowlet = function(this1) {
	return this1;
};
var stx_arrowlet_pack_Command = {};
stx_arrowlet_pack_Command._new = function(self) {
	var this1 = self;
	return this1;
};
stx_arrowlet_pack_Command.lift = function(self) {
	return stx_arrowlet_pack_Command._new(self);
};
stx_arrowlet_pack_Command.fromFun1Report = function(fn) {
	return stx_arrowlet_pack_Command.lift(stx_arrowlet_core_pack_Arrowlet.fromFun1R(function(i) {
		return fn(i);
	}));
};
stx_arrowlet_pack_Command.fromFun1Option = function(fn) {
	return stx_arrowlet_pack_Command.lift(stx_arrowlet_core_pack_Arrowlet.fromFun1R(function(i) {
		return stx_core_pack_Report._new(fn(i));
	}));
};
stx_arrowlet_pack_Command.fromArrowlet = function(self) {
	return stx_arrowlet_pack_Command.lift(stx_arrowlet_core_pack_Arrowlet.Anon(function(i,cont) {
		var inner = cont.inner();
		inner.later(function(res) {
			var value = stx_core_pack_Report.lift(stx_core_pack_OutcomeLift.fold(res,function(_) {
				return haxe_ds_Option.None;
			},function(e) {
				var this1 = stx_core_use_UseNano.fault(stx_core_pack_Wildcard.__,{ fileName : "stx/arrowlet/pack/Command.hx", lineNumber : 27, className : "stx.arrowlet.pack._Command.Command_Impl_", methodName : "fromArrowlet"});
				return haxe_ds_Option.Some(new stx_core_pack_Err(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,stx_core_pack_Failure.ERR_OF(e)),haxe_ds_Option.None,this1));
			}));
			stx_arrowlet_core_pack_Terminal.value(cont,value);
		});
		var tmp = stx_arrowlet_core_pack_ArrowletLift.prepare(self,i,inner);
		cont.after(tmp);
		return cont.serve();
	}));
};
stx_arrowlet_pack_Command.fromFun1Execute = function(fn) {
	return stx_arrowlet_pack_Command.lift(stx_arrowlet_core_pack_Arrowlet.Anon(function(i,cont) {
		return stx_arrowlet_pack_ExecuteLift.prepare(fn(i),cont);
	}));
};
stx_arrowlet_pack_Command.toCascade = function(this1) {
	return stx_arrowlet_pack_Cascade.lift(stx_arrowlet_core_pack_Arrowlet.Anon(function(i,cont) {
		return stx_core_pack_ResLift.fold(i,function(i) {
			var inner = cont.inner();
			inner.later(function(res) {
				var value;
				if(res._hx_index == 0) {
					var _g = res.t;
					if(_g._hx_index == 0) {
						var v = _g.v;
						value = stx_core_use_UseNano.failure(stx_core_pack_Wildcard.__,v);
					} else {
						value = stx_core_use_UseNano.success(stx_core_pack_Wildcard.__,i);
					}
				} else {
					value = stx_core_use_UseNano.success(stx_core_pack_Wildcard.__,i);
				}
				stx_arrowlet_core_pack_Terminal.value(cont,value);
			});
			var tmp = stx_arrowlet_core_pack_ArrowletLift.prepare(this1,i,inner);
			cont.after(tmp);
			return cont.serve();
		},function(e) {
			var tmp = stx_core_use_UseNano.failure(stx_core_pack_Wildcard.__,e);
			stx_arrowlet_core_pack_Terminal.value(cont,tmp);
			return cont.serve();
		});
	}));
};
stx_arrowlet_pack_Command.prj = function(this1) {
	return this1;
};
stx_arrowlet_pack_Command.toArrowlet = function(this1) {
	return this1;
};
stx_arrowlet_pack_Command.and = function(this1,that) {
	return stx_arrowlet_pack_Command.lift(stx_arrowlet_core_pack_ArrowletLift.postfix(stx_arrowlet_core_pack_ArrowletLift.split(stx_arrowlet_pack_Command.get_self(this1),stx_arrowlet_pack_Command.toArrowlet(that)),function(tp) {
		return stx_core_pack_Report.merge(stx_core_pack_CoupleLift.fst(tp),stx_core_pack_CoupleLift.snd(tp));
	}));
};
stx_arrowlet_pack_Command.errata = function(this1,fn) {
	return stx_arrowlet_core_pack_ArrowletLift.postfix(stx_arrowlet_pack_Command.get_self(this1),function(report) {
		return stx_core_pack_Report.errata(report,fn);
	});
};
stx_arrowlet_pack_Command.forward = function(this1,i) {
	return stx_arrowlet_pack_Execute.lift(stx_arrowlet_core_pack_Arrowlet.Anon(function(_,cont) {
		return stx_arrowlet_core_pack_ArrowletLift.prepare(this1,i,cont);
	}));
};
stx_arrowlet_pack_Command.get_self = function(this1) {
	return this1;
};
var stx_arrowlet_pack_Execute = {};
stx_arrowlet_pack_Execute._new = function(self) {
	var this1 = self;
	return this1;
};
stx_arrowlet_pack_Execute.lift = function(self) {
	return stx_arrowlet_pack_Execute._new(self);
};
stx_arrowlet_pack_Execute.pure = function(e) {
	return stx_arrowlet_pack_Execute.lift(stx_arrowlet_core_pack_Arrowlet.pure(stx_core_pack_Report.pure(e)));
};
stx_arrowlet_pack_Execute.unit = function() {
	return stx_arrowlet_pack_Execute.lift(stx_arrowlet_core_pack_Arrowlet.pure(stx_core_pack_Report.unit()));
};
stx_arrowlet_pack_Execute.bind_fold = function(fn,arr) {
	return stx_core_pack_ArrayLift.lfold(arr,function(next,memo) {
		return stx_arrowlet_pack_Execute.lift(stx_arrowlet_pack_Provide._.flat_map(stx_arrowlet_pack_Execute.toProvide(memo),function(report) {
			return stx_arrowlet_pack_Execute.lift(fn(next,report));
		}));
	},stx_arrowlet_pack_Execute.unit());
};
stx_arrowlet_pack_Execute.toProvide = function(this1) {
	return this1;
};
stx_arrowlet_pack_Execute.toArrowlet = function(this1) {
	return this1;
};
stx_arrowlet_pack_Execute.fromFunXR = function(fn) {
	return stx_arrowlet_pack_Execute.lift(stx_arrowlet_core_pack_Arrowlet.fromFunXR(fn));
};
stx_arrowlet_pack_Execute.prj = function(this1) {
	return this1;
};
stx_arrowlet_pack_Execute.get_self = function(this1) {
	return stx_arrowlet_pack_Execute.lift(this1);
};
var stx_arrowlet_pack_ExecuteLift = function() { };
stx_arrowlet_pack_ExecuteLift.__name__ = "stx.arrowlet.pack.ExecuteLift";
stx_arrowlet_pack_ExecuteLift.errata = function(self,fn) {
	return stx_arrowlet_pack_Execute.lift(stx_arrowlet_core_pack_ArrowletLift.then(stx_arrowlet_pack_Execute.toArrowlet(self),stx_arrowlet_core_pack_Arrowlet.Sync(function(report) {
		return stx_core_pack_Report.errata(report,fn);
	})));
};
stx_arrowlet_pack_ExecuteLift.prepare = function(self,term) {
	return stx_arrowlet_core_pack_ArrowletLift.prepare(stx_arrowlet_pack_Execute.toArrowlet(self),tink_core_Noise.Noise,term);
};
var stx_arrowlet_pack_ProceedLift = function() { };
stx_arrowlet_pack_ProceedLift.__name__ = "stx.arrowlet.pack.ProceedLift";
stx_arrowlet_pack_ProceedLift.lift = function(self) {
	return stx_arrowlet_pack_Proceed.lift(self);
};
stx_arrowlet_pack_ProceedLift.postfix = function(self,fn) {
	return stx_arrowlet_pack_ProceedLift.lift(stx_arrowlet_core_pack_ArrowletLift.then(self,stx_arrowlet_core_pack_Arrowlet.fromFun1R(function(oc) {
		return stx_core_pack_ResLift.map(oc,fn);
	})));
};
stx_arrowlet_pack_ProceedLift.errata = function(self,fn) {
	return stx_arrowlet_pack_ProceedLift.lift(stx_arrowlet_core_pack_ArrowletLift.then(self,stx_arrowlet_core_pack_Arrowlet.fromFun1R(function(oc) {
		return stx_core_pack_ResLift.errata(oc,fn);
	})));
};
stx_arrowlet_pack_ProceedLift.context = function(self,success,failure) {
	return stx_arrowlet_core_pack_Arrowlet._.context(stx_arrowlet_pack_Proceed.toArrowlet(self),tink_core_Noise.Noise,function(res) {
		stx_core_pack_ResLift.fold(res,success,failure);
	},function(_) {
	});
};
stx_arrowlet_pack_ProceedLift.point = function(self,success) {
	return stx_arrowlet_pack_Execute.lift(stx_arrowlet_core_pack_Arrowlet.Anon(function(_,cont) {
		var inner = cont.inner();
		inner.later(function(outcome) {
			if(outcome._hx_index == 0) {
				var _g = outcome.t;
				switch(_g._hx_index) {
				case 0:
					var o = _g.t;
					stx_arrowlet_pack_ExecuteLift.prepare(success(o),cont);
					break;
				case 1:
					var e = _g.e;
					var tmp = stx_core_pack_Report.pure(e);
					stx_arrowlet_core_pack_Terminal.value(cont,tmp);
					break;
				}
			} else {
				stx_arrowlet_core_pack_Terminal.error(cont,tink_core_Noise.Noise);
			}
		});
		var tmp = stx_arrowlet_pack_ProceedLift.prepare(self,inner);
		cont.after(tmp);
		return cont.serve();
	}));
};
stx_arrowlet_pack_ProceedLift.prepare = function(self,cont) {
	return stx_arrowlet_core_pack_ArrowletLift.prepare(stx_arrowlet_pack_Proceed.toArrowlet(self),tink_core_Noise.Noise,cont);
};
var stx_arrowlet_pack_Proceed = {};
stx_arrowlet_pack_Proceed._new = function(self) {
	var this1 = self;
	return this1;
};
stx_arrowlet_pack_Proceed.lift = function(self) {
	return stx_arrowlet_pack_Proceed._new(self);
};
stx_arrowlet_pack_Proceed.pure = function(v) {
	return stx_arrowlet_pack_Proceed.lift(stx_arrowlet_core_pack_Arrowlet.fromFun1R(function(_) {
		return stx_core_use_UseNano.success(stx_core_pack_Wildcard.__,v);
	}));
};
stx_arrowlet_pack_Proceed.fromRes = function(res) {
	return stx_arrowlet_pack_Proceed.lift(stx_arrowlet_core_pack_Arrowlet.fromFun1R(function(_) {
		return res;
	}));
};
stx_arrowlet_pack_Proceed.fromFunXRes = function(fn) {
	return stx_arrowlet_pack_Proceed.lift(stx_arrowlet_core_pack_Arrowlet.fromFun1R(function(_) {
		return fn();
	}));
};
stx_arrowlet_pack_Proceed.fromFunXR = function(fn) {
	return stx_arrowlet_pack_Proceed.lift(stx_arrowlet_core_pack_Arrowlet.fromFun1R(function(_) {
		return stx_core_use_UseNano.success(stx_core_pack_Wildcard.__,fn());
	}));
};
stx_arrowlet_pack_Proceed.fromArrowlet = function(arw) {
	return stx_arrowlet_pack_Proceed.lift(stx_arrowlet_core_pack_Arrowlet.Anon(function(_,cont) {
		var inner = cont.inner();
		inner.later(function(outcome) {
			var tmp = stx_core_pack_OutcomeLift.fold(outcome,function(t) {
				return stx_core_use_UseNano.success(stx_core_pack_Wildcard.__,t);
			},function(e) {
				var this1 = stx_core_use_UseNano.fault(stx_core_pack_Wildcard.__,{ fileName : "stx/arrowlet/pack/Proceed.hx", lineNumber : 40, className : "stx.arrowlet.pack._Proceed.Proceed_Impl_", methodName : "fromArrowlet"});
				return stx_core_use_UseNano.failure(stx_core_pack_Wildcard.__,new stx_core_pack_Err(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,stx_core_pack_Failure.ERR_OF(e)),haxe_ds_Option.None,this1));
			});
			stx_arrowlet_core_pack_Terminal.value(cont,tmp);
		});
		cont.later(function(c) {
			haxe_Log.trace(c,{ fileName : "stx/arrowlet/pack/Proceed.hx", lineNumber : 46, className : "stx.arrowlet.pack._Proceed.Proceed_Impl_", methodName : "fromArrowlet"});
		});
		var tmp = stx_arrowlet_core_pack_ArrowletLift.prepare(arw,tink_core_Noise.Noise,inner);
		cont.after(tmp);
		return cont.serve();
	}));
};
stx_arrowlet_pack_Proceed.toArrowlet = function(this1) {
	return this1;
};
stx_arrowlet_pack_Proceed.get_self = function(this1) {
	return this1;
};
var stx_arrowlet_pack_Process = {};
stx_arrowlet_pack_Process._new = function(self) {
	var this1 = self;
	return this1;
};
stx_arrowlet_pack_Process.lift = function(self) {
	return stx_arrowlet_pack_Process._new(self);
};
stx_arrowlet_pack_Process.toArrowlet = function(this1) {
	return this1;
};
stx_arrowlet_pack_Process.get_self = function(this1) {
	return stx_arrowlet_pack_Process.lift(this1);
};
stx_arrowlet_pack_Process.toCascade = function(this1) {
	return stx_arrowlet_pack_Cascade.lift(stx_arrowlet_core_pack_Arrowlet.Anon(function(i,cont) {
		return stx_core_pack_ResLift.fold(i,function(i) {
			var inner = cont.inner();
			inner.later(function(outcome) {
				var tmp = stx_core_pack_OutcomeLift.fold(outcome,function(t) {
					return stx_core_use_UseNano.success(stx_core_pack_Wildcard.__,t);
				},function(_) {
					return stx_core_use_UseNano.failure(stx_core_pack_Wildcard.__,new stx_core_pack_Err(haxe_ds_Option.Some(stx_core_pack_Failure.ERR("E_ResourceNotFound")),null,stx_core_use_UseNano.fault(stx_core_pack_Wildcard.__,{ fileName : "stx/arrowlet/pack/Process.hx", lineNumber : 28, className : "stx.arrowlet.pack._Process.Process_Impl_", methodName : "toCascade"})));
				});
				stx_arrowlet_core_pack_Terminal.value(cont,tmp);
			});
			var tmp = stx_arrowlet_core_pack_ArrowletLift.prepare(this1,i,inner);
			cont.after(tmp);
			return cont.serve();
		},function(err) {
			var tmp = stx_core_use_UseNano.failure(stx_core_pack_Wildcard.__,err);
			stx_arrowlet_core_pack_Terminal.value(cont,tmp);
			return cont.serve();
		});
	}));
};
stx_arrowlet_pack_Process.fromFun1R = function(fn) {
	return stx_arrowlet_pack_Process.lift(stx_arrowlet_core_pack_Arrowlet.Anon(function(i,cont) {
		stx_arrowlet_core_pack_Terminal.value(cont,fn(i));
		return cont.serve();
	}));
};
var stx_arrowlet_pack_ProvideLift = function() { };
stx_arrowlet_pack_ProvideLift.__name__ = "stx.arrowlet.pack.ProvideLift";
stx_arrowlet_pack_ProvideLift.flat_map = function(self,fn) {
	return stx_arrowlet_pack_Provide.lift(stx_arrowlet_core_pack_Arrowlet.FlatMap(stx_arrowlet_pack_Provide.toArrowlet(self),fn));
};
var stx_arrowlet_pack_Provide = {};
stx_arrowlet_pack_Provide._new = function(self) {
	var this1 = self;
	return this1;
};
stx_arrowlet_pack_Provide.lift = function(self) {
	return stx_arrowlet_pack_Provide._new(self);
};
stx_arrowlet_pack_Provide.toArrowlet = function(this1) {
	return this1;
};
stx_arrowlet_pack_Provide.get_self = function(this1) {
	return stx_arrowlet_pack_Provide.lift(this1);
};
var stx_arrowlet_pack_Recover = {};
stx_arrowlet_pack_Recover._new = function(self) {
	var this1 = self;
	return this1;
};
stx_arrowlet_pack_Recover.toCascade = function(this1) {
	return stx_arrowlet_pack_Cascade.lift(stx_arrowlet_core_pack_Arrowlet.Anon(function(i,cont) {
		return stx_core_pack_ResLift.fold(i,function(i) {
			var tmp = stx_core_use_UseNano.success(stx_core_pack_Wildcard.__,i);
			stx_arrowlet_core_pack_Terminal.value(cont,tmp);
			return cont.serve();
		},function(e) {
			var inner = cont.inner();
			inner.later(function(res) {
				var tmp = stx_core_pack_OutcomeLift.fold(res,function(i) {
					return stx_core_use_UseNano.success(stx_core_pack_Wildcard.__,i);
				},function(_) {
					return stx_core_use_UseNano.failure(stx_core_pack_Wildcard.__,new stx_core_pack_Err(haxe_ds_Option.Some(stx_core_pack_Failure.ERR("E_ResourceNotFound")),null,stx_core_use_UseNano.fault(stx_core_pack_Wildcard.__,{ fileName : "stx/arrowlet/pack/Recover.hx", lineNumber : 23, className : "stx.arrowlet.pack._Recover.Recover_Impl_", methodName : "toCascade"})));
				});
				stx_arrowlet_core_pack_Terminal.value(cont,tmp);
			});
			var tmp = stx_arrowlet_core_pack_ArrowletLift.prepare(this1,e,inner);
			cont.after(tmp);
			return cont.serve();
		});
	}));
};
stx_arrowlet_pack_Recover.prj = function(this1) {
	return this1;
};
var stx_arrowlet_pack_ReframeLift = function() { };
stx_arrowlet_pack_ReframeLift.__name__ = "stx.arrowlet.pack.ReframeLift";
stx_arrowlet_pack_ReframeLift.lift = function(wml) {
	return stx_arrowlet_pack_Reframe._new(wml);
};
stx_arrowlet_pack_ReframeLift.then = function(self,that) {
	return stx_arrowlet_pack_Cascade.lift(stx_arrowlet_core_pack_Arrowlet.Then(self,that));
};
stx_arrowlet_pack_ReframeLift.attempt = function(self,that) {
	var fn = function(chk) {
		return stx_core_pack_ResLift.flat_map(chk,function(tp) {
			return stx_core_pack_ResLift.map(stx_core_pack_CoupleLift.fst(tp),function(r) {
				return stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,r,stx_core_pack_CoupleLift.snd(tp));
			});
		});
	};
	var arw = stx_arrowlet_pack_ReframeLift.lift(stx_arrowlet_core_pack_ArrowletLift.postfix(stx_arrowlet_pack_CascadeLift.process(stx_arrowlet_pack_Reframe.toCascade(self),stx_arrowlet_pack_Process.lift(stx_arrowlet_core_pack_ArrowletLift.first(stx_arrowlet_pack_Attempt.toArrowlet(that)))),fn));
	return arw;
};
stx_arrowlet_pack_ReframeLift.arrange = function(self,that) {
	var arw = stx_arrowlet_core_pack_ArrowletLift.postfix(stx_arrowlet_core_pack_ArrowletLift.broach(stx_arrowlet_pack_ReframeLift.then(self,stx_arrowlet_pack_Arrange._.toCascade(that))),function(tp) {
		return stx_core_pack_CoupleLift.decouple(stx_core_pack_CoupleLift.swap(tp),stx_core_pack_Res._.zip);
	});
	return stx_arrowlet_pack_Reframe.lift(arw);
};
stx_arrowlet_pack_ReframeLift.rearrange = function(self,that) {
	return stx_arrowlet_pack_Attempt.lift(stx_arrowlet_core_pack_Arrowlet.Anon(function(ipt,contN) {
		var inner = contN.inner();
		inner.later(function(chk) {
			switch(chk._hx_index) {
			case 0:
				var _g = chk.t;
				switch(_g._hx_index) {
				case 0:
					var tp = _g.t;
					var tmp = stx_core_pack_CoupleLift.fst(tp);
					var tmp1 = stx_arrowlet_core_pack_ArrowletLift.prepare(that(tmp),stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,stx_core_pack_CoupleLift.fst(ipt),stx_core_pack_CoupleLift.snd(tp)),contN);
					inner.after(tmp1);
					break;
				case 1:
					var e = _g.e;
					var tmp = stx_core_use_UseNano.failure(stx_core_pack_Wildcard.__,e);
					stx_arrowlet_core_pack_Terminal.value(contN,tmp);
					break;
				}
				break;
			case 1:
				var _g = chk.e;
				stx_arrowlet_core_pack_Terminal.error(contN,tink_core_Noise.Noise);
				break;
			}
		});
		var tmp = stx_core_use_UseNano.success(stx_core_pack_Wildcard.__,stx_core_pack_CoupleLift.snd(ipt));
		var tmp1 = stx_arrowlet_core_pack_ArrowletLift.prepare(self,tmp,inner);
		contN.after(tmp1);
		return contN.serve();
	}));
};
stx_arrowlet_pack_ReframeLift.commander = function(self,fN) {
	return stx_arrowlet_pack_ReframeLift.lift(stx_arrowlet_core_pack_Arrowlet.Anon(function(ipt,contN) {
		var inner = contN.inner();
		inner.later(function(out) {
			if(out._hx_index == 0) {
				var _g = out.t;
				switch(_g._hx_index) {
				case 0:
					var tp = _g.t;
					var tmp = stx_core_pack_CoupleLift.fst(tp);
					var tmp1 = stx_arrowlet_core_pack_ArrowletLift.prepare(stx_arrowlet_core_pack_ArrowletLift.postfix(fN(tmp),function(opt) {
						return stx_core_pack_OptionLift.fold(opt,function(err) {
							return stx_core_use_UseNano.failure(stx_core_pack_Wildcard.__,err);
						},function() {
							return stx_core_use_UseNano.success(stx_core_pack_Wildcard.__,tp);
						});
					}),stx_core_pack_CoupleLift.snd(tp),contN);
					contN.after(tmp1);
					break;
				case 1:
					var e = _g.e;
					var tmp = stx_core_use_UseNano.failure(stx_core_pack_Wildcard.__,e);
					stx_arrowlet_core_pack_Terminal.value(contN,tmp);
					break;
				}
			} else {
				stx_arrowlet_core_pack_Terminal.error(contN,tink_core_Noise.Noise);
			}
		});
		var tmp = stx_arrowlet_core_pack_ArrowletLift.prepare(self,ipt,inner);
		contN.after(tmp);
		return contN.serve();
	}));
};
stx_arrowlet_pack_ReframeLift.evaluation = function(self) {
	return stx_arrowlet_pack_Cascade.lift(stx_arrowlet_core_pack_ArrowletLift.postfix(self,function(o) {
		return stx_core_pack_ResLift.map(o,function(tp) {
			return stx_core_pack_CoupleLift.fst(tp);
		});
	}));
};
stx_arrowlet_pack_ReframeLift.execution = function(self) {
	return stx_arrowlet_pack_Cascade.lift(stx_arrowlet_core_pack_ArrowletLift.postfix(self,function(o) {
		return stx_core_pack_ResLift.map(o,function(tp) {
			return stx_core_pack_CoupleLift.snd(tp);
		});
	}));
};
var stx_arrowlet_pack_Reframe = {};
stx_arrowlet_pack_Reframe._new = function(self) {
	var this1 = self;
	return this1;
};
stx_arrowlet_pack_Reframe.lift = function(wml) {
	return stx_arrowlet_pack_Reframe._new(wml);
};
stx_arrowlet_pack_Reframe.pure = function(o) {
	return stx_arrowlet_pack_Reframe.lift(stx_arrowlet_core_pack_ArrowletLift.postfix(stx_arrowlet_pack_Cascade.unit(),function(oc) {
		var _g = function(tI,tII) {
			return stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,tI,tII);
		};
		var tI = o;
		return stx_core_pack_ResLift.map(oc,function(tII) {
			return _g(tI,tII);
		});
	}));
};
stx_arrowlet_pack_Reframe.get_self = function(this1) {
	return this1;
};
stx_arrowlet_pack_Reframe.toCascade = function(this1) {
	return stx_arrowlet_pack_Cascade.lift(this1);
};
stx_arrowlet_pack_Reframe.fromCascade = function(self) {
	return stx_arrowlet_pack_Reframe.lift(self);
};
var stx_arrowlet_pack_Resolve = {};
stx_arrowlet_pack_Resolve._new = function(self) {
	var this1 = self;
	return this1;
};
stx_arrowlet_pack_Resolve.lift = function(self) {
	return stx_arrowlet_pack_Resolve._new(self);
};
stx_arrowlet_pack_Resolve.toCascade = function(this1) {
	return stx_arrowlet_pack_Cascade.lift(stx_arrowlet_core_pack_ArrowletLift.postfix(stx_arrowlet_core_pack_Arrowlet.lift(this1),function(t) {
		return stx_core_use_UseNano.success(stx_core_pack_Wildcard.__,t);
	}));
};
stx_arrowlet_pack_Resolve.prj = function(this1) {
	return this1;
};
stx_arrowlet_pack_Resolve.toArrowlet = function(this1) {
	return this1;
};
var stx_assert_module_That = function(pos) {
	stx_core_pack_Clazz.call(this);
	this.module = new stx_assert_Module(pos);
};
stx_assert_module_That.__name__ = "stx.assert.module.That";
stx_assert_module_That.__super__ = stx_core_pack_Clazz;
stx_assert_module_That.prototype = $extend(stx_core_pack_Clazz.prototype,{
	module: null
	,equals: function(lhs,rhs) {
		stx_assert_pack_Assertion.crunchII(this.module.equals(),lhs,rhs);
	}
	,alike: function(lhs,rhs) {
		stx_assert_pack_Assertion.crunchII(this.module.alike(),lhs,rhs);
	}
	,gt: function(lhs,rhs) {
		stx_assert_pack_Assertion.crunchII(this.module.gt(),lhs,rhs);
	}
	,gt_eq: function(lhs,rhs) {
		stx_assert_pack_Assertion.crunchII(this.module.gt_eq(),lhs,rhs);
	}
	,lt: function(lhs,rhs) {
		stx_assert_pack_Assertion.crunchII(this.module.lt(),lhs,rhs);
	}
	,lt_eq: function(lhs,rhs) {
		stx_assert_pack_Assertion.crunchII(this.module.lt_eq(),lhs,rhs);
	}
	,always: function(t) {
		var _g = this.module.always().applyI(t);
		if(_g._hx_index == 0) {
			var e = _g.v;
			throw haxe_Exception.thrown(e);
		}
	}
	,never: function(t) {
		var _g = this.module.never().applyI(t);
		if(_g._hx_index == 0) {
			var e = _g.v;
			throw haxe_Exception.thrown(e);
		}
	}
	,is: function(a,clazz) {
		var _g = this.module.is(clazz).applyI(a);
		if(_g._hx_index == 0) {
			var e = _g.v;
			throw haxe_Exception.thrown(e);
		}
	}
	,throws: function(fn) {
		var _g = this.module.throws().applyI(fn);
		if(_g._hx_index == 0) {
			var e = _g.v;
			throw haxe_Exception.thrown(e);
		}
	}
	,'void': function(t) {
		var _g = this.module.void().applyI(t);
		if(_g._hx_index == 0) {
			var e = _g.v;
			throw haxe_Exception.thrown(e);
		}
	}
	,exists: function(t) {
		var _g = this.module.exists().applyI(t);
		if(_g._hx_index == 0) {
			var e = _g.v;
			throw haxe_Exception.thrown(e);
		}
	}
	,matches: function(string,reg,opt) {
		var _g = this.module.matches(reg,opt).applyI(string);
		if(_g._hx_index == 0) {
			var e = _g.v;
			throw haxe_Exception.thrown(e);
		}
	}
	,__class__: stx_assert_module_That
});
var stx_assert_pack_AssertError = function(data,prev,pos) {
	stx_core_pack_Err.call(this,data,prev,pos);
};
stx_assert_pack_AssertError.__name__ = "stx.assert.pack.AssertError";
stx_assert_pack_AssertError.__super__ = stx_core_pack_Err;
stx_assert_pack_AssertError.prototype = $extend(stx_core_pack_Err.prototype,{
	__class__: stx_assert_pack_AssertError
});
var stx_assert_pack_AssertFailure = $hxEnums["stx.assert.pack.AssertFailure"] = { __ename__ : "stx.assert.pack.AssertFailure", __constructs__ : ["PredicateFailed"]
	,PredicateFailed: ($_=function(type,valueN,value0) { return {_hx_index:0,type:type,valueN:valueN,value0:value0,__enum__:"stx.assert.pack.AssertFailure",toString:$estr}; },$_.__params__ = ["type","valueN","value0"],$_)
};
var stx_assert_pack_Assertion = {};
stx_assert_pack_Assertion.crunchII = function(this1,l,r) {
	var _g = this1.applyII(l,r);
	if(_g._hx_index == 0) {
		var e = _g.v;
		throw haxe_Exception.thrown(e);
	}
};
stx_assert_pack_Assertion.ok = function(this1,l,r) {
	return !stx_core_pack_OptionLift.is_defined(this1.applyII(l,r));
};
stx_assert_pack_Assertion.load = function(this1,l) {
	return new stx_assert_pack_predicate_term_AssertionPredicate(this1,l);
};
stx_assert_pack_Assertion.equals = function(pos) {
	return new stx_assert_pack_assertion_term_Equals(pos);
};
stx_assert_pack_Assertion.alike = function(pos) {
	return new stx_assert_pack_assertion_term_Alike(pos);
};
stx_assert_pack_Assertion.gt = function(pos) {
	return new stx_assert_pack_assertion_term_GreaterThan(pos);
};
stx_assert_pack_Assertion.gt_eq = function(pos) {
	return new stx_assert_pack_assertion_term_GreaterThanOrEquals(pos);
};
stx_assert_pack_Assertion.lt = function(pos) {
	return new stx_assert_pack_assertion_term_LessThan(pos);
};
stx_assert_pack_Assertion.lt_eq = function(pos) {
	return new stx_assert_pack_assertion_term_LessThanOrEquals(pos);
};
var stx_assert_pack_Comparable = {};
stx_assert_pack_Comparable._new = function(self) {
	var this1 = self;
	return this1;
};
stx_assert_pack_Comparable.int = function() {
	return new stx_assert_pack_comparable_term_Int();
};
stx_assert_pack_Comparable.string = function() {
	return new stx_assert_pack_comparable_term_String();
};
stx_assert_pack_Comparable.couple = function(l,r) {
	return new stx_assert_pack_comparable_term_Couple(l,r);
};
var stx_assert_pack_Comparative = {};
stx_assert_pack_Comparative._new = function(self) {
	var this1 = self;
	return this1;
};
stx_assert_pack_Comparative.toString = function(this1) {
	switch(this1._hx_index) {
	case 0:
		return ">";
	case 1:
		return ">=";
	case 2:
		return "<";
	case 3:
		return "<=";
	case 4:
		return "==";
	}
};
var stx_assert_pack_Compare = {};
stx_assert_pack_Compare._new = function(self) {
	var this1 = self;
	return this1;
};
stx_assert_pack_Compare.pure = function(v) {
	return stx_assert_pack__$Compare_CompareSum.Value(v);
};
stx_assert_pack_Compare.and = function(this1,that) {
	return stx_assert_pack__$Compare_CompareSum.And(this1,that);
};
stx_assert_pack_Compare.or = function(this1,that) {
	return stx_assert_pack__$Compare_CompareSum.Or(this1,that);
};
stx_assert_pack_Compare.not = function(this1) {
	return stx_assert_pack__$Compare_CompareSum.Not(this1);
};
stx_assert_pack_Compare.gt = function(this1,that) {
	return stx_assert_pack__$Compare_CompareSum.Binop(this1,stx_assert_type_ComparativeSum.GT,that);
};
stx_assert_pack_Compare.gtEq = function(this1,that) {
	return stx_assert_pack__$Compare_CompareSum.Binop(this1,stx_assert_type_ComparativeSum.GTEQ,that);
};
stx_assert_pack_Compare.lt = function(this1,that) {
	return stx_assert_pack__$Compare_CompareSum.Binop(this1,stx_assert_type_ComparativeSum.LT,that);
};
stx_assert_pack_Compare.ltEq = function(this1,that) {
	return stx_assert_pack__$Compare_CompareSum.Binop(this1,stx_assert_type_ComparativeSum.LTEQ,that);
};
stx_assert_pack_Compare.eq = function(this1,that) {
	return stx_assert_pack__$Compare_CompareSum.Binop(this1,stx_assert_type_ComparativeSum.EQ,that);
};
stx_assert_pack_Compare.nEq = function(this1,that) {
	return stx_assert_pack__$Compare_CompareSum.Not(stx_assert_pack__$Compare_CompareSum.Binop(this1,stx_assert_type_ComparativeSum.GTEQ,that));
};
stx_assert_pack_Compare.get_self = function(this1) {
	return this1;
};
var stx_assert_pack__$Compare_CompareSum = $hxEnums["stx.assert.pack._Compare.CompareSum"] = { __ename__ : "stx.assert.pack._Compare.CompareSum", __constructs__ : ["Value","And","Or","Not","Binop"]
	,Value: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"stx.assert.pack._Compare.CompareSum",toString:$estr}; },$_.__params__ = ["v"],$_)
	,And: ($_=function(l,r) { return {_hx_index:1,l:l,r:r,__enum__:"stx.assert.pack._Compare.CompareSum",toString:$estr}; },$_.__params__ = ["l","r"],$_)
	,Or: ($_=function(l,r) { return {_hx_index:2,l:l,r:r,__enum__:"stx.assert.pack._Compare.CompareSum",toString:$estr}; },$_.__params__ = ["l","r"],$_)
	,Not: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"stx.assert.pack._Compare.CompareSum",toString:$estr}; },$_.__params__ = ["e"],$_)
	,Binop: ($_=function(l,op,r) { return {_hx_index:4,l:l,op:op,r:r,__enum__:"stx.assert.pack._Compare.CompareSum",toString:$estr}; },$_.__params__ = ["l","op","r"],$_)
};
var stx_assert_pack_Eq = {};
stx_assert_pack_Eq._new = function(self) {
	var this1 = self;
	return this1;
};
stx_assert_pack_Eq.toAssertion = function(this1,pos) {
	return new stx_assert_pack_eq_term_EqAssertion(this1,pos);
};
stx_assert_pack_Eq.int = function() {
	return new stx_assert_pack_eq_term_Int();
};
stx_assert_pack_Eq.string = function() {
	return new stx_assert_pack_eq_term_String();
};
stx_assert_pack_Eq.couple = function(l,r) {
	return new stx_assert_pack_eq_term_Couple(l,r);
};
var stx_assert_pack_Equal = function() { };
stx_assert_pack_Equal.__name__ = "stx.assert.pack.Equal";
stx_assert_pack_Equal.getEqualFor = function(v) {
	return stx_assert_pack_Equal.getEqualForType(Type.typeof(v));
};
stx_assert_pack_Equal.getEqualForType = function(v) {
	var tmp;
	switch(v._hx_index) {
	case 0:
		tmp = new stx_assert_pack_eq_term_Null();
		break;
	case 1:
		tmp = new stx_assert_pack_eq_term_Int();
		break;
	case 2:
		tmp = new stx_assert_pack_eq_term_Float();
		break;
	case 3:
		tmp = new stx_assert_pack_eq_term_Bool();
		break;
	case 4:
		tmp = new stx_assert_pack_eq_term_Object();
		break;
	case 5:
		tmp = new stx_assert_pack_eq_term_Function();
		break;
	case 6:
		var _g = v.c;
		var c = _g;
		if(c == haxe_ds_StringMap) {
			tmp = new stx_assert_pack_eq_term_Map(new stx_assert_pack_eq_term_Deferred());
		} else {
			var c = _g;
			if(c == stx_assert_pack_eq_term_Array) {
				tmp = new stx_assert_pack_eq_term_Array(new stx_assert_pack_eq_term_Deferred());
			} else {
				var c = _g;
				if(c == stx_assert_pack_eq_term_Date) {
					tmp = new stx_assert_pack_eq_term_Date();
				} else {
					var c = _g;
					if(c == stx_assert_pack_eq_term_String) {
						tmp = new stx_assert_pack_eq_term_String();
					} else {
						var c = _g;
						tmp = HxOverrides.remove(Type.getInstanceFields(c),"equals") ? new stx_assert_pack_eq_term_HasFunction().elide() : new stx_assert_pack_eq_term_UnsupportedClass();
					}
				}
			}
		}
		break;
	case 7:
		var _g = v.e;
		tmp = new stx_assert_pack_eq_term_Enum();
		break;
	case 8:
		tmp = new stx_assert_pack_eq_term_Unknown();
		break;
	}
	return new stx_assert_pack_eq_term_NotNull(tmp);
};
var stx_assert_pack_Equalable = {};
stx_assert_pack_Equalable._new = function(self) {
	var this1 = self;
	return this1;
};
var stx_assert_pack_Equaled = {};
stx_assert_pack_Equaled.fromBool = function(b) {
	if(b) {
		return stx_assert_pack_Equaled.AreEqual;
	} else {
		return stx_assert_pack_Equaled.NotEqual;
	}
};
stx_assert_pack_Equaled.and = function(this1,that) {
	return stx_assert_pack_Equaled.fromBool(stx_assert_pack_Equaled.toBool(this1) && stx_assert_pack_Equaled.toBool(that));
};
stx_assert_pack_Equaled.toBool = function(this1) {
	if(this1) {
		return true;
	} else {
		return false;
	}
};
stx_assert_pack_Equaled.or = function(this1,that) {
	return stx_assert_pack_Equaled.fromBool(stx_assert_pack_Equaled.toBool(this1) || stx_assert_pack_Equaled.toBool(that));
};
stx_assert_pack_Equaled.not = function(this1) {
	if(this1) {
		return false;
	} else {
		return true;
	}
};
var stx_assert_pack_Ord = {};
stx_assert_pack_Ord._new = function(self) {
	var this1 = self;
	return this1;
};
stx_assert_pack_Ord.toAssertion = function(this1) {
	return new stx_assert_pack_ord_term_OrdAssertion(this1,{ fileName : "stx/assert/pack/Ord.hx", lineNumber : 13, className : "stx.assert.pack._Ord.Ord_Impl_", methodName : "toAssertion"}).asAssertionApi();
};
stx_assert_pack_Ord.int = function() {
	return new stx_assert_pack_ord_term_Int();
};
stx_assert_pack_Ord.string = function() {
	return new stx_assert_pack_ord_term_String();
};
stx_assert_pack_Ord.couple = function(l,r) {
	return new stx_assert_pack_ord_term_Couple(l,r);
};
var stx_assert_pack_Orderable = {};
stx_assert_pack_Orderable._new = function(self) {
	var this1 = self;
	return this1;
};
var stx_assert_pack_Ordered = {};
stx_assert_pack_Ordered._new = function(self) {
	var this1 = self;
	return this1;
};
stx_assert_pack_Ordered.fromBool = function(b) {
	if(b) {
		return true;
	} else {
		return false;
	}
};
stx_assert_pack_Ordered.toBool = function(this1) {
	if(this1) {
		return true;
	} else {
		return false;
	}
};
stx_assert_pack_Ordered.or = function(this1,that) {
	return stx_assert_pack_Ordered.fromBool(stx_assert_pack_Ordered.toBool(this1) || stx_assert_pack_Ordered.toBool(that));
};
stx_assert_pack_Ordered.not = function(this1) {
	if(this1) {
		return false;
	} else {
		return true;
	}
};
stx_assert_pack_Ordered.and = function(this1,that) {
	return stx_assert_pack_Ordered.fromBool(stx_assert_pack_Ordered.toBool(this1) && stx_assert_pack_Ordered.toBool(that));
};
var stx_assert_pack_Predicate = {};
stx_assert_pack_Predicate._new = function(v) {
	var this1 = v;
	return this1;
};
stx_assert_pack_Predicate.unit = function() {
	return new stx_assert_pack_predicate_term_Always({ fileName : "stx/assert/pack/Predicate.hx", lineNumber : 11, className : "stx.assert.pack._Predicate.Predicate_Impl_", methodName : "unit"});
};
stx_assert_pack_Predicate.always = function(pos) {
	return new stx_assert_pack_predicate_term_Always({ fileName : "stx/assert/pack/Predicate.hx", lineNumber : 13, className : "stx.assert.pack._Predicate.Predicate_Impl_", methodName : "always"});
};
stx_assert_pack_Predicate.never = function(pos) {
	return new stx_assert_pack_predicate_term_Never(pos);
};
stx_assert_pack_Predicate.is = function(pos,clazz) {
	return new stx_assert_pack_predicate_term_Is(clazz,pos);
};
stx_assert_pack_Predicate.throws = function(pos) {
	return new stx_assert_pack_predicate_term_Throws(pos);
};
stx_assert_pack_Predicate.void = function(pos) {
	return new stx_assert_pack_predicate_term_Void(pos);
};
stx_assert_pack_Predicate.exists = function(pos) {
	return new stx_assert_pack_predicate_term_Exists(pos);
};
stx_assert_pack_Predicate.matches = function(pos,reg,opt) {
	return new stx_assert_pack_predicate_term_Matches(pos,reg,opt,{ fileName : "stx/assert/pack/Predicate.hx", lineNumber : 31, className : "stx.assert.pack._Predicate.Predicate_Impl_", methodName : "matches"});
};
stx_assert_pack_Predicate.ordef = function(this1,l,r) {
	if(stx_core_pack_OptionLift.is_defined(this1.applyI(l))) {
		return r;
	} else {
		return l;
	}
};
stx_assert_pack_Predicate.fudge = function(this1,v) {
	var _g = this1.applyI(v);
	switch(_g._hx_index) {
	case 0:
		var v1 = _g.v;
		throw haxe_Exception.thrown(v1);
	case 1:
		return v;
	}
};
stx_assert_pack_Predicate.bindI = function(this1,v) {
	var _g = $bind(this1,this1.applyI);
	var p = v;
	return function() {
		return _g(p);
	};
};
stx_assert_pack_Predicate.check = function(this1) {
	return function(x) {
		return this1.applyI(x) == haxe_ds_Option.None;
	};
};
stx_assert_pack_Predicate.crunch = function(this1,v) {
	var _g = this1.applyI(v);
	if(_g._hx_index == 0) {
		var e = _g.v;
		throw haxe_Exception.thrown(e);
	}
};
var stx_assert_type_AssertionApi = function() { };
stx_assert_type_AssertionApi.__name__ = "stx.assert.type.AssertionApi";
stx_assert_type_AssertionApi.__isInterface__ = true;
stx_assert_type_AssertionApi.__interfaces__ = [stx_fn_type_App2R];
stx_assert_type_AssertionApi.prototype = {
	asAssertionApi: null
	,__class__: stx_assert_type_AssertionApi
};
var stx_assert_pack_assertion_term_Base = function(pos) {
	stx_core_pack_Clazz.call(this);
	this.pos = pos;
};
stx_assert_pack_assertion_term_Base.__name__ = "stx.assert.pack.assertion.term.Base";
stx_assert_pack_assertion_term_Base.__interfaces__ = [stx_assert_type_AssertionApi];
stx_assert_pack_assertion_term_Base.__super__ = stx_core_pack_Clazz;
stx_assert_pack_assertion_term_Base.prototype = $extend(stx_core_pack_Clazz.prototype,{
	pos: null
	,applyII: function(a,b) {
		return stx_core_pack_Report.unit();
	}
	,error: function(l,r,pos) {
		var this1 = stx_core_use_UseNano.fault(stx_core_pack_Wildcard.__,pos);
		return new stx_core_pack_Err(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,stx_core_pack_Failure.ERR_OF(stx_assert_pack_AssertFailure.PredicateFailed(js_Boot.getClass(this),l,r))),haxe_ds_Option.None,this1);
	}
	,asAssertionApi: function() {
		return this;
	}
	,__class__: stx_assert_pack_assertion_term_Base
});
var stx_assert_pack_assertion_term_Alike = function(pos) {
	stx_assert_pack_assertion_term_Base.call(this,pos);
};
stx_assert_pack_assertion_term_Alike.__name__ = "stx.assert.pack.assertion.term.Alike";
stx_assert_pack_assertion_term_Alike.__super__ = stx_assert_pack_assertion_term_Base;
stx_assert_pack_assertion_term_Alike.prototype = $extend(stx_assert_pack_assertion_term_Base.prototype,{
	applyII: function(a,b) {
		return stx_LiftAssert.report(a._hx_index == b._hx_index,this.error(null,null,{ fileName : "stx/assert/pack/assertion/term/Alike.hx", lineNumber : 8, className : "stx.assert.pack.assertion.term.Alike", methodName : "applyII"}));
	}
	,__class__: stx_assert_pack_assertion_term_Alike
});
var stx_assert_pack_assertion_term_Equals = function(pos) {
	stx_assert_pack_assertion_term_Base.call(this,pos);
};
stx_assert_pack_assertion_term_Equals.__name__ = "stx.assert.pack.assertion.term.Equals";
stx_assert_pack_assertion_term_Equals.__super__ = stx_assert_pack_assertion_term_Base;
stx_assert_pack_assertion_term_Equals.prototype = $extend(stx_assert_pack_assertion_term_Base.prototype,{
	applyII: function(a,b) {
		return stx_LiftAssert.report(a != b,this.error(null,null,{ fileName : "stx/assert/pack/assertion/term/Equals.hx", lineNumber : 9, className : "stx.assert.pack.assertion.term.Equals", methodName : "applyII"}));
	}
	,__class__: stx_assert_pack_assertion_term_Equals
});
var stx_assert_pack_assertion_term_GreaterThan = function(pos) {
	stx_assert_pack_assertion_term_Base.call(this,pos);
};
stx_assert_pack_assertion_term_GreaterThan.__name__ = "stx.assert.pack.assertion.term.GreaterThan";
stx_assert_pack_assertion_term_GreaterThan.__super__ = stx_assert_pack_assertion_term_Base;
stx_assert_pack_assertion_term_GreaterThan.prototype = $extend(stx_assert_pack_assertion_term_Base.prototype,{
	applyII: function(a,b) {
		var l = a;
		var r = b;
		return stx_LiftAssert.report(l > r,this.error(null,null,{ fileName : "stx/assert/pack/assertion/term/GreaterThan.hx", lineNumber : 11, className : "stx.assert.pack.assertion.term.GreaterThan", methodName : "applyII"}));
	}
	,__class__: stx_assert_pack_assertion_term_GreaterThan
});
var stx_assert_pack_assertion_term_GreaterThanOrEquals = function(pos) {
	stx_assert_pack_assertion_term_Base.call(this,pos);
};
stx_assert_pack_assertion_term_GreaterThanOrEquals.__name__ = "stx.assert.pack.assertion.term.GreaterThanOrEquals";
stx_assert_pack_assertion_term_GreaterThanOrEquals.__super__ = stx_assert_pack_assertion_term_Base;
stx_assert_pack_assertion_term_GreaterThanOrEquals.prototype = $extend(stx_assert_pack_assertion_term_Base.prototype,{
	applyII: function(a,b) {
		var l = a;
		var r = b;
		return stx_LiftAssert.report(l >= r,this.error(null,null,{ fileName : "stx/assert/pack/assertion/term/GreaterThanOrEquals.hx", lineNumber : 11, className : "stx.assert.pack.assertion.term.GreaterThanOrEquals", methodName : "applyII"}));
	}
	,__class__: stx_assert_pack_assertion_term_GreaterThanOrEquals
});
var stx_assert_pack_assertion_term_LessThan = function(pos) {
	stx_assert_pack_assertion_term_Base.call(this,pos);
};
stx_assert_pack_assertion_term_LessThan.__name__ = "stx.assert.pack.assertion.term.LessThan";
stx_assert_pack_assertion_term_LessThan.__super__ = stx_assert_pack_assertion_term_Base;
stx_assert_pack_assertion_term_LessThan.prototype = $extend(stx_assert_pack_assertion_term_Base.prototype,{
	applyII: function(a,b) {
		var l = a;
		var r = b;
		return stx_LiftAssert.report(l < r,this.error(null,null,{ fileName : "stx/assert/pack/assertion/term/LessThan.hx", lineNumber : 10, className : "stx.assert.pack.assertion.term.LessThan", methodName : "applyII"}));
	}
	,__class__: stx_assert_pack_assertion_term_LessThan
});
var stx_assert_pack_assertion_term_LessThanOrEquals = function(pos) {
	stx_assert_pack_assertion_term_Base.call(this,pos);
};
stx_assert_pack_assertion_term_LessThanOrEquals.__name__ = "stx.assert.pack.assertion.term.LessThanOrEquals";
stx_assert_pack_assertion_term_LessThanOrEquals.__super__ = stx_assert_pack_assertion_term_Base;
stx_assert_pack_assertion_term_LessThanOrEquals.prototype = $extend(stx_assert_pack_assertion_term_Base.prototype,{
	applyII: function(a,b) {
		var l = a;
		var r = b;
		return stx_LiftAssert.report(l <= r,this.error(null,null,{ fileName : "stx/assert/pack/assertion/term/LessThanOrEquals.hx", lineNumber : 10, className : "stx.assert.pack.assertion.term.LessThanOrEquals", methodName : "applyII"}));
	}
	,__class__: stx_assert_pack_assertion_term_LessThanOrEquals
});
var stx_assert_type_OrderableApi = function() { };
stx_assert_type_OrderableApi.__name__ = "stx.assert.type.OrderableApi";
stx_assert_type_OrderableApi.__isInterface__ = true;
stx_assert_type_OrderableApi.prototype = {
	lt: null
	,__class__: stx_assert_type_OrderableApi
};
var stx_assert_type_EqualableApi = function() { };
stx_assert_type_EqualableApi.__name__ = "stx.assert.type.EqualableApi";
stx_assert_type_EqualableApi.__isInterface__ = true;
stx_assert_type_EqualableApi.prototype = {
	eq: null
	,__class__: stx_assert_type_EqualableApi
};
var stx_assert_type_ComparableApi = function() { };
stx_assert_type_ComparableApi.__name__ = "stx.assert.type.ComparableApi";
stx_assert_type_ComparableApi.__isInterface__ = true;
stx_assert_type_ComparableApi.__interfaces__ = [stx_assert_type_OrderableApi,stx_assert_type_EqualableApi];
var stx_assert_pack_comparable_term_Base = function(_eq,_ord) {
	this._eq = _eq;
	this._lt = _ord;
};
stx_assert_pack_comparable_term_Base.__name__ = "stx.assert.pack.comparable.term.Base";
stx_assert_pack_comparable_term_Base.__interfaces__ = [stx_assert_type_ComparableApi];
stx_assert_pack_comparable_term_Base.prototype = {
	_eq: null
	,_lt: null
	,eq: function() {
		return this._eq;
	}
	,lt: function() {
		return this._lt;
	}
	,__class__: stx_assert_pack_comparable_term_Base
};
var stx_assert_pack_comparable_term_Couple = function(l,r) {
	this.l = l;
	this.r = r;
};
stx_assert_pack_comparable_term_Couple.__name__ = "stx.assert.pack.comparable.term.Couple";
stx_assert_pack_comparable_term_Couple.__interfaces__ = [stx_assert_type_ComparableApi];
stx_assert_pack_comparable_term_Couple.prototype = {
	l: null
	,r: null
	,eq: function() {
		return stx_assert_pack_Eq.couple(this.l.eq(),this.r.eq());
	}
	,lt: function() {
		return stx_assert_pack_Ord.couple(this.l.lt(),this.r.lt());
	}
	,__class__: stx_assert_pack_comparable_term_Couple
};
var stx_assert_pack_comparable_term_Int = function() {
	stx_core_pack_Clazz.call(this);
};
stx_assert_pack_comparable_term_Int.__name__ = "stx.assert.pack.comparable.term.Int";
stx_assert_pack_comparable_term_Int.__interfaces__ = [stx_assert_type_ComparableApi];
stx_assert_pack_comparable_term_Int.__super__ = stx_core_pack_Clazz;
stx_assert_pack_comparable_term_Int.prototype = $extend(stx_core_pack_Clazz.prototype,{
	eq: function() {
		return stx_assert_pack_Eq.int();
	}
	,lt: function() {
		return stx_assert_pack_Ord.int();
	}
	,__class__: stx_assert_pack_comparable_term_Int
});
var stx_assert_pack_comparable_term_String = function() {
	stx_core_pack_Clazz.call(this);
};
stx_assert_pack_comparable_term_String.__name__ = "stx.assert.pack.comparable.term.String";
stx_assert_pack_comparable_term_String.__interfaces__ = [stx_assert_type_ComparableApi];
stx_assert_pack_comparable_term_String.__super__ = stx_core_pack_Clazz;
stx_assert_pack_comparable_term_String.prototype = $extend(stx_core_pack_Clazz.prototype,{
	eq: function() {
		return stx_assert_pack_Eq.string();
	}
	,lt: function() {
		return stx_assert_pack_Ord.string();
	}
	,__class__: stx_assert_pack_comparable_term_String
});
var stx_assert_type_EqApi = function() { };
stx_assert_type_EqApi.__name__ = "stx.assert.type.EqApi";
stx_assert_type_EqApi.__isInterface__ = true;
stx_assert_type_EqApi.__interfaces__ = [stx_fn_type_App2R];
var stx_assert_pack_eq_term_Array = function(eq) {
	this.eq = eq;
};
stx_assert_pack_eq_term_Array.__name__ = "stx.assert.pack.eq.term.Array";
stx_assert_pack_eq_term_Array.__interfaces__ = [stx_assert_type_EqApi];
stx_assert_pack_eq_term_Array.prototype = {
	eq: null
	,applyII: function(a,b) {
		var ok = true;
		if(a.length != b.length) {
			return false;
		}
		var _g = 0;
		var _g1 = a.length - 1;
		while(_g < _g1) {
			var i = _g++;
			var lhs = a[i];
			var rhs = b[i];
			ok = this.eq.applyII(lhs,rhs);
			if(!stx_assert_type_EqualedSum.ok(ok)) {
				break;
			}
		}
		return ok;
	}
	,__class__: stx_assert_pack_eq_term_Array
};
var stx_assert_pack_eq_term_Bool = function() {
	stx_core_pack_Clazz.call(this);
};
stx_assert_pack_eq_term_Bool.__name__ = "stx.assert.pack.eq.term.Bool";
stx_assert_pack_eq_term_Bool.__interfaces__ = [stx_assert_type_EqApi];
stx_assert_pack_eq_term_Bool.__super__ = stx_core_pack_Clazz;
stx_assert_pack_eq_term_Bool.prototype = $extend(stx_core_pack_Clazz.prototype,{
	applyII: function(a,b) {
		if(a == b) {
			return true;
		} else {
			return false;
		}
	}
	,__class__: stx_assert_pack_eq_term_Bool
});
var stx_assert_pack_eq_term_Couple = function(l,r) {
	this.l = l;
	this.r = r;
};
stx_assert_pack_eq_term_Couple.__name__ = "stx.assert.pack.eq.term.Couple";
stx_assert_pack_eq_term_Couple.__interfaces__ = [stx_assert_type_EqApi];
stx_assert_pack_eq_term_Couple.prototype = {
	l: null
	,r: null
	,applyII: function(a,b) {
		var _gthis = this;
		return stx_core_pack_CoupleLift.decouple(a,function(l0,r0) {
			return stx_core_pack_CoupleLift.decouple(b,function(l1,r1) {
				return stx_assert_pack_Equaled.and(_gthis.l.applyII(l0,l1),_gthis.r.applyII(r0,r1));
			});
		});
	}
	,__class__: stx_assert_pack_eq_term_Couple
};
var stx_assert_pack_eq_term_Date = function() {
	stx_core_pack_Clazz.call(this);
};
stx_assert_pack_eq_term_Date.__name__ = "stx.assert.pack.eq.term.Date";
stx_assert_pack_eq_term_Date.__interfaces__ = [stx_assert_type_EqApi];
stx_assert_pack_eq_term_Date.__super__ = stx_core_pack_Clazz;
stx_assert_pack_eq_term_Date.prototype = $extend(stx_core_pack_Clazz.prototype,{
	applyII: function(a,b) {
		if(a.getTime() == b.getTime()) {
			return true;
		} else {
			return false;
		}
	}
	,__class__: stx_assert_pack_eq_term_Date
});
var stx_assert_pack_eq_term_Deferred = function() {
};
stx_assert_pack_eq_term_Deferred.__name__ = "stx.assert.pack.eq.term.Deferred";
stx_assert_pack_eq_term_Deferred.__interfaces__ = [stx_assert_type_EqApi];
stx_assert_pack_eq_term_Deferred.prototype = {
	eq: null
	,applyII: function(a,b) {
		if(this.eq == null) {
			if(a == null) {
				this.eq = stx_assert_pack_Equal.getEqualFor(a);
			} else {
				this.eq = stx_assert_pack_Equal.getEqualFor(b);
			}
		}
		return this.eq.applyII(a,b);
	}
	,__class__: stx_assert_pack_eq_term_Deferred
};
var stx_assert_pack_eq_term_Enum = function() {
	stx_core_pack_Clazz.call(this);
};
stx_assert_pack_eq_term_Enum.__name__ = "stx.assert.pack.eq.term.Enum";
stx_assert_pack_eq_term_Enum.__interfaces__ = [stx_assert_type_EqApi];
stx_assert_pack_eq_term_Enum.__super__ = stx_core_pack_Clazz;
stx_assert_pack_eq_term_Enum.prototype = $extend(stx_core_pack_Clazz.prototype,{
	applyII: function(a,b) {
		if(0 != a._hx_index - b._hx_index) {
			return false;
		} else {
			var pa = Type.enumParameters(a);
			var pb = Type.enumParameters(b);
			var b = true;
			var _g = 0;
			var _g1 = pa.length;
			while(_g < _g1) {
				var i = _g++;
				if(!stx_assert_type_EqualedSum.ok(stx_assert_pack_Equal.getEqualFor(pa[i]).applyII(a[i],pb[i]))) {
					b = false;
					break;
				}
			}
			return b;
		}
	}
	,__class__: stx_assert_pack_eq_term_Enum
});
var stx_assert_pack_eq_term_EqAssertion = function(eq,pos) {
	stx_assert_pack_assertion_term_Base.call(this,pos);
	this.eq = eq;
};
stx_assert_pack_eq_term_EqAssertion.__name__ = "stx.assert.pack.eq.term.EqAssertion";
stx_assert_pack_eq_term_EqAssertion.__super__ = stx_assert_pack_assertion_term_Base;
stx_assert_pack_eq_term_EqAssertion.prototype = $extend(stx_assert_pack_assertion_term_Base.prototype,{
	eq: null
	,applyII: function(a,b) {
		var tmp = stx_assert_pack_Equaled.toBool(this.eq.applyII(a,b));
		var this1 = stx_core_use_UseNano.fault(stx_core_pack_Wildcard.__,this.pos);
		return stx_LiftAssert.report(tmp,new stx_core_pack_Err(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,stx_core_pack_Failure.ERR_OF(stx_assert_pack_AssertFailure.PredicateFailed(js_Boot.getClass(this),a,b))),haxe_ds_Option.None,this1));
	}
	,__class__: stx_assert_pack_eq_term_EqAssertion
});
var stx_assert_pack_eq_term_Float = function() {
	stx_core_pack_Clazz.call(this);
};
stx_assert_pack_eq_term_Float.__name__ = "stx.assert.pack.eq.term.Float";
stx_assert_pack_eq_term_Float.__interfaces__ = [stx_assert_type_EqApi];
stx_assert_pack_eq_term_Float.__super__ = stx_core_pack_Clazz;
stx_assert_pack_eq_term_Float.prototype = $extend(stx_core_pack_Clazz.prototype,{
	applyII: function(a,b) {
		if(a == b) {
			return true;
		} else {
			return false;
		}
	}
	,__class__: stx_assert_pack_eq_term_Float
});
var stx_assert_pack_eq_term_Function = function() {
	stx_core_pack_Clazz.call(this);
};
stx_assert_pack_eq_term_Function.__name__ = "stx.assert.pack.eq.term.Function";
stx_assert_pack_eq_term_Function.__interfaces__ = [stx_assert_type_EqApi];
stx_assert_pack_eq_term_Function.__super__ = stx_core_pack_Clazz;
stx_assert_pack_eq_term_Function.prototype = $extend(stx_core_pack_Clazz.prototype,{
	applyII: function(a,b) {
		if(Reflect.compareMethods(a,b)) {
			return true;
		} else {
			return false;
		}
	}
	,__class__: stx_assert_pack_eq_term_Function
});
var stx_assert_pack_eq_term_HasFunction = function() {
	stx_core_pack_Clazz.call(this);
};
stx_assert_pack_eq_term_HasFunction.__name__ = "stx.assert.pack.eq.term.HasFunction";
stx_assert_pack_eq_term_HasFunction.__interfaces__ = [stx_assert_type_EqApi];
stx_assert_pack_eq_term_HasFunction.__super__ = stx_core_pack_Clazz;
stx_assert_pack_eq_term_HasFunction.prototype = $extend(stx_core_pack_Clazz.prototype,{
	applyII: function(a,b) {
		if(a.equals(b)) {
			return true;
		} else {
			return false;
		}
	}
	,elide: function() {
		return this;
	}
	,__class__: stx_assert_pack_eq_term_HasFunction
});
var stx_assert_pack_eq_term_Int = function() {
	stx_core_pack_Clazz.call(this);
};
stx_assert_pack_eq_term_Int.__name__ = "stx.assert.pack.eq.term.Int";
stx_assert_pack_eq_term_Int.__interfaces__ = [stx_assert_type_EqApi];
stx_assert_pack_eq_term_Int.__super__ = stx_core_pack_Clazz;
stx_assert_pack_eq_term_Int.prototype = $extend(stx_core_pack_Clazz.prototype,{
	applyII: function(a,b) {
		if(a == b) {
			return true;
		} else {
			return false;
		}
	}
	,__class__: stx_assert_pack_eq_term_Int
});
var stx_assert_pack_eq_term_Map = function(eq) {
	this.eq = eq;
};
stx_assert_pack_eq_term_Map.__name__ = "stx.assert.pack.eq.term.Map";
stx_assert_pack_eq_term_Map.__interfaces__ = [stx_assert_type_EqApi];
stx_assert_pack_eq_term_Map.prototype = {
	eq: null
	,applyII: function(a,b) {
		var ok = true;
		var _g = a.keyValueIterator();
		while(_g.hasNext()) {
			var _g1 = _g.next();
			var key = _g1.key;
			var val = _g1.value;
			if(!b.exists(key)) {
				break;
			}
			ok = stx_assert_pack_Equaled.toBool(this.eq.applyII(val,b.get(key)));
			if(!ok) {
				break;
			}
		}
		var _g = b.keyValueIterator();
		while(_g.hasNext()) {
			var _g1 = _g.next();
			var key = _g1.key;
			var val = _g1.value;
			if(!a.exists(key)) {
				break;
			}
		}
		if(ok) {
			return true;
		} else {
			return false;
		}
	}
	,__class__: stx_assert_pack_eq_term_Map
};
var stx_assert_pack_eq_term_NotNull = function(eq) {
	this.eq = eq;
};
stx_assert_pack_eq_term_NotNull.__name__ = "stx.assert.pack.eq.term.NotNull";
stx_assert_pack_eq_term_NotNull.__interfaces__ = [stx_assert_type_EqApi];
stx_assert_pack_eq_term_NotNull.prototype = {
	eq: null
	,applyII: function(a,b) {
		if(a == null) {
			if(b == null) {
				return true;
			} else {
				return false;
			}
		} else if(b == null) {
			return false;
		} else {
			return this.eq.applyII(a,b);
		}
	}
	,__class__: stx_assert_pack_eq_term_NotNull
};
var stx_assert_pack_eq_term_Null = function() {
	stx_core_pack_Clazz.call(this);
};
stx_assert_pack_eq_term_Null.__name__ = "stx.assert.pack.eq.term.Null";
stx_assert_pack_eq_term_Null.__interfaces__ = [stx_assert_type_EqApi];
stx_assert_pack_eq_term_Null.__super__ = stx_core_pack_Clazz;
stx_assert_pack_eq_term_Null.prototype = $extend(stx_core_pack_Clazz.prototype,{
	applyII: function(a,b) {
		if(a == null && b == null) {
			return true;
		} else {
			return false;
		}
	}
	,__class__: stx_assert_pack_eq_term_Null
});
var stx_assert_pack_eq_term_Object = function() {
	stx_core_pack_Clazz.call(this);
};
stx_assert_pack_eq_term_Object.__name__ = "stx.assert.pack.eq.term.Object";
stx_assert_pack_eq_term_Object.__interfaces__ = [stx_assert_type_EqApi];
stx_assert_pack_eq_term_Object.__super__ = stx_core_pack_Clazz;
stx_assert_pack_eq_term_Object.prototype = $extend(stx_core_pack_Clazz.prototype,{
	applyII: function(a,b) {
		var o = true;
		var _g = 0;
		var _g1 = Reflect.fields(a);
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			var va = Reflect.field(a,key);
			if(!stx_assert_type_EqualedSum.ok(stx_assert_pack_Equal.getEqualFor(va).applyII(va,Reflect.field(b,key)))) {
				o = false;
				break;
			}
		}
		return o;
	}
	,__class__: stx_assert_pack_eq_term_Object
});
var stx_assert_pack_eq_term_String = function() {
	stx_core_pack_Clazz.call(this);
};
stx_assert_pack_eq_term_String.__name__ = "stx.assert.pack.eq.term.String";
stx_assert_pack_eq_term_String.__interfaces__ = [stx_assert_type_EqApi];
stx_assert_pack_eq_term_String.__super__ = stx_core_pack_Clazz;
stx_assert_pack_eq_term_String.prototype = $extend(stx_core_pack_Clazz.prototype,{
	applyII: function(a,b) {
		if(a == b) {
			return true;
		} else {
			return false;
		}
	}
	,__class__: stx_assert_pack_eq_term_String
});
var stx_assert_pack_eq_term_Unknown = function() {
	stx_core_pack_Clazz.call(this);
};
stx_assert_pack_eq_term_Unknown.__name__ = "stx.assert.pack.eq.term.Unknown";
stx_assert_pack_eq_term_Unknown.__interfaces__ = [stx_assert_type_EqApi];
stx_assert_pack_eq_term_Unknown.__super__ = stx_core_pack_Clazz;
stx_assert_pack_eq_term_Unknown.prototype = $extend(stx_core_pack_Clazz.prototype,{
	applyII: function(a,b) {
		if(Object.prototype.hasOwnProperty.call(a,"equals")) {
			return new stx_assert_pack_eq_term_HasFunction().applyII(a,b);
		} else {
			return new stx_assert_pack_eq_term_Object().applyII(a,b);
		}
	}
	,__class__: stx_assert_pack_eq_term_Unknown
});
var stx_assert_pack_eq_term_UnsupportedClass = function() {
	stx_core_pack_Clazz.call(this);
};
stx_assert_pack_eq_term_UnsupportedClass.__name__ = "stx.assert.pack.eq.term.UnsupportedClass";
stx_assert_pack_eq_term_UnsupportedClass.__interfaces__ = [stx_assert_type_EqApi];
stx_assert_pack_eq_term_UnsupportedClass.__super__ = stx_core_pack_Clazz;
stx_assert_pack_eq_term_UnsupportedClass.prototype = $extend(stx_core_pack_Clazz.prototype,{
	applyII: function(a,b) {
		return stx_assert_pack_Equaled.and(new stx_assert_pack_eq_term_Object().applyII(a,b),js_Boot.getClass(a) == js_Boot.getClass(b) && true);
	}
	,__class__: stx_assert_pack_eq_term_UnsupportedClass
});
var stx_assert_type_OrdApi = function() { };
stx_assert_type_OrdApi.__name__ = "stx.assert.type.OrdApi";
stx_assert_type_OrdApi.__isInterface__ = true;
stx_assert_type_OrdApi.__interfaces__ = [stx_fn_type_App2R];
var stx_assert_pack_ord_term_Couple = function(l,r) {
	this.l = l;
	this.r = r;
};
stx_assert_pack_ord_term_Couple.__name__ = "stx.assert.pack.ord.term.Couple";
stx_assert_pack_ord_term_Couple.__interfaces__ = [stx_assert_type_OrdApi];
stx_assert_pack_ord_term_Couple.prototype = {
	l: null
	,r: null
	,applyII: function(a,b) {
		var _gthis = this;
		return stx_core_pack_CoupleLift.decouple(a,function(l0,r0) {
			return stx_core_pack_CoupleLift.decouple(b,function(l1,r1) {
				return stx_assert_pack_Ordered.or(_gthis.l.applyII(l0,l1),_gthis.r.applyII(r0,r1));
			});
		});
	}
	,__class__: stx_assert_pack_ord_term_Couple
};
var stx_assert_pack_ord_term_Int = function() {
	stx_core_pack_Clazz.call(this);
};
stx_assert_pack_ord_term_Int.__name__ = "stx.assert.pack.ord.term.Int";
stx_assert_pack_ord_term_Int.__interfaces__ = [stx_assert_type_OrdApi];
stx_assert_pack_ord_term_Int.__super__ = stx_core_pack_Clazz;
stx_assert_pack_ord_term_Int.prototype = $extend(stx_core_pack_Clazz.prototype,{
	applyII: function(a,b) {
		if(a < b) {
			return true;
		} else {
			return false;
		}
	}
	,__class__: stx_assert_pack_ord_term_Int
});
var stx_assert_pack_ord_term_OrdAssertion = function(ord,pos) {
	stx_assert_pack_assertion_term_Base.call(this,pos);
	this.ord = ord;
};
stx_assert_pack_ord_term_OrdAssertion.__name__ = "stx.assert.pack.ord.term.OrdAssertion";
stx_assert_pack_ord_term_OrdAssertion.__super__ = stx_assert_pack_assertion_term_Base;
stx_assert_pack_ord_term_OrdAssertion.prototype = $extend(stx_assert_pack_assertion_term_Base.prototype,{
	ord: null
	,applyII: function(a,b) {
		var tmp = stx_assert_pack_Ordered.toBool(this.ord.applyII(a,b));
		var this1 = stx_core_use_UseNano.fault(stx_core_pack_Wildcard.__,this.pos);
		return stx_LiftAssert.report(tmp,new stx_core_pack_Err(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,stx_core_pack_Failure.ERR_OF(stx_assert_pack_AssertFailure.PredicateFailed(js_Boot.getClass(this),a,b))),haxe_ds_Option.None,this1));
	}
	,__class__: stx_assert_pack_ord_term_OrdAssertion
});
var stx_assert_pack_ord_term_String = function() {
	stx_core_pack_Clazz.call(this);
};
stx_assert_pack_ord_term_String.__name__ = "stx.assert.pack.ord.term.String";
stx_assert_pack_ord_term_String.__interfaces__ = [stx_assert_type_OrdApi];
stx_assert_pack_ord_term_String.__super__ = stx_core_pack_Clazz;
stx_assert_pack_ord_term_String.prototype = $extend(stx_core_pack_Clazz.prototype,{
	applyII: function(a,b) {
		if(a < b) {
			return true;
		} else {
			return false;
		}
	}
	,__class__: stx_assert_pack_ord_term_String
});
var stx_assert_pack_predicate_term_Always = function(pos) {
	stx_assert_pack_predicate_term_Open.call(this,pos);
};
stx_assert_pack_predicate_term_Always.__name__ = "stx.assert.pack.predicate.term.Always";
stx_assert_pack_predicate_term_Always.__super__ = stx_assert_pack_predicate_term_Open;
stx_assert_pack_predicate_term_Always.prototype = $extend(stx_assert_pack_predicate_term_Open.prototype,{
	applyI: function(v) {
		return haxe_ds_Option.None;
	}
	,__class__: stx_assert_pack_predicate_term_Always
});
var stx_assert_pack_predicate_term_And = function(l,r,pos) {
	stx_assert_pack_predicate_term_Open.call(this,pos);
	this.l = l;
	this.r = r;
};
stx_assert_pack_predicate_term_And.__name__ = "stx.assert.pack.predicate.term.And";
stx_assert_pack_predicate_term_And.__super__ = stx_assert_pack_predicate_term_Open;
stx_assert_pack_predicate_term_And.prototype = $extend(stx_assert_pack_predicate_term_Open.prototype,{
	l: null
	,r: null
	,applyI: function(v) {
		var lr = this.l.applyI(v);
		var rr = stx_core_pack_Report._new(haxe_ds_Option.None);
		if(!stx_core_pack_OptionLift.is_defined(lr)) {
			rr = this.r.applyI(v);
		}
		return stx_core_pack_Report.merge(lr,rr);
	}
	,__class__: stx_assert_pack_predicate_term_And
});
var stx_assert_pack_predicate_term_AssertionPredicate = function(delegate,data) {
	this.delegate = delegate;
	this.data = data;
};
stx_assert_pack_predicate_term_AssertionPredicate.__name__ = "stx.assert.pack.predicate.term.AssertionPredicate";
stx_assert_pack_predicate_term_AssertionPredicate.__interfaces__ = [stx_assert_type_PredicateApi];
stx_assert_pack_predicate_term_AssertionPredicate.prototype = {
	delegate: null
	,data: null
	,applyI: function(v) {
		return stx_core_pack_Report.errata(this.delegate.applyII(this.data,v),function(x) {
			return x;
		});
	}
	,__class__: stx_assert_pack_predicate_term_AssertionPredicate
};
var stx_assert_pack_predicate_term_Base = function(pos) {
	stx_core_pack_Clazz.call(this);
	this.pos = pos;
};
stx_assert_pack_predicate_term_Base.__name__ = "stx.assert.pack.predicate.term.Base";
stx_assert_pack_predicate_term_Base.__interfaces__ = [stx_assert_type_PredicateApi];
stx_assert_pack_predicate_term_Base.__super__ = stx_core_pack_Clazz;
stx_assert_pack_predicate_term_Base.prototype = $extend(stx_core_pack_Clazz.prototype,{
	pos: null
	,applyI: function(v) {
		return stx_core_pack_Report.fromStdOption(haxe_ds_Option.None);
	}
	,error: function(l,r,pos) {
		var this1 = stx_core_use_UseNano.fault(stx_core_pack_Wildcard.__,stx_core_pack_OptionLift.defv(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,pos),this.pos));
		return new stx_core_pack_Err(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,stx_core_pack_Failure.ERR_OF(stx_assert_pack_AssertFailure.PredicateFailed(js_Boot.getClass(this),l,r))),haxe_ds_Option.None,this1);
	}
	,__class__: stx_assert_pack_predicate_term_Base
});
var stx_assert_pack_predicate_term_Exists = function(pos) {
	stx_assert_pack_predicate_term_Base.call(this,pos);
};
stx_assert_pack_predicate_term_Exists.__name__ = "stx.assert.pack.predicate.term.Exists";
stx_assert_pack_predicate_term_Exists.__super__ = stx_assert_pack_predicate_term_Base;
stx_assert_pack_predicate_term_Exists.prototype = $extend(stx_assert_pack_predicate_term_Base.prototype,{
	applyI: function(v) {
		var o = stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,v);
		var bool;
		if(o._hx_index == 0) {
			var v = o.v;
			bool = haxe_ds_Option.Some(true);
		} else {
			bool = haxe_ds_Option.None;
		}
		var bool1 = stx_core_pack_OptionLift.defv(bool,false);
		return stx_LiftAssert.report(bool1,this.error(null,null,{ fileName : "stx/assert/pack/predicate/term/Exists.hx", lineNumber : 9, className : "stx.assert.pack.predicate.term.Exists", methodName : "applyI"}));
	}
	,__class__: stx_assert_pack_predicate_term_Exists
});
var stx_assert_pack_predicate_term_Is = function(type,pos) {
	stx_assert_pack_predicate_term_Base.call(this,pos);
	this.type = type;
};
stx_assert_pack_predicate_term_Is.__name__ = "stx.assert.pack.predicate.term.Is";
stx_assert_pack_predicate_term_Is.__super__ = stx_assert_pack_predicate_term_Base;
stx_assert_pack_predicate_term_Is.prototype = $extend(stx_assert_pack_predicate_term_Base.prototype,{
	type: null
	,applyI: function(v) {
		var bool = js_Boot.__instanceof(v,this.type);
		var this1 = stx_core_use_UseNano.fault(stx_core_pack_Wildcard.__,{ fileName : "stx/assert/pack/predicate/term/Is.hx", lineNumber : 12, className : "stx.assert.pack.predicate.term.Is", methodName : "applyI"});
		var err = new stx_core_pack_Err(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,stx_core_pack_Failure.ERR_OF(stx_assert_pack_AssertFailure.PredicateFailed(js_Boot.getClass(this),v))),haxe_ds_Option.None,this1);
		return stx_LiftAssert.report(bool,err);
	}
	,__class__: stx_assert_pack_predicate_term_Is
});
var stx_assert_pack_predicate_term_Matches = function(fault,match,opt,pos) {
	if(opt == null) {
		opt = "g";
	}
	stx_assert_pack_predicate_term_Base.call(this,pos);
	this.fault = fault;
	this.match = match;
	this.opt = opt;
};
stx_assert_pack_predicate_term_Matches.__name__ = "stx.assert.pack.predicate.term.Matches";
stx_assert_pack_predicate_term_Matches.__super__ = stx_assert_pack_predicate_term_Base;
stx_assert_pack_predicate_term_Matches.prototype = $extend(stx_assert_pack_predicate_term_Base.prototype,{
	fault: null
	,match: null
	,opt: null
	,applyI: function(v) {
		var err = this.error("~/" + this.match + "/" + this.opt,v,{ fileName : "stx/assert/pack/predicate/term/Matches.hx", lineNumber : 16, className : "stx.assert.pack.predicate.term.Matches", methodName : "applyI"});
		var ereg = new EReg(this.match,this.opt);
		ereg.match(v);
		var bool = ereg.matched(0) == null;
		return stx_LiftAssert.report(bool,err);
	}
	,__class__: stx_assert_pack_predicate_term_Matches
});
var stx_assert_pack_predicate_term_Never = function(pos) {
	stx_assert_pack_predicate_term_Open.call(this,pos);
};
stx_assert_pack_predicate_term_Never.__name__ = "stx.assert.pack.predicate.term.Never";
stx_assert_pack_predicate_term_Never.__super__ = stx_assert_pack_predicate_term_Open;
stx_assert_pack_predicate_term_Never.prototype = $extend(stx_assert_pack_predicate_term_Open.prototype,{
	applyI: function(v) {
		return stx_core_pack_Report.pure(this.error());
	}
	,__class__: stx_assert_pack_predicate_term_Never
});
var stx_assert_pack_predicate_term_Not = function(predicate,pos) {
	stx_assert_pack_predicate_term_Open.call(this,pos);
	this.predicate = predicate;
};
stx_assert_pack_predicate_term_Not.__name__ = "stx.assert.pack.predicate.term.Not";
stx_assert_pack_predicate_term_Not.__super__ = stx_assert_pack_predicate_term_Open;
stx_assert_pack_predicate_term_Not.prototype = $extend(stx_assert_pack_predicate_term_Open.prototype,{
	predicate: null
	,applyI: function(v) {
		var bool = stx_core_pack_OptionLift.fold(this.predicate.applyI(v),function(c) {
			return true;
		},function() {
			return false;
		});
		return stx_LiftAssert.report(bool,this.error());
	}
	,__class__: stx_assert_pack_predicate_term_Not
});
var stx_assert_pack_predicate_term_Or = function(l,r,pos) {
	stx_assert_pack_predicate_term_Open.call(this,pos);
	this.l = l;
	this.r = r;
};
stx_assert_pack_predicate_term_Or.__name__ = "stx.assert.pack.predicate.term.Or";
stx_assert_pack_predicate_term_Or.__super__ = stx_assert_pack_predicate_term_Open;
stx_assert_pack_predicate_term_Or.prototype = $extend(stx_assert_pack_predicate_term_Open.prototype,{
	l: null
	,r: null
	,applyI: function(v) {
		var lr = this.l.applyI(v);
		var rr = stx_core_pack_Report._new(haxe_ds_Option.None);
		if(stx_core_pack_OptionLift.is_defined(lr)) {
			rr = this.r.applyI(v);
		}
		return stx_core_pack_Report.merge(lr,rr);
	}
	,__class__: stx_assert_pack_predicate_term_Or
});
var stx_assert_pack_predicate_term_Throws = function(pos) {
	stx_assert_pack_predicate_term_Base.call(this,pos);
};
stx_assert_pack_predicate_term_Throws.__name__ = "stx.assert.pack.predicate.term.Throws";
stx_assert_pack_predicate_term_Throws.__super__ = stx_assert_pack_predicate_term_Base;
stx_assert_pack_predicate_term_Throws.prototype = $extend(stx_assert_pack_predicate_term_Base.prototype,{
	applyI: function(block) {
		try {
			block();
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			return stx_core_pack_Report.unit();
		}
		return stx_core_pack_Report.pure(this.error(null,null,{ fileName : "stx/assert/pack/predicate/term/Throws.hx", lineNumber : 14, className : "stx.assert.pack.predicate.term.Throws", methodName : "applyI"}));
	}
	,__class__: stx_assert_pack_predicate_term_Throws
});
var stx_assert_pack_predicate_term_Void = function(pos) {
	stx_assert_pack_predicate_term_Base.call(this,pos);
};
stx_assert_pack_predicate_term_Void.__name__ = "stx.assert.pack.predicate.term.Void";
stx_assert_pack_predicate_term_Void.__super__ = stx_assert_pack_predicate_term_Base;
stx_assert_pack_predicate_term_Void.prototype = $extend(stx_assert_pack_predicate_term_Base.prototype,{
	applyI: function(v) {
		return stx_LiftAssert.report(v == null,this.error(null,null,{ fileName : "stx/assert/pack/predicate/term/Void.hx", lineNumber : 9, className : "stx.assert.pack.predicate.term.Void", methodName : "applyI"}));
	}
	,__class__: stx_assert_pack_predicate_term_Void
});
var stx_assert_pack_predicate_term_XOr = function(l,r,pos) {
	stx_assert_pack_predicate_term_Open.call(this,pos);
	this.l = l;
	this.r = r;
};
stx_assert_pack_predicate_term_XOr.__name__ = "stx.assert.pack.predicate.term.XOr";
stx_assert_pack_predicate_term_XOr.__super__ = stx_assert_pack_predicate_term_Open;
stx_assert_pack_predicate_term_XOr.prototype = $extend(stx_assert_pack_predicate_term_Open.prototype,{
	l: null
	,r: null
	,applyI: function(v) {
		var lr = this.l.applyI(v);
		var rr = this.r.applyI(v);
		return stx_LiftAssert.report(!stx_core_pack_OptionLift.is_defined(lr) && !stx_core_pack_OptionLift.is_defined(rr),this.error());
	}
	,__class__: stx_assert_pack_predicate_term_XOr
});
var stx_assert_type_ComparativeSum = $hxEnums["stx.assert.type.ComparativeSum"] = { __ename__ : "stx.assert.type.ComparativeSum", __constructs__ : ["GT","GTEQ","LT","LTEQ","EQ"]
	,GT: {_hx_index:0,__enum__:"stx.assert.type.ComparativeSum",toString:$estr}
	,GTEQ: {_hx_index:1,__enum__:"stx.assert.type.ComparativeSum",toString:$estr}
	,LT: {_hx_index:2,__enum__:"stx.assert.type.ComparativeSum",toString:$estr}
	,LTEQ: {_hx_index:3,__enum__:"stx.assert.type.ComparativeSum",toString:$estr}
	,EQ: {_hx_index:4,__enum__:"stx.assert.type.ComparativeSum",toString:$estr}
};
var stx_assert_type_EqualedSum = {};
stx_assert_type_EqualedSum.ok = function(this1) {
	return this1;
};
var stx_assert_type_OrderedSum = {};
stx_assert_type_OrderedSum.ok = function(this1) {
	return this1;
};
var stx_asys_Blot = function() { };
stx_asys_Blot.__name__ = "stx.asys.Blot";
stx_asys_Blot.sep = function(__) {
	throw haxe_Exception.thrown("Don't use global separator here");
};
var stx_asys_Module = function() {
	stx_core_pack_Clazz.call(this);
};
stx_asys_Module.__name__ = "stx.asys.Module";
stx_asys_Module.__super__ = stx_core_pack_Clazz;
stx_asys_Module.prototype = $extend(stx_core_pack_Clazz.prototype,{
	local: function() {
		return { device : new stx_asys_pack_Device(stx_asys_pack_Distro._new())};
	}
	,__class__: stx_asys_Module
});
var stx_asys_ASysApi = function() { };
stx_asys_ASysApi.__name__ = "stx.asys.ASysApi";
stx_asys_ASysApi.__isInterface__ = true;
stx_asys_ASysApi.prototype = {
	sleep: null
	,__class__: stx_asys_ASysApi
};
var stx_asys_Pack = function() { };
stx_asys_Pack.__name__ = "stx.asys.Pack";
var stx_asys_LiftAsys = function() { };
stx_asys_LiftAsys.__name__ = "stx.asys.LiftAsys";
stx_asys_LiftAsys.asys = function(__) {
	return new stx_asys_Module();
};
var stx_asys_LiftDrive = function() { };
stx_asys_LiftDrive.__name__ = "stx.asys.LiftDrive";
stx_asys_LiftDrive.canonical = function(drive,env) {
	var sep = "" + (env.device.sep == null ? "null" : stx_fs_path_pack_Separator.toString(env.device.sep));
	switch(drive._hx_index) {
	case 0:
		var name = drive.v;
		return "name" + sep;
	case 1:
		return sep;
	}
};
var stx_asys_body_Targets = function() { };
stx_asys_body_Targets.__name__ = "stx.asys.body.Targets";
stx_asys_body_Targets.list = function() {
	return stx_core_Enum.constructs(stx_core_Enum._new(stx_asys_head_data_Target));
};
stx_asys_body_Targets.toBuildDirective = function(target) {
	switch(target._hx_index) {
	case 0:
		return haxe_ds_Option.Some("-js");
	case 1:
		return haxe_ds_Option.Some("-lua");
	case 2:
		return haxe_ds_Option.Some("-swf");
	case 3:
		return haxe_ds_Option.Some("-neko");
	case 4:
		return haxe_ds_Option.Some("-php");
	case 5:
		return haxe_ds_Option.Some("-cpp");
	case 7:
		return haxe_ds_Option.Some("-cs");
	case 8:
		return haxe_ds_Option.Some("-java");
	case 9:
		return haxe_ds_Option.Some("-python");
	case 10:
		return haxe_ds_Option.Some("-hl");
	case 11:
		return haxe_ds_Option.Some("--interp");
	default:
		return haxe_ds_Option.None;
	}
};
stx_asys_body_Targets.canonical = function(target) {
	return stx_core_EnumValue.constructor(stx_core_EnumValue._new(stx_asys_pack_Target.prj(target)));
};
var stx_asys_head_Devices = function() { };
stx_asys_head_Devices.__name__ = "stx.asys.head.Devices";
stx_asys_head_Devices.local = function() {
	return { device : new stx_asys_pack_Device(stx_asys_pack_Distro._new())};
};
stx_asys_head_Devices.windows = function() {
	return { device : new stx_asys_pack_Device("Windows")};
};
stx_asys_head_Devices.linux = function() {
	return { device : new stx_asys_pack_Device("Linux")};
};
var stx_asys_head_data_Target = $hxEnums["stx.asys.head.data.Target"] = { __ename__ : "stx.asys.head.data.Target", __constructs__ : ["Js","Lua","Swf","Neko","Php","Cpp","Cppia","Cs","Java","Python","Hl","Interp"]
	,Js: {_hx_index:0,__enum__:"stx.asys.head.data.Target",toString:$estr}
	,Lua: {_hx_index:1,__enum__:"stx.asys.head.data.Target",toString:$estr}
	,Swf: {_hx_index:2,__enum__:"stx.asys.head.data.Target",toString:$estr}
	,Neko: {_hx_index:3,__enum__:"stx.asys.head.data.Target",toString:$estr}
	,Php: {_hx_index:4,__enum__:"stx.asys.head.data.Target",toString:$estr}
	,Cpp: {_hx_index:5,__enum__:"stx.asys.head.data.Target",toString:$estr}
	,Cppia: {_hx_index:6,__enum__:"stx.asys.head.data.Target",toString:$estr}
	,Cs: {_hx_index:7,__enum__:"stx.asys.head.data.Target",toString:$estr}
	,Java: {_hx_index:8,__enum__:"stx.asys.head.data.Target",toString:$estr}
	,Python: {_hx_index:9,__enum__:"stx.asys.head.data.Target",toString:$estr}
	,Hl: {_hx_index:10,__enum__:"stx.asys.head.data.Target",toString:$estr}
	,Interp: {_hx_index:11,__enum__:"stx.asys.head.data.Target",toString:$estr}
};
var stx_asys_type_ASys = function() { };
stx_asys_type_ASys.__name__ = "stx.asys.type.ASys";
stx_asys_type_ASys.__isInterface__ = true;
stx_asys_type_ASys.prototype = {
	sleep: null
	,__class__: stx_asys_type_ASys
};
var stx_asys_pack_ASys = function() {
};
stx_asys_pack_ASys.__name__ = "stx.asys.pack.ASys";
stx_asys_pack_ASys.__interfaces__ = [stx_asys_type_ASys];
stx_asys_pack_ASys.prototype = {
	sleep: function(t) {
		var seconds = t;
		return stx_Bang.pure(function() {
			Sys.sleep(seconds);
		});
	}
	,__class__: stx_asys_pack_ASys
};
var stx_asys_pack_ASysFailure = $hxEnums["stx.asys.pack.ASysFailure"] = { __ename__ : "stx.asys.pack.ASysFailure", __constructs__ : ["UnknownDistroName","EnvironmentVariablesInaccessible","SubSystem"]
	,UnknownDistroName: {_hx_index:0,__enum__:"stx.asys.pack.ASysFailure",toString:$estr}
	,EnvironmentVariablesInaccessible: {_hx_index:1,__enum__:"stx.asys.pack.ASysFailure",toString:$estr}
	,SubSystem: ($_=function(err) { return {_hx_index:2,err:err,__enum__:"stx.asys.pack.ASysFailure",toString:$estr}; },$_.__params__ = ["err"],$_)
};
var stx_asys_pack_CwdApi = function() { };
stx_asys_pack_CwdApi.__name__ = "stx.asys.pack.CwdApi";
stx_asys_pack_CwdApi.__isInterface__ = true;
stx_asys_pack_CwdApi.prototype = {
	pop: null
	,put: null
	,__class__: stx_asys_pack_CwdApi
};
var stx_asys_pack_Cwd = function() {
	stx_core_pack_Clazz.call(this);
};
stx_asys_pack_Cwd.__name__ = "stx.asys.pack.Cwd";
stx_asys_pack_Cwd.__interfaces__ = [stx_asys_pack_CwdApi];
stx_asys_pack_Cwd.__super__ = stx_core_pack_Clazz;
stx_asys_pack_Cwd.prototype = $extend(stx_core_pack_Clazz.prototype,{
	pop: function() {
		return stx_arrowlet_pack_AttemptLift.errata(stx_arrowlet_pack_AttemptLift.attempt(stx_fs_Path.parse(process.cwd()),stx_arrowlet_pack_Attempt.fromFun1Proceed(stx_fs_path_pack_Raw._.toDirectory)),function(e) {
			return e.map(stx_fs_pack_FSFailure.FilePathMalformed);
		});
	}
	,put: function(dir) {
		return stx_arrowlet_pack_Command.fromFun1Report(function(env) {
			var val = stx_core_pack_Report.unit();
			try {
				var s = stx_fs_path_pack_Directory.canonical(dir,env.device.sep);
				process.chdir(s);
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
				var e = haxe_Exception.caught(_g).unwrap();
				var this1 = stx_core_use_UseNano.fault(stx_core_pack_Wildcard.__,{ fileName : "src/main/haxe/stx/asys/pack/Cwd.hx", lineNumber : 25, className : "stx.asys.pack.Cwd", methodName : "put"});
				val = stx_core_pack_Report.pure(new stx_core_pack_Err(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,stx_core_pack_Failure.ERR_OF(stx_fs_pack_FSFailure.CannotSetWorkingDirectory(stx_fs_path_pack_Directory.canonical(dir,env.device.sep),e))),haxe_ds_Option.None,this1));
			}
			return val;
		});
	}
	,__class__: stx_asys_pack_Cwd
});
var stx_asys_type_Device = function() { };
stx_asys_type_Device.__name__ = "stx.asys.type.Device";
stx_asys_type_Device.__isInterface__ = true;
stx_asys_type_Device.prototype = {
	distro: null
	,volume: null
	,shell: null
	,sep: null
	,__class__: stx_asys_type_Device
};
var stx_asys_pack_Device = function(distro) {
	this.distro = distro;
	this.sep = stx_asys_pack_Distro.is_windows(distro) ? "\\\\" : "/";
	this.env = new stx_asys_pack_Env();
	this.volume = new stx_fs_pack_Volume(this.sep);
	this.shell = new stx_asys_pack_Shell();
};
stx_asys_pack_Device.__name__ = "stx.asys.pack.Device";
stx_asys_pack_Device.__interfaces__ = [stx_asys_type_Device];
stx_asys_pack_Device.prototype = {
	sep: null
	,distro: null
	,env: null
	,volume: null
	,shell: null
	,toHasDevice: function() {
		return { device : this};
	}
	,__class__: stx_asys_pack_Device
};
var stx_asys_pack_Distro = {};
stx_asys_pack_Distro.unit = function() {
	return stx_asys_pack_Distro._new();
};
stx_asys_pack_Distro._new = function() {
	var this1;
	switch(Sys.systemName()) {
	case "BSD":
		this1 = "BSD";
		break;
	case "Linux":
		this1 = "Linux";
		break;
	case "Mac":
		this1 = "Mac";
		break;
	case "Windows":
		this1 = "Windows";
		break;
	default:
		var this2 = stx_core_use_UseNano.fault(stx_core_pack_Wildcard.__,{ fileName : "src/main/haxe/stx/asys/pack/Distro.hx", lineNumber : 18, className : "stx.asys.pack._Distro.Distro_Impl_", methodName : "_new"});
		throw haxe_Exception.thrown(new stx_core_pack_Err(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,stx_core_pack_Failure.ERR_OF(stx_asys_pack_ASysFailure.UnknownDistroName)),haxe_ds_Option.None,this2));
	}
	return this1;
};
stx_asys_pack_Distro.is_windows = function(this1) {
	return this1 == "Windows";
};
var stx_asys_pack_EnvApi = function() { };
stx_asys_pack_EnvApi.__name__ = "stx.asys.pack.EnvApi";
stx_asys_pack_EnvApi.__isInterface__ = true;
stx_asys_pack_EnvApi.prototype = {
	get: null
	,__class__: stx_asys_pack_EnvApi
};
var stx_asys_pack_Env = function() {
	stx_core_pack_Clazz.call(this);
};
stx_asys_pack_Env.__name__ = "stx.asys.pack.Env";
stx_asys_pack_Env.__interfaces__ = [stx_asys_pack_EnvApi];
stx_asys_pack_Env.__super__ = stx_core_pack_Clazz;
stx_asys_pack_Env.prototype = $extend(stx_core_pack_Clazz.prototype,{
	get: function(str) {
		return stx_arrowlet_pack_Proceed.fromFunXRes(function() {
			try {
				return stx_core_use_UseNano.success(stx_core_pack_Wildcard.__,process.env[str]);
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
				var this1 = stx_core_use_UseNano.fault(stx_core_pack_Wildcard.__,{ fileName : "src/main/haxe/stx/asys/pack/Env.hx", lineNumber : 11, className : "stx.asys.pack.Env", methodName : "get"});
				return stx_core_use_UseNano.failure(stx_core_pack_Wildcard.__,new stx_core_pack_Err(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,stx_core_pack_Failure.ERR_OF(stx_asys_pack_ASysFailure.EnvironmentVariablesInaccessible)),haxe_ds_Option.None,this1));
			}
		});
	}
	,__class__: stx_asys_pack_Env
});
var stx_asys_pack_LocalHost = {};
stx_asys_pack_LocalHost._new = function() {
	var this1 = new stx_asys_pack_Device(stx_asys_pack_Distro._new());
	return this1;
};
stx_asys_pack_LocalHost.unit = function() {
	return stx_asys_pack_LocalHost._new();
};
var stx_asys_type_Shell = function() { };
stx_asys_type_Shell.__name__ = "stx.asys.type.Shell";
stx_asys_type_Shell.__isInterface__ = true;
stx_asys_type_Shell.prototype = {
	print: null
	,println: null
	,stdin: null
	,stderr: null
	,stdout: null
	,byte: null
	,cwd: null
	,__class__: stx_asys_type_Shell
};
var stx_asys_pack_Shell = function() {
	stx_core_pack_Clazz.call(this);
	this.cwd = new stx_asys_pack_Cwd();
};
stx_asys_pack_Shell.__name__ = "stx.asys.pack.Shell";
stx_asys_pack_Shell.__interfaces__ = [stx_asys_type_Shell];
stx_asys_pack_Shell.__super__ = stx_core_pack_Clazz;
stx_asys_pack_Shell.prototype = $extend(stx_core_pack_Clazz.prototype,{
	cwd: null
	,print: function(v) {
		var v1 = v;
		return stx_Bang.pure(function() {
			process.stdout.write(Std.string(v1));
		});
	}
	,println: function(v) {
		var v1 = v;
		return stx_Bang.pure(function() {
			process.stdout.write(Std.string(v1));
			process.stdout.write("\n");
		});
	}
	,stdin: function() {
		return stx_io_pack_StdIn._new(new _$Sys_FileInput(0));
	}
	,stdout: function() {
		return stx_io_pack_StdOut._new(new _$Sys_FileOutput(1));
	}
	,stderr: function() {
		return stx_io_pack_StdOut._new(new _$Sys_FileOutput(2));
	}
	,byte: function() {
		var echo = false;
		return stx_arrowlet_pack_Proceed.fromFunXR(function() {
			return Sys.getChar(echo);
		});
	}
	,__class__: stx_asys_pack_Shell
});
var stx_asys_pack_Target = {};
stx_asys_pack_Target._new = function(self) {
	var this1 = self;
	return this1;
};
stx_asys_pack_Target.lift = function(self) {
	return stx_asys_pack_Target._new(self);
};
stx_asys_pack_Target.canonical = function(this1) {
	return stx_asys_body_Targets.canonical(this1);
};
stx_asys_pack_Target.prj = function(this1) {
	return this1;
};
stx_asys_pack_Target.get_self = function(this1) {
	return stx_asys_pack_Target.lift(this1);
};
var stx_asys_pack_WorkingDirectory = {};
stx_asys_pack_WorkingDirectory._new = function(self) {
	var this1 = self;
	return this1;
};
var stx_core_Card = {};
stx_core_Card._new = function(self) {
	var this1 = self;
	return this1;
};
stx_core_Card.of = function(wildcard,x) {
	return stx_core_Card._new(stx_core_type_CardSum.___(x));
};
stx_core_Card.asAny = function(this1) {
	return stx_core_Card.map(this1,function(x) {
		return x;
	});
};
stx_core_Card.asDynamic = function(this1) {
	return stx_core_Card.map(this1,function(x) {
		return x;
	});
};
stx_core_Card.then = function(this1,v) {
	var out = stx_core_Card._new(stx_core_type_CardSum.___(v));
	return out;
};
stx_core_Card.val = function(this1,pos) {
	return stx_core_Card.pull(this1,function(x) {
		return x;
	},pos);
};
stx_core_Card.pull = function(this1,fn,pos) {
	var a = this1.v;
	if(a == null) {
		throw haxe_Exception.thrown("Null Encountered at (${pos})");
	}
	return fn(a);
};
stx_core_Card.or = function(this1,thk) {
	if(this1 == null) {
		return stx_core_type_CardSum.___(thk());
	} else {
		var a = this1.v;
		return stx_core_type_CardSum.___(a);
	}
};
stx_core_Card.orv = function(this1,v) {
	return stx_core_Card.or(this1,function() {
		return v;
	});
};
stx_core_Card.def = function(this1,thk) {
	if(this1 == null) {
		return thk();
	} else {
		var a = this1.v;
		return a;
	}
};
stx_core_Card.defv = function(this1,v) {
	return stx_core_Card.def(this1,function() {
		return v;
	});
};
stx_core_Card.map = function(this1,fn) {
	var _g = this1.v;
	if(_g == null) {
		return stx_core_Card._new(stx_core_type_CardSum.___(null));
	} else {
		var a = _g;
		return stx_core_Card._new(stx_core_type_CardSum.___(fn(a)));
	}
};
stx_core_Card.fromWildcard = function(crd) {
	return stx_core_Card._new(stx_core_type_CardSum.___(crd));
};
stx_core_Card.ab = function(tp) {
	return stx_core_Card.val(stx_core_Card.map(tp,function(tp) {
		return stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,tp.a,tp.b);
	}),{ fileName : "stx/core/Card.hx", lineNumber : 62, className : "stx.core._Card.Card_Impl_", methodName : "ab"});
};
var stx_core_Cell = {};
stx_core_Cell._new = function(self) {
	var this1 = self;
	return this1;
};
stx_core_Cell.fromT = function(v) {
	var this1 = new Array(1);
	var this2 = this1;
	var ret = this2;
	ret[0] = v;
	return stx_core_Cell._new(ret);
};
stx_core_Cell.get_value = function(this1) {
	return this1[0];
};
stx_core_Cell.prj = function(this1) {
	return this1;
};
stx_core_Cell.get = function(this1) {
	return stx_core_Cell.get_value(this1);
};
var stx_core_Char = {};
stx_core_Char._new = function(self) {
	var this1 = self;
	return this1;
};
stx_core_Char.code = function(this1) {
	return HxOverrides.cca(this1,0);
};
var stx_core_Chars = {};
stx_core_Chars._new = function(self) {
	var this1 = self;
	return this1;
};
stx_core_Chars.char = function(this1,int) {
	return stx_core_Char._new(this1.charAt(int));
};
stx_core_Chars.add = function(this1,that) {
	return this1 + that;
};
var stx_core_Chunk = {};
stx_core_Chunk._ = function() {
	return stx_core_chunk_Constructor.ZERO;
};
stx_core_Chunk._new = function(self) {
	var this1 = self;
	return this1;
};
stx_core_Chunk.lift = function(v) {
	return stx_core_Chunk._new(v);
};
stx_core_Chunk.pure = function(v) {
	return stx_core_chunk_Constructor.ZERO.pure(v);
};
stx_core_Chunk.fromTinkOutcome = function(outcome) {
	return stx_core_chunk_Constructor.ZERO.fromTinkOutcome(outcome);
};
stx_core_Chunk.fromError = function(e) {
	return stx_core_type_ChunkSum.End(e);
};
stx_core_Chunk.fromNull_T = function(v) {
	return stx_core_chunk_Constructor.ZERO.pure(v);
};
stx_core_Chunk.fromOption = function(opt) {
	return stx_core_chunk_Constructor.ZERO.fromOption(opt);
};
stx_core_Chunk.fold = function(this1,val,ers,Tap) {
	return stx_core_chunk_Constructor.ZERO._.fold(val,ers,Tap,stx_core_Chunk.get_self(this1));
};
stx_core_Chunk.opt_else = function(this1,_if,_else) {
	return stx_core_chunk_Constructor.ZERO._.opt_else(_if,_else,stx_core_Chunk.get_self(this1));
};
stx_core_Chunk.map = function(this1,fn) {
	return stx_core_chunk_Constructor.ZERO._.map(fn,stx_core_Chunk.get_self(this1));
};
stx_core_Chunk.flat_map = function(this1,fn) {
	return stx_core_chunk_Constructor.ZERO._.flat_map(fn,stx_core_Chunk.get_self(this1));
};
stx_core_Chunk.recover = function(this1,fn) {
	return stx_core_chunk_Constructor.ZERO._.recover(fn,stx_core_Chunk.get_self(this1));
};
stx_core_Chunk.zip = function(this1,that) {
	return stx_core_chunk_Constructor.ZERO._.zip(that,stx_core_Chunk.get_self(this1));
};
stx_core_Chunk.def = function(this1,v) {
	return stx_core_chunk_Constructor.ZERO._.def(v,stx_core_Chunk.get_self(this1));
};
stx_core_Chunk.is_defined = function(this1) {
	return stx_core_chunk_Constructor.ZERO._.is_defined(stx_core_Chunk.get_self(this1));
};
stx_core_Chunk.elide = function(this1) {
	return stx_core_Chunk.get_self(this1);
};
stx_core_Chunk.iterator = function(this1) {
	return stx_core_chunk_Constructor.ZERO._.iterator(stx_core_Chunk.get_self(this1));
};
stx_core_Chunk.array = function(this1) {
	var _e = this1;
	return Lambda.array({ iterator : function() {
		return $iterator(stx_core_Chunk)(_e);
	}});
};
stx_core_Chunk.errata = function(this1,fn) {
	return stx_core_chunk_Constructor.ZERO._.errata(fn,stx_core_Chunk.get_self(this1));
};
stx_core_Chunk.get_self = function(this1) {
	return this1;
};
var stx_core_Clause = {};
stx_core_Clause._new = function(self) {
	var this1 = self;
	return this1;
};
stx_core_Clause._ = function() {
	return stx_core__$Clause_Constructor.ZERO;
};
stx_core_Clause.lift = function(self) {
	return stx_core_Clause._new(self);
};
stx_core_Clause.make = function(brand,media) {
	return stx_core_Clause.lift({ brand : brand, media : media});
};
stx_core_Clause.copy = function(this1,brand,media) {
	return stx_core_Clause.make(stx_core_pack_OptionLift.defv(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,brand),this1.brand),stx_core_pack_OptionLift.defv(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,media),this1.media));
};
stx_core_Clause.prj = function(this1) {
	return this1;
};
stx_core_Clause.get_self = function(this1) {
	return stx_core_Clause.lift(this1);
};
var stx_core__$Clause_Destructure = function() {
	stx_core_pack_Clazz.call(this);
};
stx_core__$Clause_Destructure.__name__ = "stx.core._Clause.Destructure";
stx_core__$Clause_Destructure.__super__ = stx_core_pack_Clazz;
stx_core__$Clause_Destructure.prototype = $extend(stx_core_pack_Clazz.prototype,{
	copy: function(brand,media,self) {
		return stx_core_Clause.make(stx_core_pack_OptionLift.defv(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,brand),self.brand),stx_core_pack_OptionLift.defv(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,media),self.media));
	}
	,__class__: stx_core__$Clause_Destructure
});
var stx_core__$Clause_Constructor = function() {
	stx_core_pack_Clazz.call(this);
};
stx_core__$Clause_Constructor.__name__ = "stx.core._Clause.Constructor";
stx_core__$Clause_Constructor.lift = function(clause) {
	return stx_core_Clause._new(clause);
};
stx_core__$Clause_Constructor.make = function(brand,media) {
	return stx_core__$Clause_Constructor.lift({ brand : brand, media : media});
};
stx_core__$Clause_Constructor.__super__ = stx_core_pack_Clazz;
stx_core__$Clause_Constructor.prototype = $extend(stx_core_pack_Clazz.prototype,{
	__class__: stx_core__$Clause_Constructor
});
var stx_core_Contract = {};
stx_core_Contract._ = function() {
	return stx_core_contract_Constructor.ZERO;
};
stx_core_Contract._new = function(v) {
	var this1 = v;
	return this1;
};
stx_core_Contract.unit = function() {
	return stx_core_contract_Constructor.ZERO.unit();
};
stx_core_Contract.pure = function(ch) {
	return stx_core_contract_Constructor.ZERO.pure(ch);
};
stx_core_Contract.trigger = function() {
	return stx_core_ContractTrigger._new();
};
stx_core_Contract.fromLazyError = function(fn) {
	return stx_core_contract_Constructor.ZERO.fromLazyError(fn);
};
stx_core_Contract.fromLazyChunk = function(fn) {
	return stx_core_contract_Constructor.ZERO.fromLazyChunk(fn);
};
stx_core_Contract.lift = function(ft) {
	return stx_core_Contract._new(ft);
};
stx_core_Contract.fromChunk = function(chk) {
	return stx_core_contract_Constructor.ZERO.fromChunk(chk);
};
stx_core_Contract.fromOption = function(m) {
	return stx_core_contract_Constructor.ZERO.fromOption(m);
};
stx_core_Contract.map = function(this1,fn) {
	return stx_core_contract_Constructor.ZERO._.map(fn,this1);
};
stx_core_Contract.flat_map = function(this1,fn) {
	return stx_core_contract_Constructor.ZERO._.flat_map(fn,this1);
};
stx_core_Contract.recover = function(this1,fn) {
	return stx_core_contract_Constructor.ZERO._.recover(fn,this1);
};
stx_core_Contract.attempt = function(this1,fn) {
	return stx_core_contract_Constructor.ZERO._.attempt(fn,this1);
};
stx_core_Contract.fold = function(this1,pure,err,unit) {
	return stx_core_contract_Constructor.ZERO._.fold(pure,err,unit,this1);
};
stx_core_Contract.receive = function(this1,fn) {
	return stx_core_contract_Constructor.ZERO._.receive(fn,this1);
};
stx_core_Contract.zip = function(this1,that) {
	return stx_core_contract_Constructor.ZERO._.zip(that,this1);
};
stx_core_Contract.now = function(this1) {
	return stx_core_contract_Constructor.ZERO._.now(this1);
};
stx_core_Contract.errata = function(this1,fn) {
	return stx_core_contract_Constructor.ZERO._.errata(fn,this1);
};
stx_core_Contract.prj = function(this1) {
	return this1;
};
var stx_core_ContractTrigger = {};
stx_core_ContractTrigger._new = function() {
	var this1 = new tink_core_FutureTrigger();
	return this1;
};
stx_core_ContractTrigger.asContract = function(this1) {
	return this1;
};
var stx_core_Declare = {};
stx_core_Declare._new = function(self) {
	var this1 = self;
	return this1;
};
stx_core_Declare.lift = function(self) {
	return stx_core_Declare._new(self);
};
stx_core_Declare.make = function(brand,media,union) {
	return stx_core_Declare.lift({ brand : brand, media : media, union : union});
};
stx_core_Declare.copy = function(this1,brand,media,union) {
	return stx_core_Declare.make(stx_core_pack_OptionLift.defv(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,brand),this1.brand),stx_core_pack_OptionLift.defv(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,media),this1.media),stx_core_pack_OptionLift.defv(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,union),this1.union));
};
stx_core_Declare.prj = function(this1) {
	return this1;
};
stx_core_Declare.get_self = function(this1) {
	return stx_core_Declare.lift(this1);
};
var stx_core__$Declare_Constructor = function() {
	stx_core_pack_Clazz.call(this);
};
stx_core__$Declare_Constructor.__name__ = "stx.core._Declare.Constructor";
stx_core__$Declare_Constructor.__super__ = stx_core_pack_Clazz;
stx_core__$Declare_Constructor.prototype = $extend(stx_core_pack_Clazz.prototype,{
	lift: function(self) {
		return stx_core_Declare._new(self);
	}
	,make: function(brand,media,union) {
		return this.lift({ brand : brand, media : media, union : union});
	}
	,copy: function(brand,media,union,self) {
		return this.make(stx_core_pack_OptionLift.defv(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,brand),self.brand),stx_core_pack_OptionLift.defv(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,media),self.media),stx_core_pack_OptionLift.defv(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,union),self.union));
	}
	,__class__: stx_core__$Declare_Constructor
});
var stx_core_Embed = {};
stx_core_Embed._new = function() {
	var this1 = stx_core__$Embed_Constructor.embed();
	return this1;
};
var stx_core__$Embed_Constructor = function() {
	stx_core_pack_Clazz.call(this);
};
stx_core__$Embed_Constructor.__name__ = "stx.core._Embed.Constructor";
stx_core__$Embed_Constructor.embed = function() {
	var r = haxe_ds_Option.None;
	var unpack = null;
	unpack = function(fn) {
		r = haxe_ds_Option.None;
		fn();
		return r;
	};
	var pull = null;
	pull = function(fn) {
		r = haxe_ds_Option.None;
		fn();
		return stx_core_use_UseOptionNano.fudge(r);
	};
	var pack = null;
	pack = function(v) {
		var o = haxe_ds_Option.Some(v);
		return function() {
			r = o;
		};
	};
	var check = null;
	check = function(fn) {
		var _g = unpack(fn);
		switch(_g._hx_index) {
		case 0:
			var _g1 = _g.v;
			return true;
		case 1:
			return false;
		}
	};
	return { pack : pack, unpack : unpack, pull : pull, check : check};
};
stx_core__$Embed_Constructor.__super__ = stx_core_pack_Clazz;
stx_core__$Embed_Constructor.prototype = $extend(stx_core_pack_Clazz.prototype,{
	__class__: stx_core__$Embed_Constructor
});
var stx_core_Enum = {};
stx_core_Enum._new = function(self) {
	var this1 = self;
	return this1;
};
stx_core_Enum.constructs = function(this1) {
	return this1.__constructs__.slice();
};
stx_core_Enum.$name = function(this1) {
	return this1.__ename__;
};
stx_core_Enum.construct = function(this1,cons,args) {
	switch(cons._hx_index) {
	case 0:
		var i = cons.v;
		return stx_core_pack_Option.fromNullT(Type.createEnumIndex(this1,i,args));
	case 1:
		var s = cons.v;
		return stx_core_pack_Option.fromNullT(Type.createEnum(this1,s,args));
	}
};
var stx_core_EnumValue = {};
stx_core_EnumValue._new = function(self) {
	var this1 = self;
	return this1;
};
stx_core_EnumValue.params = function(this1) {
	return Type.enumParameters(this1);
};
stx_core_EnumValue.constructor = function(this1) {
	return $hxEnums[this1.__enum__].__constructs__[this1._hx_index];
};
stx_core_EnumValue.index = function(this1) {
	return this1._hx_index;
};
stx_core_EnumValue.alike = function(this1,that) {
	if(stx_core_EnumValue.constructor(this1) == stx_core_EnumValue.constructor(that)) {
		return stx_core_EnumValue.index(this1) == stx_core_EnumValue.index(that);
	} else {
		return false;
	}
};
stx_core_EnumValue.prj = function(this1) {
	return this1;
};
var stx_core_ErrorCode = {};
stx_core_ErrorCode._new = function(self) {
	var this1 = self;
	return this1;
};
stx_core_ErrorCode.prj = function(this1) {
	return this1;
};
stx_core_ErrorCode._ = function() {
	return stx_core__$ErrorCode_Constructor.ZERO;
};
var stx_core__$ErrorCode_Constructor = function() {
	stx_core_pack_Clazz.call(this);
};
stx_core__$ErrorCode_Constructor.__name__ = "stx.core._ErrorCode.Constructor";
stx_core__$ErrorCode_Constructor.__super__ = stx_core_pack_Clazz;
stx_core__$ErrorCode_Constructor.prototype = $extend(stx_core_pack_Clazz.prototype,{
	five_hundred: function() {
		return stx_core_error_$code_term_FiveHundred._new();
	}
	,__class__: stx_core__$ErrorCode_Constructor
});
var stx_core_ErrorMsg = {};
stx_core_ErrorMsg.create = function(this1,code,pos) {
	return new tink_core_TypedError(code,this1,pos);
};
stx_core_ErrorMsg.internal = function(this1,pos) {
	return stx_core_ErrorMsg.create(this1,500,pos);
};
var stx_core_Field = {};
stx_core_Field._new = function(self) {
	var this1 = self;
	return this1;
};
stx_core_Field.fromTup = function(tp) {
	return stx_core_Field._new(stx_core_KV.fromObj({ key : stx_core_pack_CoupleLift.fst(tp), val : stx_core_pack_CoupleLift.snd(tp)}));
};
stx_core_Field.create = function(key,val) {
	return stx_core_Field._new(stx_core_KV.fromObj({ key : key, val : val}));
};
stx_core_Field.map = function(this1,fn) {
	return stx_core_KV.map(this1,fn);
};
stx_core_Field.into = function(this1,fn) {
	return fn(this1.key,this1.val);
};
stx_core_Field.toCouple = function(this1) {
	return stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,this1.key,this1.val);
};
var stx_core_Generator = function(f,stack) {
	this.fn = function(i) {
		var o = stack[i] == null ? stack[i] = f() : stack[i];
		return o;
	};
	this.index = 0;
};
stx_core_Generator.__name__ = "stx.core.Generator";
stx_core_Generator.pure = function(fn) {
	return stx_core_Generator.create(fn,[]);
};
stx_core_Generator.create = function(fn,stack) {
	return new stx_core_Generator(fn,stack);
};
stx_core_Generator.yielding = function(fn) {
	var stack = [];
	return { iterator : function() {
		return stx_core_Generator.create(fn,stack).iterator();
	}};
};
stx_core_Generator.prototype = {
	fn: null
	,index: null
	,restart: function() {
		var next = new stx_core_Generator(null,null);
		next.fn = this.fn;
		return next;
	}
	,next: function() {
		var o;
		var _g = this.fn(this.index);
		switch(_g._hx_index) {
		case 0:
			var v = _g.v;
			o = v;
			break;
		case 1:
			o = null;
			break;
		}
		this.index++;
		return o;
	}
	,hasNext: function() {
		var o;
		var _g = this.fn(this.index);
		switch(_g._hx_index) {
		case 0:
			var _g1 = _g.v;
			o = true;
			break;
		case 1:
			o = false;
			break;
		}
		return o;
	}
	,iterator: function() {
		return { next : $bind(this,this.next), hasNext : $bind(this,this.hasNext)};
	}
	,__class__: stx_core_Generator
};
var stx_core_ID = {};
stx_core_ID.prj = function(this1) {
	return this1;
};
stx_core_ID.toString = function(this1) {
	return this1;
};
var stx_core_Ident = {};
stx_core_Ident.fromDotPath = function(str) {
	var arr = str.split(".");
	if(arr.length == 1) {
		return { name : str, pack : []};
	} else {
		var head = arr.pop();
		return { name : head, pack : arr};
	}
};
stx_core_Ident.toStructure = function(this1) {
	var tail = [];
	var _g = 0;
	var _g1 = this1.pack;
	while(_g < _g1.length) {
		var val = _g1[_g];
		++_g;
		tail.push(val);
	}
	return { name : this1.name, pack : tail};
};
stx_core_Ident.canonical = function(this1) {
	if(this1.pack.length > 0) {
		return this1.pack.concat([this1.name]).join(".");
	} else {
		return this1.name;
	}
};
var stx_core_Iter = {};
stx_core_Iter._ = function() {
	return stx_core_iter_Constructor.ZERO;
};
stx_core_Iter._new = function(self) {
	var this1 = self;
	return this1;
};
stx_core_Iter.toMap = function(this1,fn,unit) {
	return stx_core_iter_Constructor.ZERO._.toMap(this1,fn,unit);
};
stx_core_Iter.map = function(this1,fn) {
	return stx_core_iter_Constructor.ZERO._.map(this1,fn);
};
stx_core_Iter.cross = function(this1,that) {
	return stx_core_iter_Constructor.ZERO._.cross(this1,stx_core_Iter.prj(that));
};
stx_core_Iter.toArray = function(this1) {
	return Lambda.array(this1);
};
stx_core_Iter.toGenerator = function(this1) {
	return stx_core_iter_Constructor.ZERO._.toGenerator(this1);
};
stx_core_Iter.lfold = function(this1,fn,init) {
	return stx_core_iter_Constructor.ZERO._.lfold(this1,fn,init);
};
stx_core_Iter.prj = function(this1) {
	return this1;
};
var stx_core_KV = {};
stx_core_KV._new = function(self) {
	var this1 = self;
	return this1;
};
stx_core_KV.map = function(this1,fn) {
	return stx_core_KV.fromObj({ key : this1.key, val : fn(this1.val)});
};
stx_core_KV.fromObj = function(v) {
	return stx_core_KV._new(v);
};
stx_core_KV.fromTup = function(tp) {
	return stx_core_KV._new({ key : stx_core_pack_CoupleLift.fst(tp), val : stx_core_pack_CoupleLift.snd(tp)});
};
stx_core_KV.fst = function(this1) {
	return this1.key;
};
stx_core_KV.snd = function(this1) {
	return this1.val;
};
stx_core_KV.into = function(this1,fn) {
	return fn(this1.key,this1.val);
};
var stx_core_LogicalClock = function() { };
stx_core_LogicalClock.__name__ = "stx.core.LogicalClock";
stx_core_LogicalClock.get = function() {
	var st = stx_core_TimeStamp.pure;
	if(stx_core_LogicalClock.previous == null) {
		var hrtime = process.hrtime();
		return st({ realm : stx_core_LogicalClock.previous = hrtime[0] + hrtime[1] / 1e9, index : stx_core_LogicalClock.counter, exact : ++stx_core_LogicalClock.lifetime});
	} else {
		var hrtime = process.hrtime();
		var stamp = hrtime[0] + hrtime[1] / 1e9;
		if(stamp == stx_core_LogicalClock.previous) {
			return st({ realm : stamp, index : stx_core_LogicalClock.counter++, exact : ++stx_core_LogicalClock.lifetime});
		} else {
			stx_core_LogicalClock.previous = stamp;
			stx_core_LogicalClock.counter = 0;
			return st({ realm : stamp, index : stx_core_LogicalClock.counter, exact : ++stx_core_LogicalClock.lifetime});
		}
	}
};
var stx_core_Module = function() {
};
stx_core_Module.__name__ = "stx.core.Module";
stx_core_Module.prototype = {
	declare: function(brand,media,union) {
		return stx_core_Declare.make(brand,media,union);
	}
	,Future: function() {
		return new stx_core__$Module_Ft();
	}
	,__class__: stx_core_Module
};
var stx_core__$Module_Ft = function() {
	stx_core_pack_Clazz.call(this);
};
stx_core__$Module_Ft.__name__ = "stx.core._Module.Ft";
stx_core__$Module_Ft.__super__ = stx_core_pack_Clazz;
stx_core__$Module_Ft.prototype = $extend(stx_core_pack_Clazz.prototype,{
	bind_fold: function(arr,fn,init) {
		return Lambda.fold(arr,function(next,memo) {
			var ret = memo.flatMap(function(tt) {
				return fn(next,tt);
			});
			return ret.gather();
		},init);
	}
	,__class__: stx_core__$Module_Ft
});
var stx_core_Parameter = {};
stx_core_Parameter._new = function(self) {
	var this1 = self;
	return this1;
};
var stx_core_Reporter = {};
stx_core_Reporter.command = function(err) {
	throw haxe_Exception.thrown(err);
};
stx_core_Reporter._new = function() {
	var this1 = function() {
		return stx_core_Reporter.command;
	};
	return this1;
};
stx_core_Reporter.react = function(this1,err) {
	(this1())(err);
};
var stx_core_Resource = {};
stx_core_Resource.exists = function(str) {
	return Lambda.exists(haxe_Resource.listNames(),function(x) {
		return x == str;
	});
};
stx_core_Resource._new = function(str,pos) {
	if(!stx_core_Resource.exists(str)) {
		var this1 = stx_core_use_UseNano.fault(stx_core_pack_Wildcard.__,pos);
		var err = new stx_core_pack_Err(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,stx_core_pack_Failure.ERR_OF("E_ResourceNotFound")),haxe_ds_Option.None,this1);
		var this1 = function() {
			return stx_core_Reporter.command;
		};
		(this1())(err);
	}
	var this1 = str;
	return this1;
};
stx_core_Resource.string = function(this1) {
	return haxe_Resource.getString(this1);
};
stx_core_Resource.bytes = function(this1) {
	return haxe_Resource.getBytes(this1);
};
stx_core_Resource.json = function(this1) {
	return JSON.parse(stx_core_Resource.string(this1));
};
var stx_core_SourceIdent = {};
stx_core_SourceIdent._new = function(self) {
	var this1 = self;
	return this1;
};
stx_core_SourceIdent.fromPosInfos = function(p) {
	var seperate_extension = p.fileName.split(".")[0];
	var folders = seperate_extension.split("/");
	var class_path = p.className.split(".");
	var class_name = class_path.pop();
	return stx_core_SourceIdent._new({ module : stx_core_pack_Option.fromNullT(new haxe_io_Path(p.fileName)), name : class_name, pack : class_path});
};
stx_core_SourceIdent.eq = function(this1,that) {
	if(this1.name != that.name) {
		return false;
	} else if(this1.pack.length != that.pack.length) {
		return false;
	} else if(stx_core_pack_OptionLift.defv(stx_core_pack_OptionLift.map(stx_core_use_UseOptionNano.zip(this1.module,that.module),function(tp) {
		return stx_core_pack_CoupleLift.decouple(tp,function(l,r) {
			return l.toString().length != r.toString().length;
		});
	}),false)) {
		return false;
	} else {
		var _g = 0;
		var _g1 = this1.pack.length - 1;
		while(_g < _g1) {
			var i = _g++;
			if(this1.pack[i] != that.pack[i]) {
				return false;
			}
		}
		if(stx_core_pack_OptionLift.is_defined(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,this1.module)) && stx_core_pack_OptionLift.is_defined(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,that.module))) {
			var this_string = stx_core_use_UseOptionNano.fudge(this1.module).toString();
			var that_string = stx_core_use_UseOptionNano.fudge(that.module).toString();
			var _g = 0;
			var _g1 = this_string.length;
			while(_g < _g1) {
				var i = _g++;
				if(this_string.charAt(i) != that_string.charAt(i)) {
					return false;
				}
			}
		}
		return true;
	}
};
stx_core_SourceIdent.toString = function(this1) {
	var _g = this1.pack;
	var _g1 = this1.module;
	if(_g1 == null) {
		if(_g.length == 0) {
			return this1.name;
		} else {
			var arr = _g;
			var next = [this1.name];
			var _g2 = 0;
			while(_g2 < arr.length) {
				var v = arr[_g2];
				++_g2;
				next.push(v);
			}
			return next.join(".");
		}
	} else if(_g.length == 0) {
		var md = _g1;
		return "" + Std.string(md) + "." + this1.name;
	} else {
		var md = _g1;
		var arr = _g;
		return "" + Std.string(md) + "." + this1.name;
	}
};
var stx_core_TimeStamp = {};
stx_core_TimeStamp._new = function(self) {
	var this1 = self;
	return this1;
};
stx_core_TimeStamp.pure = function(v) {
	return stx_core_TimeStamp._new(v);
};
stx_core_TimeStamp.get_realm = function(this1) {
	return this1.realm;
};
stx_core_TimeStamp.get_index = function(this1) {
	return this1.index;
};
stx_core_TimeStamp.get_exact = function(this1) {
	return this1.exact;
};
stx_core_TimeStamp.lt = function(this1,that) {
	return this1.exact < stx_core_TimeStamp.get_exact(that);
};
stx_core_TimeStamp.eq = function(this1,that) {
	return this1.realm == stx_core_TimeStamp.get_realm(that);
};
var stx_core_Unfold = {};
stx_core_Unfold.fromFunction = function(fn) {
	var unfolder = fn;
	return function(initial) {
		var initial1 = initial;
		var unfolder1 = unfolder;
		return { iterator : function() {
			var _next = haxe_ds_Option.None;
			var _progress = initial1;
			var precomputeNext = function() {
				var _g = unfolder1(_progress);
				switch(_g._hx_index) {
				case 0:
					var tup = _g.v;
					_progress = stx_core_pack_CoupleLift.fst(tup);
					_next = haxe_ds_Option.Some(stx_core_pack_CoupleLift.snd(tup));
					break;
				case 1:
					_progress = null;
					_next = haxe_ds_Option.None;
					break;
				}
			};
			precomputeNext();
			return { hasNext : function() {
				if(_next._hx_index == 0) {
					var _g = _next.v;
					return true;
				} else {
					return false;
				}
			}, next : function() {
				var n;
				if(_next._hx_index == 0) {
					var v = _next.v;
					n = v;
				} else {
					n = null;
				}
				precomputeNext();
				return n;
			}};
		}};
	};
};
stx_core_Unfold._new = function(v) {
	var this1 = v;
	return this1;
};
stx_core_Unfold.unfold = function(initial,unfolder) {
	return { iterator : function() {
		var _next = haxe_ds_Option.None;
		var _progress = initial;
		var precomputeNext = function() {
			var _g = unfolder(_progress);
			switch(_g._hx_index) {
			case 0:
				var tup = _g.v;
				_progress = stx_core_pack_CoupleLift.fst(tup);
				_next = haxe_ds_Option.Some(stx_core_pack_CoupleLift.snd(tup));
				break;
			case 1:
				_progress = null;
				_next = haxe_ds_Option.None;
				break;
			}
		};
		precomputeNext();
		return { hasNext : function() {
			if(_next._hx_index == 0) {
				var _g = _next.v;
				return true;
			} else {
				return false;
			}
		}, next : function() {
			var n;
			if(_next._hx_index == 0) {
				var v = _next.v;
				n = v;
			} else {
				n = null;
			}
			precomputeNext();
			return n;
		}};
	}};
};
var stx_core_Variable = {};
stx_core_Variable._new = function(self) {
	var this1 = self;
	return this1;
};
stx_core_Variable.map = function(this1,fn) {
	return stx_core_Variable._new(stx_core_pack_Couple._.map(this1,function(x) {
		return stx_core_pack_OptionLift.map(x,fn);
	}));
};
stx_core_Variable.make = function(k,v) {
	var vOpt = v == null ? haxe_ds_Option.None : haxe_ds_Option.Some(v);
	return stx_core_Variable._new(stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,k,vOpt));
};
var stx_core_chars_Constructor = function() {
	this._ = new stx_core_chars_Destructure();
	stx_core_pack_Clazz.call(this);
};
stx_core_chars_Constructor.__name__ = "stx.core.chars.Constructor";
stx_core_chars_Constructor.__super__ = stx_core_pack_Clazz;
stx_core_chars_Constructor.prototype = $extend(stx_core_pack_Clazz.prototype,{
	_: null
	,__class__: stx_core_chars_Constructor
});
var stx_core_chars_Destructure = function() {
	stx_core_pack_Clazz.call(this);
};
stx_core_chars_Destructure.__name__ = "stx.core.chars.Destructure";
stx_core_chars_Destructure.__super__ = stx_core_pack_Clazz;
stx_core_chars_Destructure.prototype = $extend(stx_core_pack_Clazz.prototype,{
	parse_bool: function(self) {
		var vLower = self.toLowerCase();
		switch(vLower) {
		case "false":
			return haxe_ds_Option.Some(false);
		case "true":
			switch(self) {
			case "0":
				return haxe_ds_Option.Some(false);
			case "1":
				return haxe_ds_Option.Some(true);
			default:
				return haxe_ds_Option.Some(true);
			}
			break;
		default:
			switch(self) {
			case "0":
				return haxe_ds_Option.Some(false);
			case "1":
				return haxe_ds_Option.Some(true);
			default:
				return haxe_ds_Option.None;
			}
		}
	}
	,parse_int: function(self) {
		return stx_core_pack_OptionLift.filter(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,Std.parseInt(self)),function(i) {
			return !isNaN(i);
		});
	}
	,parse_float: function(self) {
		return stx_core_pack_OptionLift.filter(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,parseFloat(self)),function(i) {
			return !isNaN(i);
		});
	}
	,starts_with: function(frag,self) {
		if(self.length >= frag.length && frag == HxOverrides.substr(self,0,frag.length)) {
			return true;
		} else {
			return false;
		}
	}
	,ends_with: function(frag,self) {
		if(self.length >= frag.length && frag == HxOverrides.substr(self,self.length - frag.length,null)) {
			return true;
		} else {
			return false;
		}
	}
	,contains: function(substr,self) {
		return self.indexOf(substr) != -1;
	}
	,replace: function(sub,by,self) {
		return StringTools.replace(self,sub,by);
	}
	,brackets: function(l,r,self) {
		return "" + l + self + r;
	}
	,prepend: function(before,self) {
		return stx_core_Chars.add(before,self);
	}
	,append: function(after,self) {
		return stx_core_Chars.add(self,after);
	}
	,cca: function(i,self) {
		return HxOverrides.cca(self,i);
	}
	,at: function(i,self) {
		return self.charAt(i);
	}
	,chunk: function(len,self) {
		if(len == null) {
			len = 1;
		}
		var start = 0;
		var end = Math.round(Math.min(start + len,self.length));
		if(end == 0) {
			return [];
		} else {
			var prefix = HxOverrides.substr(self,start,end);
			var rest = HxOverrides.substr(self,end,null);
			return [prefix].concat(this.chunk(len,rest));
		}
	}
	,chars: function(self) {
		var a = [];
		var _g = 0;
		var _g1 = self.length;
		while(_g < _g1) {
			var i = _g++;
			a.push(self.charAt(i));
		}
		return a;
	}
	,split: function(sep,self) {
		return self.split(sep);
	}
	,strip_white: function(self) {
		var l = self.length;
		var i = 0;
		var sb_b = "";
		while(i < l) {
			if(!this.is_space(i,self)) {
				sb_b += Std.string(self.charAt(i));
			}
			++i;
		}
		return sb_b;
	}
	,replace_recurse: function(sub,by,self) {
		if(sub.length == 0) {
			return this.replace(self,sub,by);
		}
		if(by.indexOf(sub) >= 0) {
			throw haxe_Exception.thrown("Infinite recursion");
		}
		var ns = self.toString();
		var olen = 0;
		var nlen = ns.length;
		while(olen != nlen) {
			olen = ns.length;
			this.replace(sub,by,ns);
			nlen = ns.length;
		}
		return ns;
	}
	,iterator: function(self) {
		var index = 0;
		return { hasNext : function() {
			return index < self.length;
		}, next : function() {
			if(index < self.length) {
				index += 1;
				return HxOverrides.substr(self,index - 1,1);
			} else {
				var this1 = stx_core_use_UseNano.fault(stx_core_pack_Wildcard.__,{ fileName : "stx/core/chars/Destructure.hx", lineNumber : 168, className : "stx.core.chars.Destructure", methodName : "iterator"});
				throw haxe_Exception.thrown(new stx_core_pack_Err(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,stx_core_pack_Failure.ERR_OF("E_IndexOutOfBounds")),haxe_ds_Option.None,this1));
			}
		}};
	}
	,is_space: function(pos,self) {
		var c = HxOverrides.cca(self,pos);
		if(!(c >= 9 && c <= 13)) {
			return c == 32;
		} else {
			return true;
		}
	}
	,chr: function(i) {
		return String.fromCodePoint(i);
	}
	,underscore: function(s) {
		var _this_r = new RegExp("::","g".split("u").join(""));
		s = s.replace(_this_r,"/");
		var _this_r = new RegExp("([A-Z]+)([A-Z][a-z])","g".split("u").join(""));
		s = s.replace(_this_r,"$1_$2");
		var _this_r = new RegExp("([a-z\\d])([A-Z])","g".split("u").join(""));
		s = s.replace(_this_r,"$1_$2");
		var _this_r = new RegExp("-","g".split("u").join(""));
		s = s.replace(_this_r,"_");
		return s.toLowerCase();
	}
	,after: function(sub,self) {
		var idx = self.indexOf(sub);
		if(idx < 0) {
			return "";
		}
		return self.substring(idx + sub.length,self.length);
	}
	,before: function(sub,self) {
		return self.substring(0,self.indexOf(sub));
	}
	,quote: function(str) {
		return "\"" + str + "\"";
	}
	,requote: function(str) {
		return stx_core_chars_Implementation.replace(str,"\"","\\\"");
	}
	,__class__: stx_core_chars_Destructure
});
var stx_core_chars_Implementation = function() { };
stx_core_chars_Implementation.__name__ = "stx.core.chars.Implementation";
stx_core_chars_Implementation._ = function() {
	return stx_core_chars_Constructor.ZERO._;
};
stx_core_chars_Implementation.parse_bool = function(self) {
	return stx_core_chars_Constructor.ZERO._.parse_bool(self);
};
stx_core_chars_Implementation.parse_int = function(self) {
	return stx_core_chars_Constructor.ZERO._.parse_int(self);
};
stx_core_chars_Implementation.parse_float = function(self) {
	return stx_core_chars_Constructor.ZERO._.parse_float(self);
};
stx_core_chars_Implementation.starts_with = function(self,frag) {
	return stx_core_chars_Constructor.ZERO._.starts_with(frag,self);
};
stx_core_chars_Implementation.ends_with = function(self,frag) {
	return stx_core_chars_Constructor.ZERO._.ends_with(frag,self);
};
stx_core_chars_Implementation.contains = function(self,substr) {
	return stx_core_chars_Constructor.ZERO._.contains(substr,self);
};
stx_core_chars_Implementation.replace = function(self,sub,by) {
	return stx_core_chars_Constructor.ZERO._.replace(sub,by,self);
};
stx_core_chars_Implementation.brackets = function(self,l,r) {
	return stx_core_chars_Constructor.ZERO._.brackets(l,r,self);
};
stx_core_chars_Implementation.prepend = function(self,before) {
	return stx_core_chars_Constructor.ZERO._.prepend(before,self);
};
stx_core_chars_Implementation.append = function(self,after) {
	return stx_core_chars_Constructor.ZERO._.append(after,self);
};
stx_core_chars_Implementation.cca = function(self,i) {
	return stx_core_chars_Constructor.ZERO._.cca(i,self);
};
stx_core_chars_Implementation.at = function(self,i) {
	return stx_core_chars_Constructor.ZERO._.at(i,self);
};
stx_core_chars_Implementation.chunk = function(self,len) {
	if(len == null) {
		len = 1;
	}
	return stx_core_chars_Constructor.ZERO._.chunk(len,self);
};
stx_core_chars_Implementation.chars = function(self) {
	return stx_core_chars_Constructor.ZERO._.chars(self);
};
stx_core_chars_Implementation.split = function(self,sep) {
	return stx_core_chars_Constructor.ZERO._.split(sep,self);
};
stx_core_chars_Implementation.strip_white = function(self) {
	return stx_core_chars_Constructor.ZERO._.strip_white(self);
};
stx_core_chars_Implementation.replace_recurse = function(self,sub,by) {
	return stx_core_chars_Constructor.ZERO._.replace_recurse(sub,by,self);
};
stx_core_chars_Implementation.iterator = function(self) {
	return stx_core_chars_Constructor.ZERO._.iterator(self);
};
stx_core_chars_Implementation.is_space = function(self,pos) {
	return stx_core_chars_Constructor.ZERO._.is_space(pos,self);
};
stx_core_chars_Implementation.underscore = function(self) {
	return stx_core_chars_Constructor.ZERO._.underscore(self);
};
stx_core_chars_Implementation.after = function(self,sub) {
	return stx_core_chars_Constructor.ZERO._.after(sub,self);
};
stx_core_chars_Implementation.before = function(self,sub) {
	return stx_core_chars_Constructor.ZERO._.before(sub,self);
};
stx_core_chars_Implementation.quote = function(self) {
	return stx_core_chars_Constructor.ZERO._.quote(self);
};
stx_core_chars_Implementation.requote = function(self) {
	return stx_core_chars_Constructor.ZERO._.requote(self);
};
var stx_core_chunk_Constructor = function() {
	this._ = new stx_core_chunk_Destructure();
	stx_core_pack_Clazz.call(this);
};
stx_core_chunk_Constructor.__name__ = "stx.core.chunk.Constructor";
stx_core_chunk_Constructor.__super__ = stx_core_pack_Clazz;
stx_core_chunk_Constructor.prototype = $extend(stx_core_pack_Clazz.prototype,{
	_: null
	,pure: function(c) {
		if(c == null) {
			return stx_core_type_ChunkSum.Tap;
		} else {
			return stx_core_type_ChunkSum.Val(c);
		}
	}
	,all: function(arr,TapFail) {
		return Lambda.fold(arr,function(next,memo) {
			switch(memo._hx_index) {
			case 0:
				var _g = memo.v;
				switch(next._hx_index) {
				case 0:
					var memo1 = _g;
					var next1 = next.v;
					memo1.push(next1);
					return stx_core_type_ChunkSum.Val(memo1);
				case 1:
					var v = _g;
					if(TapFail == null) {
						return stx_core_type_ChunkSum.Tap;
					} else {
						return stx_core_type_ChunkSum.End(TapFail);
					}
					break;
				case 2:
					var memo1 = _g;
					var e = next.err;
					return stx_core_type_ChunkSum.End(e);
				}
				break;
			case 2:
				var _g = memo.err;
				switch(next._hx_index) {
				case 1:
					var e = _g;
					var err = stx_core_pack_OptionLift.defv(stx_core_pack_OptionLift.map(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,e),function(e) {
						return e.next(TapFail);
					}),TapFail);
					return stx_core_type_ChunkSum.End(err);
				case 2:
					var e = _g;
					var e0 = next.err;
					var err = Lambda.fold(stx_core_pack_OptionLift.toArray(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,e)).concat(stx_core_pack_OptionLift.toArray(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,e0))),function(nx,mm) {
						return mm.next(nx);
					},TapFail);
					return stx_core_type_ChunkSum.End(err);
				default:
					var e = _g;
					return stx_core_type_ChunkSum.End(e);
				}
				break;
			default:
				if(TapFail == null) {
					return stx_core_type_ChunkSum.Tap;
				} else {
					return stx_core_type_ChunkSum.End(TapFail);
				}
			}
		},stx_core_type_ChunkSum.Val([]));
	}
	,available: function(rest) {
		return Lambda.fold(rest,function(next,memo) {
			if(memo._hx_index == 0) {
				var xs = memo.v;
				switch(next._hx_index) {
				case 0:
					var x = next.v;
					xs.push(x);
					return stx_core_type_ChunkSum.Val(xs);
				case 1:
					return stx_core_type_ChunkSum.Val(xs);
				case 2:
					var e = next.err;
					return stx_core_type_ChunkSum.End(e);
				}
			} else {
				return memo;
			}
		},stx_core_type_ChunkSum.Val([]));
	}
	,fromTinkOutcome: function(outcome) {
		var tmp;
		switch(outcome._hx_index) {
		case 0:
			var v = outcome.data;
			tmp = this.pure(v);
			break;
		case 1:
			var e = outcome.failure;
			tmp = stx_core_type_ChunkSum.End(e);
			break;
		}
		return stx_core_Chunk._new(tmp);
	}
	,fromOption: function(opt) {
		switch(opt._hx_index) {
		case 0:
			var v = opt.v;
			return stx_core_type_ChunkSum.Val(v);
		case 1:
			return stx_core_type_ChunkSum.Tap;
		}
	}
	,fromOptionError: function(opt) {
		switch(opt._hx_index) {
		case 0:
			var v = opt.v;
			return stx_core_type_ChunkSum.End(v);
		case 1:
			return stx_core_type_ChunkSum.Tap;
		}
	}
	,__class__: stx_core_chunk_Constructor
});
var stx_core_chunk_Destructure = function() {
	stx_core_pack_Clazz.call(this);
};
stx_core_chunk_Destructure.__name__ = "stx.core.chunk.Destructure";
stx_core_chunk_Destructure.__super__ = stx_core_pack_Clazz;
stx_core_chunk_Destructure.prototype = $extend(stx_core_pack_Clazz.prototype,{
	def: function(fn,self) {
		switch(self._hx_index) {
		case 0:
			var v = self.v;
			return v;
		case 1:
			return fn();
		case 2:
			var e = self.err;
			throw haxe_Exception.thrown(e);
		}
	}
	,fold: function(val,ers,tap,chk) {
		switch(chk._hx_index) {
		case 0:
			var v = chk.v;
			return val(v);
		case 1:
			return tap();
		case 2:
			var e = chk.err;
			return ers(e);
		}
	}
	,map: function(fn,self) {
		switch(self._hx_index) {
		case 0:
			var v = self.v;
			var o = fn(v);
			return stx_core_Chunk.pure(o);
		case 1:
			return stx_core_type_ChunkSum.Tap;
		case 2:
			var err = self.err;
			return stx_core_type_ChunkSum.End(err);
		}
	}
	,flatten: function(self) {
		return this.flat_map(function(x) {
			return x;
		},self);
	}
	,flat_map: function(fn,self) {
		switch(self._hx_index) {
		case 0:
			var v = self.v;
			return fn(v);
		case 1:
			return stx_core_type_ChunkSum.Tap;
		case 2:
			var err = self.err;
			return stx_core_type_ChunkSum.End(err);
		}
	}
	,recover: function(fn,self) {
		switch(self._hx_index) {
		case 0:
			var v = self.v;
			return stx_core_type_ChunkSum.Val(v);
		case 1:
			return stx_core_type_ChunkSum.Tap;
		case 2:
			var err = self.err;
			return fn(err);
		}
	}
	,errata: function(fn,self) {
		return this.recover(function(x) {
			return stx_core_type_ChunkSum.End(fn(x));
		},self);
	}
	,zip: function(that,self) {
		switch(self._hx_index) {
		case 0:
			var v = self.v;
			switch(that._hx_index) {
			case 0:
				var v0 = that.v;
				return stx_core_type_ChunkSum.Val(stx_core_use_UseNano.toCouple(stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,v,v0)));
			case 1:
				return stx_core_type_ChunkSum.Tap;
			case 2:
				var err = that.err;
				return stx_core_type_ChunkSum.End(err);
			}
			break;
		case 1:
			return stx_core_type_ChunkSum.Tap;
		case 2:
			var err = self.err;
			if(that._hx_index == 2) {
				var err0 = that.err;
				return stx_core_type_ChunkSum.End(err.next(err0));
			} else {
				return stx_core_type_ChunkSum.Tap;
			}
			break;
		}
	}
	,valueOption: function(chk) {
		switch(chk._hx_index) {
		case 0:
			var v = chk.v;
			return haxe_ds_Option.Some(v);
		case 1:
			return haxe_ds_Option.None;
		case 2:
			var _g = chk.err;
			return haxe_ds_Option.None;
		}
	}
	,is_defined: function(self) {
		return this.fold(function(_) {
			return true;
		},function(_) {
			return false;
		},function() {
			return false;
		},self);
	}
	,opt_else: function(_if,_else,self) {
		return this.fold(_if,function(e) {
			var tmp = stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,e);
			return _else(tmp);
		},function() {
			return _else(haxe_ds_Option.None);
		},self);
	}
	,fudge: function(pos,self) {
		if(self == null) {
			throw haxe_Exception.thrown("no self to push on");
		} else {
			switch(self._hx_index) {
			case 0:
				var v = self.v;
				return v;
			case 1:
				throw haxe_Exception.thrown("Value not found on force");
			case 2:
				var _g = self.err;
				if(_g == null) {
					throw haxe_Exception.thrown("Value not found on force");
				} else {
					var err = _g;
					throw haxe_Exception.thrown(err);
				}
				break;
			}
		}
	}
	,iterator: function(self) {
		var done = false;
		return { hasNext : function() {
			if(!done) {
				return stx_core_EnumValue.alike(stx_core_EnumValue._new(self),stx_core_EnumValue._new(stx_core_type_ChunkSum.Val(null)));
			} else {
				return false;
			}
		}, next : function() {
			done = true;
			if(self._hx_index == 0) {
				var v = self.v;
				return v;
			} else {
				return null;
			}
		}};
	}
	,__class__: stx_core_chunk_Destructure
});
var stx_core_contract_Constructor = function() {
	this._ = new stx_core_contract_Destructure();
	stx_core_pack_Clazz.call(this);
};
stx_core_contract_Constructor.__name__ = "stx.core.contract.Constructor";
stx_core_contract_Constructor.__super__ = stx_core_pack_Clazz;
stx_core_contract_Constructor.prototype = $extend(stx_core_pack_Clazz.prototype,{
	_: null
	,unit: function() {
		return stx_core_Contract.pure(stx_core_type_ChunkSum.Tap);
	}
	,pure: function(ch) {
		return tink_core_Future.async(function(f) {
			f(ch);
		});
	}
	,bind_fold: function(it,start,fm) {
		var _gthis = this;
		return stx_core_Contract._new(stx_LiftStd.core(stx_core_pack_Wildcard.__).Future().bind_fold(it,function(next,memo) {
			switch(memo._hx_index) {
			case 0:
				var v = memo.v;
				return stx_core_Contract.prj(fm(v,next));
			case 1:
				return stx_core_Contract.prj(_gthis.unit());
			case 2:
				var err = memo.err;
				return stx_core_Contract.prj(_gthis.end(err));
			}
		},new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(stx_core_type_ChunkSum.Val(start)))));
	}
	,lazy: function(fn) {
		return stx_core_Contract.lift(tink_core_Future.async(function(f) {
			f(stx_core_type_ChunkSum.Val(fn()));
		}));
	}
	,fromLazyError: function(fn) {
		return this.fromLazyChunk(function() {
			return stx_core_type_ChunkSum.End(fn());
		});
	}
	,fromLazyChunk: function(fn) {
		return tink_core_Future.async(function(f) {
			f(fn());
		});
	}
	,end: function(e) {
		return this.pure(stx_core_type_ChunkSum.End(e));
	}
	,tap: function() {
		return this.unit();
	}
	,fromChunk: function(chk) {
		return tink_core_Future.async(function(cb) {
			cb(chk);
		});
	}
	,fromOption: function(m) {
		var val = stx_core_pack_OptionLift.fold(m,function(x) {
			return stx_core_type_ChunkSum.Val(x);
		},function() {
			return stx_core_type_ChunkSum.Tap;
		});
		return this.fromChunk(val);
	}
	,__class__: stx_core_contract_Constructor
});
var stx_core_contract_Destructure = function() {
	stx_core_pack_Clazz.call(this);
};
stx_core_contract_Destructure.__name__ = "stx.core.contract.Destructure";
stx_core_contract_Destructure.__super__ = stx_core_pack_Clazz;
stx_core_contract_Destructure.prototype = $extend(stx_core_pack_Clazz.prototype,{
	zip: function(that,self) {
		var ret = stx_core_lift_LiftFuture.zip(stx_core_Contract.prj(self),stx_core_Contract.prj(that)).map(function(tp) {
			return stx_core_Chunk.zip(stx_core_pack_CoupleLift.fst(tp),stx_core_pack_CoupleLift.snd(tp));
		});
		var out = ret.gather();
		return out;
	}
	,map: function(fn,self) {
		var ret = stx_core_Contract.prj(self).map(function(x) {
			switch(x._hx_index) {
			case 0:
				var v = x.v;
				return stx_core_type_ChunkSum.Val(fn(v));
			case 1:
				return stx_core_type_ChunkSum.Tap;
			case 2:
				var err = x.err;
				return stx_core_type_ChunkSum.End(err);
			}
		});
		return stx_core_Contract.lift(ret.gather());
	}
	,flat_map: function(fn,self) {
		var ft = stx_core_Contract.prj(self);
		var ret = ft.flatMap(function(x) {
			switch(x._hx_index) {
			case 0:
				var v = x.v;
				return stx_core_Contract.prj(fn(v));
			case 1:
				return stx_core_Contract.prj(stx_core_Contract._new(new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(stx_core_type_ChunkSum.Tap))));
			case 2:
				var err = x.err;
				return stx_core_Contract.prj(stx_core_Contract.fromChunk(stx_core_type_ChunkSum.End(err)));
			}
		});
		return ret.gather();
	}
	,fold: function(val,ers,nil,self) {
		var _g = ($_=stx_core_chunk_Constructor.ZERO._,$bind($_,$_.fold));
		var val1 = val;
		var ers1 = ers;
		var tap = nil;
		var ret = function(chk) {
			return _g(val1,ers1,tap,chk);
		};
		var ret1 = stx_core_Contract.prj(self).map(ret);
		return ret1.gather();
	}
	,recover: function(fn,self) {
		return stx_core_Contract.lift(this.fold(function(x) {
			return stx_core_type_ChunkSum.Val(x);
		},function(e) {
			return fn(e);
		},function() {
			return stx_core_type_ChunkSum.Tap;
		},self));
	}
	,attempt: function(fn,self) {
		return this.fold(function(x) {
			return fn(x);
		},function(v) {
			return stx_core_type_ChunkSum.End(v);
		},function() {
			return stx_core_type_ChunkSum.Tap;
		},self);
	}
	,receive: function(fn,self) {
		var ret = stx_core_Contract.prj(self).map(function(chk) {
			switch(chk._hx_index) {
			case 0:
				var v = chk.v;
				fn(v);
				return haxe_ds_Option.None;
			case 1:
				return haxe_ds_Option.None;
			case 2:
				var e = chk.err;
				return stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,e);
			}
		});
		return ret.gather();
	}
	,now: function(self) {
		var out = null;
		stx_core_Contract.prj(self).handle(function(v) {
			out = v;
		});
		if(out == null) {
			out = stx_core_type_ChunkSum.Tap;
		}
		return out;
	}
	,errata: function(fn,self) {
		var ret = stx_core_Contract.prj(self).map(function(chk) {
			return stx_core_Chunk.errata(chk,fn);
		});
		return ret.gather();
	}
	,__class__: stx_core_contract_Destructure
});
var stx_core_error_$code_term_FiveHundred = {};
stx_core_error_$code_term_FiveHundred._new = function() {
	var this1 = stx_core_ErrorCode._new(500);
	return this1;
};
var stx_core_iter_Constructor = function() {
	this._ = new stx_core_iter_Destructure();
	stx_core_pack_Clazz.call(this);
};
stx_core_iter_Constructor.__name__ = "stx.core.iter.Constructor";
stx_core_iter_Constructor.__super__ = stx_core_pack_Clazz;
stx_core_iter_Constructor.prototype = $extend(stx_core_pack_Clazz.prototype,{
	_: null
	,__class__: stx_core_iter_Constructor
});
var stx_core_iter_Destructure = function() {
	stx_core_pack_Clazz.call(this);
};
stx_core_iter_Destructure.__name__ = "stx.core.iter.Destructure";
stx_core_iter_Destructure.__super__ = stx_core_pack_Clazz;
stx_core_iter_Destructure.prototype = $extend(stx_core_pack_Clazz.prototype,{
	cross: function(self,that) {
		return { iterator : function() {
			var l_it = $getIterator(self);
			var r_it = $getIterator(that);
			var l_val = null;
			var rec = null;
			rec = function() {
				if(l_val != null && l_it.hasNext()) {
					l_val = l_it.next();
				}
				if(r_it.hasNext()) {
					var rec1 = r_it.next();
					return stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,l_val,rec1);
				} else {
					if(l_it.hasNext()) {
						r_it = $getIterator(that);
					}
					l_val = null;
					return rec();
				}
			};
			return { next : rec, hasNext : function() {
				if(!l_it.hasNext()) {
					return r_it.hasNext();
				} else {
					return false;
				}
			}};
		}};
	}
	,zip: function(l,r) {
		return { iterator : function() {
			var lit = $getIterator(l);
			var rit = $getIterator(r);
			return { next : function() {
				return stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,lit.next(),rit.next());
			}, hasNext : function() {
				if(lit.hasNext()) {
					return rit.hasNext();
				} else {
					return false;
				}
			}};
		}};
	}
	,ldrop: function(it,n) {
		return { iterator : function() {
			var iter = $getIterator(it);
			while(n > 0) {
				iter.next();
				n -= 1;
			}
			return iter;
		}};
	}
	,tail: function(it) {
		return this.ldrop(it,1);
	}
	,toMap: function(iter,fn,map) {
		var i = $getIterator(iter);
		while(i.hasNext()) {
			var i1 = i.next();
			var kv = fn(i1);
			stx_core_pack_CoupleLift.decouple(kv,$bind(map,map.set));
		}
		return map;
	}
	,map: function(iter,fn) {
		return { iterator : function() {
			var i = $getIterator(iter);
			return { next : function() {
				var tmp = i.next();
				return fn(tmp);
			}, hasNext : function() {
				return i.hasNext();
			}};
		}};
	}
	,lfold: function(iter,mapper,seed) {
		var folded = seed;
		var e = $getIterator(iter);
		while(e.hasNext()) {
			var e1 = e.next();
			folded = mapper(e1,folded);
		}
		return folded;
	}
	,toGenerator: function(self) {
		var iter = haxe_ds_Option.None;
		return function() {
			if(iter == haxe_ds_Option.None) {
				iter = haxe_ds_Option.Some($getIterator(self));
			}
			return stx_core_pack_OptionLift.flat_map(iter,function(x) {
				if(x.hasNext()) {
					return haxe_ds_Option.Some(x.next());
				} else {
					return haxe_ds_Option.None;
				}
			});
		};
	}
	,__class__: stx_core_iter_Destructure
});
var stx_core_lift_LiftArrayToIter = function() { };
stx_core_lift_LiftArrayToIter.__name__ = "stx.core.lift.LiftArrayToIter";
stx_core_lift_LiftArrayToIter.toIter = function(arr) {
	return arr;
};
var stx_core_lift_LiftBoolToPrimitive = function() { };
stx_core_lift_LiftBoolToPrimitive.__name__ = "stx.core.lift.LiftBoolToPrimitive";
stx_core_lift_LiftBoolToPrimitive.toPrimitive = function(b) {
	return stx_core_pack_PrimitiveDef.PBool(b);
};
var stx_core_lift_LiftCoupleToField = function() { };
stx_core_lift_LiftCoupleToField.__name__ = "stx.core.lift.LiftCoupleToField";
stx_core_lift_LiftCoupleToField.toField = function(tp) {
	return stx_core_Field.fromTup(tp);
};
var stx_core_lift_LiftErrToChunk = function() { };
stx_core_lift_LiftErrToChunk.__name__ = "stx.core.lift.LiftErrToChunk";
stx_core_lift_LiftErrToChunk.toChunk = function(err) {
	return stx_core_Chunk.fromError(err);
};
var stx_core_lift_LiftFunXRToGenerator = function() { };
stx_core_lift_LiftFunXRToGenerator.__name__ = "stx.core.lift.LiftFunXRToGenerator";
stx_core_lift_LiftFunXRToGenerator.toGenerator = function(fn) {
	return stx_core_Generator.yielding(fn);
};
var stx_core_lift_LiftFuture = function() { };
stx_core_lift_LiftFuture.__name__ = "stx.core.lift.LiftFuture";
stx_core_lift_LiftFuture.zip = function(self,that) {
	var done = false;
	var left = haxe_ds_Option.None;
	var right = haxe_ds_Option.None;
	var trigger = new tink_core_FutureTrigger();
	var on_done = function() {
		var on_done = left._hx_index == 0;
	};
	var l_handler = function(l) {
		left = haxe_ds_Option.Some(l);
		on_done();
	};
	var r_handler = function(r) {
		right = haxe_ds_Option.Some(r);
		on_done();
	};
	self.handle(l_handler);
	that.handle(r_handler);
	return trigger;
};
stx_core_lift_LiftFuture.tryAndThenCancelIfNotAvailable = function(ft) {
	var output = haxe_ds_Option.None;
	var canceller = ft.handle(function(x) {
		output = haxe_ds_Option.Some(x);
	});
	if(!stx_core_pack_OptionLift.is_defined(output)) {
		if(canceller != null) {
			canceller.cancel();
		}
	}
	return output;
};
var stx_core_lift_LiftIMapToArrayKV = function() { };
stx_core_lift_LiftIMapToArrayKV.__name__ = "stx.core.lift.LiftIMapToArrayKV";
stx_core_lift_LiftIMapToArrayKV.fromIMap = function(map) {
	var out = [];
	var _g = map.keyValueIterator();
	while(_g.hasNext()) {
		var _g1 = _g.next();
		var key = _g1.key;
		var val = _g1.value;
		out.push(stx_core_KV.fromTup(stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,key,val)));
	}
	return out;
};
var stx_core_lift_LiftIntToPrimitive = function() { };
stx_core_lift_LiftIntToPrimitive.__name__ = "stx.core.lift.LiftIntToPrimitive";
stx_core_lift_LiftIntToPrimitive.toPrimitive = function(i) {
	return stx_core_pack_PrimitiveDef.PInt(i);
};
var stx_core_lift_LiftIterOfFieldToStringMap = function() { };
stx_core_lift_LiftIterOfFieldToStringMap.__name__ = "stx.core.lift.LiftIterOfFieldToStringMap";
stx_core_lift_LiftIterOfFieldToStringMap.toMap = function(iter) {
	return stx_core_iter_Constructor.ZERO._.toMap(iter,function(f) {
		return stx_core_Field.toCouple(f);
	},new haxe_ds_StringMap());
};
var stx_core_lift_LiftIterableToIter = function() { };
stx_core_lift_LiftIterableToIter.__name__ = "stx.core.lift.LiftIterableToIter";
stx_core_lift_LiftIterableToIter.toIter = function(it) {
	return it;
};
var stx_core_lift_LiftIteratorToIter = function() { };
stx_core_lift_LiftIteratorToIter.__name__ = "stx.core.lift.LiftIteratorToIter";
stx_core_lift_LiftIteratorToIter.toIter = function(it) {
	return { iterator : function() {
		return it;
	}};
};
var stx_core_lift_LiftMapToIter = function() { };
stx_core_lift_LiftMapToIter.__name__ = "stx.core.lift.LiftMapToIter";
stx_core_lift_LiftMapToIter.toIter = function(map) {
	return { iterator : function() {
		var source = map.keyValueIterator();
		return { next : function() {
			var out = source.next();
			return stx_core_KV.fromObj({ key : out.key, val : out.value});
		}, hasNext : $bind(source,source.hasNext)};
	}};
};
var stx_core_lift_LiftOptionToChunk = function() { };
stx_core_lift_LiftOptionToChunk.__name__ = "stx.core.lift.LiftOptionToChunk";
stx_core_lift_LiftOptionToChunk.toChunk = function(opt) {
	switch(opt._hx_index) {
	case 0:
		var v = opt.v;
		return stx_core_type_ChunkSum.Val(v);
	case 1:
		return stx_core_type_ChunkSum.Tap;
	}
};
var stx_core_lift_LiftPath = function() { };
stx_core_lift_LiftPath.__name__ = "stx.core.lift.LiftPath";
stx_core_lift_LiftPath.sep = function(path) {
	if(path.backslash) {
		return "\\";
	} else {
		return "/";
	}
};
stx_core_lift_LiftPath.split = function(path) {
	return path.toString().split(stx_core_lift_LiftPath.sep(path));
};
var stx_core_lift_LiftStringMapToIter = function() { };
stx_core_lift_LiftStringMapToIter.__name__ = "stx.core.lift.LiftStringMapToIter";
stx_core_lift_LiftStringMapToIter.toIter = function(map) {
	return stx_core_Iter.map(stx_core_lift_LiftMapToIter.toIter(map),function(x) {
		return stx_core_Field._new(x);
	});
};
var stx_core_lift_LiftStringToIdent = function() { };
stx_core_lift_LiftStringToIdent.__name__ = "stx.core.lift.LiftStringToIdent";
stx_core_lift_LiftStringToIdent.ident = function(__,str) {
	return stx_core_Ident.fromDotPath(str);
};
var stx_core_lift_LiftStringToResource = function() { };
stx_core_lift_LiftStringToResource.__name__ = "stx.core.lift.LiftStringToResource";
stx_core_lift_LiftStringToResource.resource = function(stx,str,pos) {
	if(!stx_core_Resource.exists(str)) {
		var this1 = stx_core_use_UseNano.fault(stx_core_pack_Wildcard.__,pos);
		var err = new stx_core_pack_Err(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,stx_core_pack_Failure.ERR_OF("E_ResourceNotFound")),haxe_ds_Option.None,this1);
		var this1 = function() {
			return stx_core_Reporter.command;
		};
		(this1())(err);
	}
	var this1 = str;
	return this1;
};
var stx_core_lift_LiftTinkOutcomeToChunk = function() { };
stx_core_lift_LiftTinkOutcomeToChunk.__name__ = "stx.core.lift.LiftTinkOutcomeToChunk";
stx_core_lift_LiftTinkOutcomeToChunk.core = function(oc) {
	return stx_core_Chunk.fromTinkOutcome(oc);
};
var stx_core_pack_ArrayLift = function() { };
stx_core_pack_ArrayLift.__name__ = "stx.core.pack.ArrayLift";
stx_core_pack_ArrayLift.is_defined = function(self) {
	return self.length > 0;
};
stx_core_pack_ArrayLift.cons = function(self,t) {
	var copy = stx_core_pack_ArrayLift.copy(self);
	copy.unshift(t);
	return copy;
};
stx_core_pack_ArrayLift.snoc = function(self,t) {
	var copy = stx_core_pack_ArrayLift.copy(self);
	copy.push(t);
	return copy;
};
stx_core_pack_ArrayLift.set = function(self,i,v) {
	var arr0 = self.slice();
	arr0[i] = v;
	return arr0;
};
stx_core_pack_ArrayLift.get = function(self,i) {
	return self[i];
};
stx_core_pack_ArrayLift.head = function(self) {
	if(self.length == 0) {
		return haxe_ds_Option.None;
	} else if(self[0] == null) {
		return haxe_ds_Option.None;
	} else {
		return haxe_ds_Option.Some(self[0]);
	}
};
stx_core_pack_ArrayLift.tail = function(self) {
	return self.slice(1);
};
stx_core_pack_ArrayLift.last = function(self) {
	var v = self[self.length > 0 ? self.length - 1 : 0];
	if(v == null) {
		return haxe_ds_Option.None;
	} else {
		return haxe_ds_Option.Some(v);
	}
};
stx_core_pack_ArrayLift.copy = function(self) {
	return [].concat(self);
};
stx_core_pack_ArrayLift.concat = function(self,that) {
	var acc = stx_core_pack_ArrayLift.copy(self);
	var _g = 0;
	while(_g < self.length) {
		var e = self[_g];
		++_g;
		acc.push(e);
	}
	return acc;
};
stx_core_pack_ArrayLift.bind_fold = function(self,pure,init,bind,fold) {
	return stx_core_pack_ArrayLift.lfold(self,function(next,memo) {
		return bind(memo,function(b) {
			var tmp = fold(next,b);
			return pure(tmp);
		});
	},pure(init));
};
stx_core_pack_ArrayLift.reduce = function(self,unit,pure,plus) {
	return stx_core_pack_ArrayLift.lfold(self,function(next,memo) {
		var tmp = pure(next);
		return plus(memo,tmp);
	},unit());
};
stx_core_pack_ArrayLift.map = function(self,fn) {
	var n = [];
	var _g = 0;
	while(_g < self.length) {
		var e = self[_g];
		++_g;
		n.push(fn(e));
	}
	return n;
};
stx_core_pack_ArrayLift.mapi = function(self,fn) {
	var n = [];
	var e = null;
	var _g = 0;
	var _g1 = self.length;
	while(_g < _g1) {
		var i = _g++;
		e = self[i];
		n.push(fn(i,e));
	}
	return n;
};
stx_core_pack_ArrayLift.flat_map = function(self,fn) {
	var n = [];
	var _g = 0;
	while(_g < self.length) {
		var e1 = self[_g];
		++_g;
		var e2 = $getIterator(fn(e1));
		while(e2.hasNext()) {
			var e21 = e2.next();
			n.push(e21);
		}
	}
	return n;
};
stx_core_pack_ArrayLift.lfold = function(self,fn,memo) {
	var r = memo;
	var _g = 0;
	while(_g < self.length) {
		var e = self[_g];
		++_g;
		r = fn(e,r);
	}
	return r;
};
stx_core_pack_ArrayLift.lfold1 = function(self,fn) {
	var folded = stx_core_pack_ArrayLift.head(self);
	var tail = stx_core_pack_ArrayLift.tail(self);
	return stx_core_pack_OptionLift.map(folded,function(memo) {
		var _g = 0;
		var _g1 = tail;
		while(_g < _g1.length) {
			var item = _g1[_g];
			++_g;
			memo = fn(memo,item);
		}
		return memo;
	});
};
stx_core_pack_ArrayLift.rfold = function(self,fn,z) {
	var r = z;
	var _g = 0;
	var _g1 = self.length;
	while(_g < _g1) {
		var i = _g++;
		var e = self[self.length - 1 - i];
		r = fn(e,r);
	}
	return r;
};
stx_core_pack_ArrayLift.rfold1 = function(self,fn) {
	return stx_core_pack_ArrayLift.lfold1(stx_core_pack_ArrayLift.lfold(self,function(b,a) {
		a.unshift(b);
		return a;
	},[]),fn);
};
stx_core_pack_ArrayLift.lscan = function(self,f,init) {
	var accum = init;
	var result = [init];
	var _g = 0;
	while(_g < self.length) {
		var e = self[_g];
		++_g;
		result.push(f(e,accum));
	}
	return result;
};
stx_core_pack_ArrayLift.lscan1 = function(self,f) {
	var result = [];
	if(0 == self.length) {
		return result;
	}
	var accum = self[0];
	result.push(accum);
	var _g = 1;
	var _g1 = self.length;
	while(_g < _g1) {
		var i = _g++;
		result.push(f(self[i],accum));
	}
	return result;
};
stx_core_pack_ArrayLift.rscan = function(self,init,f) {
	var a = self.slice();
	a.reverse();
	return stx_core_pack_ArrayLift.lscan(a,f,init);
};
stx_core_pack_ArrayLift.rscan1 = function(self,f) {
	var a = self.slice();
	a.reverse();
	return stx_core_pack_ArrayLift.lscan1(a,f);
};
stx_core_pack_ArrayLift.filter = function(self,fn) {
	var n = [];
	var _g = 0;
	while(_g < self.length) {
		var e = self[_g];
		++_g;
		if(fn(e)) {
			n.push(e);
		}
	}
	return n;
};
stx_core_pack_ArrayLift.map_filter = function(self,fn) {
	return stx_core_pack_ArrayLift.lfold(self,function(next,memo) {
		var _g = fn(next);
		if(_g._hx_index == 0) {
			var v = _g.v;
			return stx_core_pack_ArrayLift.snoc(memo,v);
		} else {
			return memo;
		}
	},[]);
};
stx_core_pack_ArrayLift.whilst = function(self,fn) {
	var r = [];
	var _g = 0;
	while(_g < self.length) {
		var e = self[_g];
		++_g;
		if(fn(e)) {
			r.push(e);
		} else {
			break;
		}
	}
	return r;
};
stx_core_pack_ArrayLift.ltaken = function(self,n) {
	return self.slice(0,Math.min(n,self.length) | 0);
};
stx_core_pack_ArrayLift.ldropn = function(self,n) {
	if(n >= self.length) {
		return [];
	} else {
		return self.slice(n);
	}
};
stx_core_pack_ArrayLift.rdropn = function(self,n) {
	if(self != null && n >= self.length) {
		return [];
	} else {
		return self.splice(0,self.length - n);
	}
};
stx_core_pack_ArrayLift.ldrop = function(self,p) {
	var r = [].concat(self);
	var _g = 0;
	while(_g < self.length) {
		var e = self[_g];
		++_g;
		if(p(e)) {
			r.shift();
		} else {
			break;
		}
	}
	return r;
};
stx_core_pack_ArrayLift.search = function(self,fn) {
	var out = haxe_ds_Option.None;
	var _g = 0;
	while(_g < self.length) {
		var el = self[_g];
		++_g;
		if(fn(el)) {
			out = haxe_ds_Option.Some(el);
			break;
		}
	}
	return out;
};
stx_core_pack_ArrayLift.all = function(self,fn) {
	return stx_core_pack_ArrayLift.lfold(self,function(b,a) {
		if(a) {
			return fn(b);
		} else {
			return false;
		}
	},true);
};
stx_core_pack_ArrayLift.any = function(self,fn) {
	return stx_core_pack_ArrayLift.lfold(self,function(b,a) {
		if(a) {
			return true;
		} else {
			return fn(b);
		}
	},false);
};
stx_core_pack_ArrayLift.zip_with = function(self,that,fn) {
	var next = [];
	var lower = Math.min(self.length,that.length) | 0;
	var _g = 0;
	var _g1 = lower;
	while(_g < _g1) {
		var i = _g++;
		next.push(fn(self[i],that[i]));
	}
	return next;
};
stx_core_pack_ArrayLift.cross_with = function(self,that,fn) {
	var r = [];
	var _g = 0;
	var _g1 = self;
	while(_g < _g1.length) {
		var va = _g1[_g];
		++_g;
		var _g2 = 0;
		var _g3 = that;
		while(_g2 < _g3.length) {
			var vb = _g3[_g2];
			++_g2;
			r.push(fn(va,vb));
		}
	}
	return r;
};
stx_core_pack_ArrayLift.difference_with = function(self,that,eq) {
	var res = [];
	var _g = 0;
	var _g1 = self;
	while(_g < _g1.length) {
		var e = [_g1[_g]];
		++_g;
		if(!stx_core_pack_ArrayLift.any(that,(function(e) {
			return function(x) {
				return eq(x,e[0]);
			};
		})(e))) {
			res.push(e[0]);
		}
	}
	return res;
};
stx_core_pack_ArrayLift.union_with = function(self,that,eq) {
	var res = [];
	var _g = 0;
	var _g1 = self;
	while(_g < _g1.length) {
		var e = _g1[_g];
		++_g;
		res.push(e);
	}
	var _g = 0;
	var _g1 = that;
	while(_g < _g1.length) {
		var e = [_g1[_g]];
		++_g;
		if(!stx_core_pack_ArrayLift.any(res,(function(e) {
			return function(x) {
				return eq(x,e[0]);
			};
		})(e))) {
			res.push(e[0]);
		}
	}
	return res;
};
stx_core_pack_ArrayLift.unique_with = function(self,eq) {
	var r = [];
	var _g = 0;
	while(_g < self.length) {
		var e = self[_g];
		++_g;
		var exists = stx_core_pack_ArrayLift.any(r,(function(_g,a1) {
			return function(a2) {
				return _g[0](a1[0],a2);
			};
		})([eq],[e]));
		var val = stx_core_pack_ArrayLift.search(r,(function(_g,a1) {
			return function(a2) {
				return _g[0](a1[0],a2);
			};
		})([eq],[e]));
		if(!exists) {
			r.push(e);
		}
	}
	return r;
};
stx_core_pack_ArrayLift.nub_with = function(self,f) {
	return stx_core_pack_ArrayLift.lfold(self,function(b,a) {
		var _g = f;
		var a1 = b;
		if(stx_core_pack_ArrayLift.any(a,function(a2) {
			return _g(a1,a2);
		})) {
			return a;
		} else {
			return stx_core_pack_ArrayLift.snoc(a,b);
		}
	},[]);
};
stx_core_pack_ArrayLift.reversed = function(self) {
	return stx_core_pack_ArrayLift.lfold(self,function(b,a) {
		a.unshift(b);
		return a;
	},[]);
};
stx_core_pack_ArrayLift.count = function(self,f) {
	return stx_core_pack_ArrayLift.lfold(self,function(b,a) {
		return a + (f(b) ? 1 : 0);
	},0);
};
stx_core_pack_ArrayLift.size = function(self) {
	return self.length;
};
stx_core_pack_ArrayLift.index_of = function(self,t) {
	var index = 0;
	var _g = 0;
	while(_g < self.length) {
		var e = self[_g];
		++_g;
		if(t(e)) {
			return index;
		}
		++index;
	}
	return -1;
};
stx_core_pack_ArrayLift.has = function(self,obj) {
	var index = self.indexOf(obj);
	if(index == -1) {
		return haxe_ds_Option.None;
	} else {
		return haxe_ds_Option.Some(index);
	}
};
stx_core_pack_ArrayLift.partition = function(self,f) {
	return stx_core_pack_ArrayLift.lfold(self,function(next,memo) {
		if(f(next)) {
			memo.a.push(next);
		} else {
			memo.b.push(next);
		}
		return memo;
	},{ a : [], b : []});
};
stx_core_pack_ArrayLift.chunk = function(self,size) {
	var slices = [];
	var rest = 0;
	var _g = 0;
	while(_g < size.length) {
		var n = size[_g];
		++_g;
		var next = rest + n;
		var slice = self.slice(rest,next);
		slices.push(slice);
		rest = next;
	}
	return slices;
};
stx_core_pack_ArrayLift.pad = function(self,len,val) {
	var len0 = len - self.length;
	var arr0 = [];
	var _g = 0;
	var _g1 = len0;
	while(_g < _g1) {
		var i = _g++;
		arr0.push(val);
	}
	return self.concat(arr0);
};
stx_core_pack_ArrayLift.fill = function(self,def) {
	var result = new Array(self.length);
	var _g = 0;
	var _g1 = self.length;
	while(_g < _g1) {
		var i = _g++;
		var x = self[i];
		result[i] = x == null ? def : x;
	}
	return result;
};
stx_core_pack_ArrayLift.toIterable = function(self) {
	return self;
};
stx_core_pack_ArrayLift.toMap = function(self) {
	var mp = new haxe_ds_StringMap();
	var _g = 0;
	while(_g < self.length) {
		var tp = self[_g];
		++_g;
		var val = tp();
		mp.h[val.a] = val.b;
	}
	return mp;
};
stx_core_pack_ArrayLift.random = function(self) {
	var len = self.length;
	var ind = Math.round(Math.random() * (len - 1));
	return self[ind];
};
stx_core_pack_ArrayLift.shuffle = function(self) {
	var res = [];
	var cp = self.slice();
	while(cp.length > 0) {
		var randArray = Math.floor(Math.random() * cp.length);
		res.push(cp.splice(randArray,1)[0]);
	}
	return res;
};
stx_core_pack_ArrayLift.and_with = function(self,that,eq) {
	return stx_core_pack_ArrayLift.lfold(stx_core_pack_ArrayLift.zip_with(self,that,function(l,r) {
		return { a : l, b : r};
	}),function(next,memo) {
		if(memo) {
			if(eq(next.a,next.b)) {
				return eq(next.a,next.b);
			} else {
				return false;
			}
		} else {
			return memo;
		}
	},true);
};
stx_core_pack_ArrayLift.rotate = function(self,num) {
	num %= self.length;
	var l = stx_core_pack_ArrayLift.ltaken(self,num);
	var r = stx_core_pack_ArrayLift.ldropn(self,num);
	if(num < 0) {
		return stx_core_pack_ArrayLift.concat(l,r);
	} else if(num > 1) {
		return stx_core_pack_ArrayLift.concat(l,r);
	} else {
		return self;
	}
};
stx_core_pack_ArrayLift.iterator = function(self) {
	return new haxe_iterators_ArrayIterator(self);
};
stx_core_pack_ArrayLift.elide = function(self) {
	return stx_core_pack_ArrayLift.map(self,function(v) {
		return v;
	});
};
stx_core_pack_ArrayLift.prj = function(self) {
	return self;
};
stx_core_pack_ArrayLift.prototype = {
	intersect_with: function(self,that,f) {
		return stx_core_pack_ArrayLift.lfold(self,function(next,memo) {
			var _g = f;
			var a1 = next;
			var _g1 = function(a2) {
				return _g(a1,a2);
			};
			if(stx_core_pack_ArrayLift.any(that,_g1) == true) {
				return stx_core_pack_ArrayLift.snoc(memo,next);
			} else {
				return memo;
			}
		},[]);
	}
	,__class__: stx_core_pack_ArrayLift
};
var stx_core_pack_Array = {};
stx_core_pack_Array._new = function(self) {
	var this1 = self;
	return this1;
};
stx_core_pack_Array.get = function(this1,v) {
	return this1[v];
};
stx_core_pack_Array.unit = function() {
	return [];
};
stx_core_pack_Array.one = function(t) {
	return [t];
};
stx_core_pack_Array.pure = function(t) {
	return [t];
};
stx_core_pack_Array.flatten = function(arrs) {
	var res = [];
	var _g = 0;
	var _g1 = arrs;
	while(_g < _g1.length) {
		var arr = _g1[_g];
		++_g;
		var _g2 = 0;
		var _g3 = arr;
		while(_g2 < _g3.length) {
			var e = _g3[_g2];
			++_g2;
			res.push(e);
		}
	}
	return res;
};
stx_core_pack_Array.interleave = function(alls) {
	var res = [];
	if(alls.length > 0) {
		var minLength = alls[0].length;
		var _g = 0;
		while(_g < alls.length) {
			var e = alls[_g];
			++_g;
			minLength = Math.min(minLength,e.length) | 0;
		}
		var length = minLength;
		var i = 0;
		while(i < length) {
			var _g = 0;
			while(_g < alls.length) {
				var arr = alls[_g];
				++_g;
				res.push(arr[i]);
			}
			++i;
		}
	}
	return res;
};
var stx_core_pack_CoupleLift = function() { };
stx_core_pack_CoupleLift.__name__ = "stx.core.pack.CoupleLift";
stx_core_pack_CoupleLift.map = function(self,fn) {
	return function(tp) {
		self(function(ti,tii) {
			var tmp = fn(tii);
			tp(ti,tmp);
		});
	};
};
stx_core_pack_CoupleLift.lmap = function(self,fn) {
	return function(tp) {
		self(function(ti,tii) {
			var tmp = fn(ti);
			tp(tmp,tii);
		});
	};
};
stx_core_pack_CoupleLift.rmap = function(self,fn) {
	return stx_core_pack_CoupleLift.map(self,fn);
};
stx_core_pack_CoupleLift.fst = function(self) {
	return stx_core_pack_CoupleLift.decouple(self,function(tI,_) {
		return tI;
	});
};
stx_core_pack_CoupleLift.snd = function(self) {
	return stx_core_pack_CoupleLift.decouple(self,function(_,tII) {
		return tII;
	});
};
stx_core_pack_CoupleLift.swap = function(self) {
	return function(tp) {
		self(function(ti,tii) {
			tp(tii,ti);
		});
	};
};
stx_core_pack_CoupleLift.equals = function(lhs,rhs) {
	return stx_core_pack_CoupleLift.decouple(lhs,function(t0l,t0r) {
		return stx_core_pack_CoupleLift.decouple(rhs,function(t1l,t1r) {
			if(t0l == t1l) {
				return t0r == t1r;
			} else {
				return false;
			}
		});
	});
};
stx_core_pack_CoupleLift.reduce = function(self,flhs,frhs,plus) {
	return stx_core_pack_CoupleLift.decouple(self,function(tI,tII) {
		var tmp = flhs(tI);
		var tmp1 = frhs(tII);
		return plus(tmp,tmp1);
	});
};
stx_core_pack_CoupleLift.decouple = function(self,fn) {
	var out = null;
	self(function(ti,tii) {
		out = fn(ti,tii);
	});
	return out;
};
stx_core_pack_CoupleLift.cat = function(self) {
	return stx_core_pack_CoupleLift.decouple(self,function(l,r) {
		return [haxe_ds_Either.Left(l),haxe_ds_Either.Right(r)];
	});
};
var stx_core_pack_Couple = {};
var stx_core_pack_EitherLift = function() { };
stx_core_pack_EitherLift.__name__ = "stx.core.pack.EitherLift";
stx_core_pack_EitherLift.fold = function(self,lhs,rhs) {
	switch(self._hx_index) {
	case 0:
		var l = self.v;
		return lhs(l);
	case 1:
		var r = self.v;
		return rhs(r);
	}
};
stx_core_pack_EitherLift.flat_map = function(self,fn) {
	return stx_core_pack_EitherLift.fold(self,haxe_ds_Either.Left,function(r) {
		return fn(r);
	});
};
stx_core_pack_EitherLift.map = function(self,fn) {
	return stx_core_pack_EitherLift.flat_map(self,function(x) {
		return haxe_ds_Either.Right(fn(x));
	});
};
stx_core_pack_EitherLift.flip = function(self) {
	return stx_core_pack_EitherLift.fold(self,function(l) {
		return haxe_ds_Either.Right(l);
	},function(r) {
		return haxe_ds_Either.Left(r);
	});
};
var stx_core_pack_Either = {};
stx_core_pack_Either._new = function(self) {
	var this1 = self;
	return this1;
};
stx_core_pack_Either.lift = function(self) {
	return stx_core_pack_Either._new(self);
};
stx_core_pack_Either.prj = function(this1) {
	return this1;
};
var stx_core_pack_FailCode = {};
stx_core_pack_FailCode._new = function(self) {
	var this1 = self;
	return this1;
};
stx_core_pack_FailCode.fromString = function(str) {
	return stx_core_pack_FailCode._new(str);
};
var stx_core_pack_Fault = {};
stx_core_pack_Fault._new = function(self) {
	var this1 = self;
	return this1;
};
stx_core_pack_Fault.of = function(this1,data,code) {
	return new stx_core_pack_Err(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,stx_core_pack_Failure.ERR_OF(data)),haxe_ds_Option.None,this1);
};
stx_core_pack_Fault.empty = function(this1) {
	return new stx_core_pack_Err(haxe_ds_Option.None,haxe_ds_Option.None,this1);
};
stx_core_pack_Fault.any = function(this1,msg) {
	return new stx_core_pack_Err(stx_core_pack_Option.fromNullT(stx_core_pack_Failure.ERR(stx_core_pack_FailCode.fromString(msg))),null,this1);
};
stx_core_pack_Fault.failure = function(this1,failure) {
	return new stx_core_pack_Err(haxe_ds_Option.Some(failure),null,this1);
};
stx_core_pack_Fault.err = function(this1,code) {
	return new stx_core_pack_Err(haxe_ds_Option.Some(stx_core_pack_Failure.ERR(code)),null,this1);
};
var stx_core_pack_Option = {};
stx_core_pack_Option._new = function(self) {
	var this1 = self;
	return this1;
};
stx_core_pack_Option.fromNullT = function(v) {
	return stx_core_pack_Option.make(v);
};
stx_core_pack_Option.make = function(t) {
	if(t == null) {
		return haxe_ds_Option.None;
	} else {
		return haxe_ds_Option.Some(t);
	}
};
stx_core_pack_Option.flatten = function(self) {
	var _g = stx_core_pack_OptionLift.prj(self);
	switch(_g._hx_index) {
	case 0:
		var next = _g.v;
		return next;
	case 1:
		return haxe_ds_Option.None;
	}
};
var stx_core_pack_OutcomeLift = function() { };
stx_core_pack_OutcomeLift.__name__ = "stx.core.pack.OutcomeLift";
stx_core_pack_OutcomeLift.map = function(self,fn) {
	return stx_core_pack_OutcomeLift.flat_map(self,function(x) {
		return stx_core_pack_OutcomeSum.Success(fn(x));
	});
};
stx_core_pack_OutcomeLift.flat_map = function(self,fn) {
	return stx_core_pack_Outcome.lift(stx_core_pack_OutcomeLift.fold(self,function(t) {
		return fn(t);
	},function(e) {
		return stx_core_pack_OutcomeSum.Failure(e);
	}));
};
stx_core_pack_OutcomeLift.fold = function(self,fn,er) {
	switch(self._hx_index) {
	case 0:
		var t = self.t;
		return fn(t);
	case 1:
		var e = self.e;
		return er(e);
	}
};
stx_core_pack_OutcomeLift.fudge = function(self) {
	return stx_core_pack_OutcomeLift.fold(self,function(t) {
		return t;
	},function(e) {
		throw haxe_Exception.thrown(e);
	});
};
stx_core_pack_OutcomeLift.elide = function(self) {
	return stx_core_pack_OutcomeLift.fold(self,function(t) {
		return stx_core_pack_OutcomeSum.Failure(t);
	},function(e) {
		return stx_core_pack_OutcomeSum.Success(e);
	});
};
var stx_core_pack_Outcome = {};
stx_core_pack_Outcome._new = function(self) {
	var this1 = self;
	return this1;
};
stx_core_pack_Outcome.lift = function(self) {
	return stx_core_pack_Outcome._new(self);
};
stx_core_pack_Outcome.success = function(t) {
	return stx_core_pack_Outcome.lift(stx_core_pack_OutcomeSum.Success(t));
};
stx_core_pack_Outcome.failure = function(e) {
	return stx_core_pack_Outcome.lift(stx_core_pack_OutcomeSum.Failure(e));
};
stx_core_pack_Outcome.prj = function(this1) {
	return this1;
};
stx_core_pack_Outcome.get_self = function(this1) {
	return stx_core_pack_Outcome.lift(this1);
};
var stx_core_pack_PositionLift = function() { };
stx_core_pack_PositionLift.__name__ = "stx.core.pack.PositionLift";
stx_core_pack_PositionLift.toString = function(pos) {
	if(pos == null) {
		return ":pos ()";
	}
	var f = pos.fileName;
	var cls = pos.className;
	var fn = pos.methodName;
	var ln = pos.lineNumber;
	return ":pos (object :file_name " + fn + " :class_name " + cls + " :method_name " + fn + "  :line_number " + ln + ")";
};
stx_core_pack_PositionLift.clone = function(p) {
	return stx_core_pack_Position.make(p.fileName,p.className,p.methodName,p.lineNumber,p.customParams);
};
stx_core_pack_PositionLift.withFragmentName = function(pos) {
	var f = pos.fileName;
	var cls = pos.className;
	var fn = pos.methodName;
	var ln = pos.lineNumber;
	return "" + cls + "." + fn;
};
stx_core_pack_PositionLift.toStringClassMethodLine = function(pos) {
	var f = pos.fileName;
	var cls = pos.className;
	var fn = pos.methodName;
	var ln = pos.lineNumber;
	var class_method = stx_core_pack_PositionLift.withFragmentName(pos);
	return "(" + class_method + "@" + pos.lineNumber + ")";
};
stx_core_pack_PositionLift.withCustomParams = function(p,v) {
	p = stx_core_pack_PositionLift.clone(p);
	if(p.customParams == null) {
		p.customParams = [];
	}
	p.customParams.push(v);
	return p;
};
var stx_core_pack_Position = {};
stx_core_pack_Position._new = function(self) {
	var this1 = self;
	return this1;
};
stx_core_pack_Position.lift = function(pos) {
	return stx_core_pack_Position.fromPos(pos);
};
stx_core_pack_Position.make = function(fileName,className,methodName,lineNumber,customParams) {
	return { fileName : fileName, className : className, methodName : methodName, lineNumber : lineNumber, customParams : customParams};
};
stx_core_pack_Position.fromPos = function(pos) {
	return stx_core_pack_Position._new(pos);
};
stx_core_pack_Position.toString = function(this1) {
	return stx_core_pack_Position._.toStringClassMethodLine(this1);
};
stx_core_pack_Position.here = function(pos) {
	return pos;
};
var stx_core_pack_PrimitiveDef = $hxEnums["stx.core.pack.PrimitiveDef"] = { __ename__ : "stx.core.pack.PrimitiveDef", __constructs__ : ["PNull","PBool","PInt","PFloat","PString"]
	,PNull: {_hx_index:0,__enum__:"stx.core.pack.PrimitiveDef",toString:$estr}
	,PBool: ($_=function(b) { return {_hx_index:1,b:b,__enum__:"stx.core.pack.PrimitiveDef",toString:$estr}; },$_.__params__ = ["b"],$_)
	,PInt: ($_=function(int) { return {_hx_index:2,int:int,__enum__:"stx.core.pack.PrimitiveDef",toString:$estr}; },$_.__params__ = ["int"],$_)
	,PFloat: ($_=function(fl) { return {_hx_index:3,fl:fl,__enum__:"stx.core.pack.PrimitiveDef",toString:$estr}; },$_.__params__ = ["fl"],$_)
	,PString: ($_=function(str) { return {_hx_index:4,str:str,__enum__:"stx.core.pack.PrimitiveDef",toString:$estr}; },$_.__params__ = ["str"],$_)
};
var stx_core_pack_Primitive = {};
stx_core_pack_Primitive.fromInt = function(i) {
	return stx_core_pack_PrimitiveDef.PInt(i);
};
stx_core_pack_Primitive.fromFloat = function(i) {
	return stx_core_pack_PrimitiveDef.PFloat(i);
};
stx_core_pack_Primitive.fromBool = function(i) {
	return stx_core_pack_PrimitiveDef.PBool(i);
};
stx_core_pack_Primitive.fromString = function(i) {
	return stx_core_pack_PrimitiveDef.PString(i);
};
stx_core_pack_Primitive.toAny = function(this1) {
	switch(this1._hx_index) {
	case 0:
		return null;
	case 1:
		var b = this1.b;
		return b;
	case 2:
		var int = this1.int;
		return int;
	case 3:
		var fl = this1.fl;
		return fl;
	case 4:
		var str = this1.str;
		return str;
	}
};
stx_core_pack_Primitive.toString = function(this1) {
	switch(this1._hx_index) {
	case 0:
		return "null";
	case 1:
		var b = this1.b;
		return "" + (b == null ? "null" : "" + b);
	case 2:
		var int = this1.int;
		return "" + int;
	case 3:
		var fl = this1.fl;
		return "" + fl;
	case 4:
		var str = this1.str;
		return str;
	}
};
stx_core_pack_Primitive.prj = function(this1) {
	return this1;
};
stx_core_pack_Primitive.lt = function(l,r) {
	switch(l._hx_index) {
	case 1:
		if(l.b == false) {
			if(r._hx_index == 1) {
				if(r.b == true) {
					return true;
				} else {
					return false;
				}
			} else {
				var x = l;
				var y = r;
				return x._hx_index < y._hx_index;
			}
		} else if(r._hx_index == 1) {
			var _g = r.b;
			return false;
		} else {
			var x = l;
			var y = r;
			return x._hx_index < y._hx_index;
		}
		break;
	case 2:
		if(r._hx_index == 2) {
			var int = l.int;
			var int0 = r.int;
			return int < int0;
		} else {
			var x = l;
			var y = r;
			return x._hx_index < y._hx_index;
		}
		break;
	case 3:
		if(r._hx_index == 3) {
			var fl = l.fl;
			var fl0 = r.fl;
			return fl < fl0;
		} else {
			var x = l;
			var y = r;
			return x._hx_index < y._hx_index;
		}
		break;
	case 4:
		if(r._hx_index == 4) {
			var str = l.str;
			var str0 = r.str;
			return str < str0;
		} else {
			var x = l;
			var y = r;
			return x._hx_index < y._hx_index;
		}
		break;
	default:
		var y = r;
		var x = l;
		return x._hx_index < y._hx_index;
	}
};
stx_core_pack_Primitive.eq = function(l,r) {
	switch(l._hx_index) {
	case 0:
		if(r._hx_index == 0) {
			return true;
		} else {
			return false;
		}
		break;
	case 1:
		if(l.b) {
			if(r._hx_index == 1) {
				if(r.b == true) {
					return true;
				} else {
					return false;
				}
			} else {
				return false;
			}
		} else if(r._hx_index == 1) {
			if(r.b == false) {
				return true;
			} else {
				return false;
			}
		} else {
			return false;
		}
		break;
	case 2:
		if(r._hx_index == 2) {
			var int = l.int;
			var int0 = r.int;
			return int == int0;
		} else {
			return false;
		}
		break;
	case 3:
		if(r._hx_index == 3) {
			var fl = l.fl;
			var fl0 = r.fl;
			return fl == fl0;
		} else {
			return false;
		}
		break;
	case 4:
		if(r._hx_index == 4) {
			var str = l.str;
			var str0 = r.str;
			return str == str0;
		} else {
			return false;
		}
		break;
	}
};
var stx_core_pack_ResLift = function() { };
stx_core_pack_ResLift.__name__ = "stx.core.pack.ResLift";
stx_core_pack_ResLift.errata = function(self,fn) {
	return stx_core_pack_Res.lift(stx_core_pack_ResLift.fold(self,function(t) {
		return stx_core_use_UseNano.success(stx_core_pack_Wildcard.__,t);
	},function(e) {
		return stx_core_use_UseNano.failure(stx_core_pack_Wildcard.__,fn(e));
	}));
};
stx_core_pack_ResLift.zip = function(self,that) {
	switch(self._hx_index) {
	case 0:
		var _g = self.t;
		switch(that._hx_index) {
		case 0:
			var t = _g;
			var tt = that.t;
			return stx_core_pack_OutcomeSum.Success(stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,t,tt));
		case 1:
			var e = that.e;
			return stx_core_pack_OutcomeSum.Failure(e);
		}
		break;
	case 1:
		var _g = self.e;
		if(that._hx_index == 1) {
			var e = _g;
			var ee = that.e;
			return stx_core_pack_OutcomeSum.Failure(e.next(ee));
		} else {
			var e = _g;
			return stx_core_pack_OutcomeSum.Failure(e);
		}
		break;
	}
};
stx_core_pack_ResLift.map = function(self,fn) {
	return stx_core_pack_ResLift.flat_map(self,function(x) {
		return stx_core_pack_OutcomeSum.Success(fn(x));
	});
};
stx_core_pack_ResLift.flat_map = function(self,fn) {
	return stx_core_pack_Res.lift(stx_core_pack_ResLift.fold(self,function(t) {
		return fn(t);
	},function(e) {
		return stx_core_pack_OutcomeSum.Failure(e);
	}));
};
stx_core_pack_ResLift.fold = function(self,fn,er) {
	switch(self._hx_index) {
	case 0:
		var t = self.t;
		return fn(t);
	case 1:
		var e = self.e;
		return er(e);
	}
};
stx_core_pack_ResLift.fudge = function(self) {
	return stx_core_pack_ResLift.fold(self,function(t) {
		return t;
	},function(e) {
		throw haxe_Exception.thrown(e);
	});
};
stx_core_pack_ResLift.elide = function(self) {
	return stx_core_pack_ResLift.fold(self,function(t) {
		return stx_core_pack_OutcomeSum.Failure(t);
	},function(e) {
		return stx_core_pack_OutcomeSum.Success(e);
	});
};
var stx_core_pack_Res = {};
stx_core_pack_Res._new = function(self) {
	var this1 = self;
	return this1;
};
stx_core_pack_Res.lift = function(self) {
	return stx_core_pack_Res._new(self);
};
stx_core_pack_Res.success = function(t) {
	return stx_core_pack_Res.lift(stx_core_pack_OutcomeSum.Success(t));
};
stx_core_pack_Res.failure = function(e) {
	return stx_core_pack_Res.lift(stx_core_pack_OutcomeSum.Failure(e));
};
stx_core_pack_Res.prj = function(this1) {
	return this1;
};
stx_core_pack_Res.get_self = function(this1) {
	return stx_core_pack_Res.lift(this1);
};
stx_core_pack_Res.fromOutcome = function(self) {
	var ocd = self;
	return stx_core_pack_Res.lift(ocd);
};
stx_core_pack_Res.toOutcome = function(this1) {
	return stx_core_pack_Outcome.lift(this1);
};
var stx_core_pack_Unique = {};
stx_core_pack_Unique._new = function(self) {
	var this1 = self;
	return this1;
};
stx_core_pack_Unique.lift = function(self) {
	return stx_core_pack_Unique._new(self);
};
stx_core_pack_Unique.pure = function(data) {
	return stx_core_pack_Unique.make(data,function() {
	});
};
stx_core_pack_Unique.make = function(data,rtid) {
	return stx_core_pack_Unique.lift({ data : data, rtid : rtid});
};
stx_core_pack_Unique.prj = function(this1) {
	return this1;
};
stx_core_pack_Unique.get_self = function(this1) {
	return stx_core_pack_Unique.lift(this1);
};
stx_core_pack_Unique.equals = function(this1,that) {
	return this1.rtid == $bind(that,that.rtid);
};
stx_core_pack_Unique.toT = function(this1) {
	return this1.data;
};
var stx_core_pack_VBlock = {};
stx_core_pack_VBlock.unit = function() {
	return function() {
	};
};
stx_core_pack_VBlock._new = function(self) {
	var this1 = self;
	return this1;
};
var stx_core_pack_Y = {};
stx_core_pack_Y.unit = function() {
	return function(fn) {
		return fn(fn);
	};
};
stx_core_pack_Y.pure = function(f) {
	return function(fn) {
		return f;
	};
};
stx_core_pack_Y._new = function(self) {
	var this1 = self;
	return this1;
};
stx_core_pack_Y.reply = function(this1) {
	return this1(this1);
};
var stx_core_type_CardSum = $hxEnums["stx.core.type.CardSum"] = { __ename__ : "stx.core.type.CardSum", __constructs__ : ["___"]
	,___: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"stx.core.type.CardSum",toString:$estr}; },$_.__params__ = ["v"],$_)
};
var stx_core_type_ChunkSum = $hxEnums["stx.core.type.ChunkSum"] = { __ename__ : "stx.core.type.ChunkSum", __constructs__ : ["Val","Tap","End"]
	,Val: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"stx.core.type.ChunkSum",toString:$estr}; },$_.__params__ = ["v"],$_)
	,Tap: {_hx_index:1,__enum__:"stx.core.type.ChunkSum",toString:$estr}
	,End: ($_=function(err) { return {_hx_index:2,err:err,__enum__:"stx.core.type.ChunkSum",toString:$estr}; },$_.__params__ = ["err"],$_)
};
var stx_core_type_RegexApi = function(source,option) {
	this.source = source;
	this.option = option;
};
stx_core_type_RegexApi.__name__ = "stx.core.type.RegexApi";
stx_core_type_RegexApi.prototype = {
	source: null
	,option: null
	,match: function(match) {
		return new stx_core_type_MatchApi(this.source,this.option,match);
	}
	,__class__: stx_core_type_RegexApi
};
var stx_core_type_MatchApi = function(source,option,target) {
	stx_core_type_RegexApi.call(this,source,option);
	this.target = target;
	this.state = new EReg(source,option);
	this.status = this.state.match(target);
};
stx_core_type_MatchApi.__name__ = "stx.core.type.MatchApi";
stx_core_type_MatchApi.__super__ = stx_core_type_RegexApi;
stx_core_type_MatchApi.prototype = $extend(stx_core_type_RegexApi.prototype,{
	target: null
	,status: null
	,state: null
	,__class__: stx_core_type_MatchApi
});
var stx_core_type_ParameterDef = $hxEnums["stx.core.type.ParameterDef"] = { __ename__ : "stx.core.type.ParameterDef", __constructs__ : ["Unbound","Bound"]
	,Unbound: ($_=function(k) { return {_hx_index:0,k:k,__enum__:"stx.core.type.ParameterDef",toString:$estr}; },$_.__params__ = ["k"],$_)
	,Bound: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"stx.core.type.ParameterDef",toString:$estr}; },$_.__params__ = ["v"],$_)
};
var stx_core_use_UseArrayNano = function() { };
stx_core_use_UseArrayNano.__name__ = "stx.core.use.UseArrayNano";
stx_core_use_UseArrayNano.cross = function(self,that) {
	return stx_core_pack_ArrayLift.cross_with(self,that,function(tI,tII) {
		return stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,tI,tII);
	});
};
stx_core_use_UseArrayNano.zip = function(self,that) {
	return stx_core_pack_ArrayLift.zip_with(self,that,function(tI,tII) {
		return stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,tI,tII);
	});
};
var stx_core_use_UseOptionNano = function() { };
stx_core_use_UseOptionNano.__name__ = "stx.core.use.UseOptionNano";
stx_core_use_UseOptionNano.zip = function(self,that) {
	if(self._hx_index == 0) {
		if(that._hx_index == 0) {
			var l = self.v;
			var r = that.v;
			return haxe_ds_Option.Some(stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,l,r));
		} else {
			return haxe_ds_Option.None;
		}
	} else {
		return haxe_ds_Option.None;
	}
};
stx_core_use_UseOptionNano.fudge = function(self,err) {
	err = stx_core_pack_OptionLift.defv(stx_core_pack_Option.make(err),new stx_core_pack_Err(haxe_ds_Option.Some(stx_core_pack_Failure.ERR("E_OptionForcedError")),null,stx_core_use_UseNano.fault(stx_core_pack_Wildcard.__,{ fileName : "stx/core/use/UseOptionNano.hx", lineNumber : 11, className : "stx.core.use.UseOptionNano", methodName : "fudge"})));
	if(self == null) {
		throw haxe_Exception.thrown(err);
	} else {
		switch(self._hx_index) {
		case 0:
			var v = self.v;
			return v;
		case 1:
			throw haxe_Exception.thrown(err);
		}
	}
};
var stx_core_use_UsePico = function() { };
stx_core_use_UsePico.__name__ = "stx.core.use.UsePico";
var stx_ds_BinaryTreeSum = $hxEnums["stx.ds.BinaryTreeSum"] = { __ename__ : "stx.ds.BinaryTreeSum", __constructs__ : ["Empty","Split"]
	,Empty: {_hx_index:0,__enum__:"stx.ds.BinaryTreeSum",toString:$estr}
	,Split: ($_=function(v,l,r) { return {_hx_index:1,v:v,l:l,r:r,__enum__:"stx.ds.BinaryTreeSum",toString:$estr}; },$_.__params__ = ["v","l","r"],$_)
};
var stx_ds_BinaryTree = {};
stx_ds_BinaryTree._new = function(self) {
	var this1 = self;
	return this1;
};
stx_ds_BinaryTree.value = function(this1) {
	switch(this1._hx_index) {
	case 0:
		return null;
	case 1:
		var _g = this1.r;
		var _g = this1.l;
		var v = this1.v;
		return v;
	}
};
stx_ds_BinaryTree.head = function(this1) {
	switch(this1._hx_index) {
	case 0:
		return stx_ds_BinaryTreeSum.Empty;
	case 1:
		var _g = this1.r;
		var _g = this1.v;
		if(_g == null) {
			var l = this1.l;
			return l;
		} else {
			var v = _g;
			return stx_ds_BinaryTreeSum.Split(v,stx_ds_BinaryTreeSum.Empty,stx_ds_BinaryTreeSum.Empty);
		}
		break;
	}
};
stx_ds_BinaryTree.tail = function(this1) {
	switch(this1._hx_index) {
	case 0:
		return stx_ds_BinaryTreeSum.Empty;
	case 1:
		var _g = this1.l;
		var _g = this1.v;
		var r = this1.r;
		return r;
	}
};
stx_ds_BinaryTree.df = function(this1,fn,z) {
	return stx_ds_BinaryTrees.df(this1,fn,z);
};
stx_ds_BinaryTree.isEnd = function(this1) {
	if(this1._hx_index == 0) {
		return true;
	} else {
		return false;
	}
};
var stx_ds_BinaryTrees = function() { };
stx_ds_BinaryTrees.__name__ = "stx.ds.BinaryTrees";
stx_ds_BinaryTrees.df = function(btree,fn,z) {
	switch(btree._hx_index) {
	case 0:
		return z;
	case 1:
		var r = btree.r;
		var l = btree.l;
		var v = btree.v;
		var a = fn(v,z);
		var b = stx_ds_BinaryTrees.df(l,fn,a);
		var c = stx_ds_BinaryTrees.df(r,fn,b);
		return c;
	}
};
stx_ds_BinaryTrees.hdf = function(btree,fn,z) {
	switch(btree._hx_index) {
	case 0:
		return z;
	case 1:
		var r = btree.r;
		var l = btree.l;
		var v = btree.v;
		var o = fn(v,z);
		switch(o._hx_index) {
		case 0:
			var o1 = o.v;
			var b = stx_ds_BinaryTrees.hdf(l,fn,o1);
			var c = stx_ds_BinaryTrees.hdf(r,fn,b);
			return c;
		case 1:
			var o1 = o.v;
			return o1;
		}
		break;
	}
};
var stx_ds_KaryTreeSum = $hxEnums["stx.ds.KaryTreeSum"] = { __ename__ : "stx.ds.KaryTreeSum", __constructs__ : ["Nought","Branch"]
	,Nought: {_hx_index:0,__enum__:"stx.ds.KaryTreeSum",toString:$estr}
	,Branch: ($_=function(x,xs) { return {_hx_index:1,x:x,xs:xs,__enum__:"stx.ds.KaryTreeSum",toString:$estr}; },$_.__params__ = ["x","xs"],$_)
};
var stx_ds_KaryTree = {};
stx_ds_KaryTree.unit = function() {
	return stx_ds_KaryTreeSum.Nought;
};
stx_ds_KaryTree.pure = function(v) {
	return stx_ds_KaryTreeSum.Branch(v,stx_ds_LinkedListSum.Nil);
};
stx_ds_KaryTree._new = function(self) {
	var this1 = stx_core_pack_OptionLift.is_defined(new stx_assert_Module({ fileName : "stx/ds/KaryTree.hx", lineNumber : 18, className : "stx.ds._KaryTree.KaryTree_Impl_", methodName : "_new"}).exists().applyI(self)) ? stx_ds_KaryTreeSum.Nought : self;
	return this1;
};
stx_ds_KaryTree.df = function(this1) {
	return stx_ds_KaryTrees.iterDF(this1);
};
stx_ds_KaryTree.bf = function(this1) {
	return stx_ds_KaryTrees.iterBF(this1);
};
stx_ds_KaryTree.zipper = function(this1) {
	return stx_ds_kary_$tree_Zipper._new(stx_ds_LinkedListSum.Cons(this1,stx_ds_LinkedListSum.Nil));
};
stx_ds_KaryTree.value = function(this1) {
	if(this1._hx_index == 1) {
		var _g = this1.xs;
		var x = this1.x;
		return x;
	} else {
		return null;
	}
};
stx_ds_KaryTree.children = function(this1) {
	if(this1._hx_index == 1) {
		var _g = this1.x;
		var ls = this1.xs;
		if(ls == null) {
			return stx_ds_LinkedListSum.Nil;
		} else {
			return ls;
		}
	} else {
		return stx_ds_LinkedListSum.Nil;
	}
};
stx_ds_KaryTree.equals = function(this1,that) {
	return stx_ds_KaryTree.equalsWith(this1,that,function(l,r) {
		return l == r;
	});
};
stx_ds_KaryTree.equalsWith = function(this1,that,fn) {
	var handler = null;
	handler = function(ls0,ls1) {
		if(ls0 == null) {
			if(ls1 == null) {
				return true;
			} else {
				return false;
			}
		} else {
			switch(ls0._hx_index) {
			case 0:
				if(ls1 == null) {
					return false;
				} else if(ls1._hx_index == 0) {
					return true;
				} else {
					return false;
				}
				break;
			case 1:
				if(ls1 == null) {
					return false;
				} else if(ls1._hx_index == 1) {
					var x = ls0.head;
					var xs = ls0.tail;
					var ys = ls1.tail;
					var y = ls1.head;
					var l = x;
					var r = y;
					if(stx_ds_KaryTree.equals(l,r)) {
						return handler(xs,ys);
					} else {
						return false;
					}
				} else {
					return false;
				}
				break;
			}
		}
	};
	switch(this1._hx_index) {
	case 0:
		if(that._hx_index == 0) {
			return true;
		} else {
			return false;
		}
		break;
	case 1:
		if(that._hx_index == 1) {
			var l = this1.x;
			var ls = this1.xs;
			var rs = that.xs;
			var r = that.x;
			var o = fn(l,r);
			if(!o) {
				return o;
			} else {
				return handler(ls,rs);
			}
		} else {
			return false;
		}
		break;
	}
};
stx_ds_KaryTree.toString = function(this1) {
	var rec = null;
	rec = function(v,int) {
		switch(v._hx_index) {
		case 0:
			return "";
		case 1:
			var rst = v.xs;
			var v1 = v.x;
			var arr = stx_core_pack_OptionLift.is_defined(new stx_assert_Module({ fileName : "stx/ds/KaryTree.hx", lineNumber : 79, className : "stx.ds._KaryTree.KaryTree_Impl_", methodName : "toString"}).exists().applyI(rst)) ? stx_ds_LinkedListSum.Nil : rst;
			var out = stx_ds_LinkedList.map(arr,function(next) {
				return rec(next,"" + int + " ");
			});
			var val = stx_ds_LinkedList.fold(out,function(next,memo) {
				return "" + memo + "\n" + int + next;
			},"");
			return "" + Std.string(v1) + ":\n" + val;
		}
	};
	var out = rec(this1,"  ");
	return "\n" + out;
};
var stx_ds_KaryTrees = function() { };
stx_ds_KaryTrees.__name__ = "stx.ds.KaryTrees";
stx_ds_KaryTrees.next = function(t,concat) {
	if(t._hx_index == 1) {
		var _g = t.head;
		if(_g._hx_index == 1) {
			var rst = t.tail;
			var xs = _g.xs;
			var x = _g.x;
			if(xs == null) {
				xs = stx_ds_LinkedListSum.Nil;
			}
			var t = concat(xs,rst);
			var concat1 = concat;
			return stx_fp_pack_LazyStream.make(stx_fp_pack_LazyStream.fromThunk(function() {
				return stx_ds_KaryTrees.next(t,concat1);
			}),haxe_ds_Option.Some(x));
		} else {
			return stx_fp_pack_LazyStream.unit();
		}
	} else {
		return stx_fp_pack_LazyStream.unit();
	}
};
stx_ds_KaryTrees.df_concat = function(l,r) {
	return stx_ds_LinkedList.concat(l,r);
};
stx_ds_KaryTrees.bf_concat = function(l,r) {
	return stx_ds_LinkedList.concat(r,l);
};
stx_ds_KaryTrees.genDF = function(node) {
	var vals = stx_ds_LinkedListSum.Cons(node,stx_ds_LinkedListSum.Nil);
	var t = vals;
	var concat = stx_ds_KaryTrees.df_concat;
	return function() {
		return stx_ds_KaryTrees.next(t,concat);
	};
};
stx_ds_KaryTrees.iterDF = function(node) {
	return stx_ds_KaryTrees.iter(stx_fp_pack_LazyStream.fromThunk(stx_ds_KaryTrees.genDF(node)));
};
stx_ds_KaryTrees.genBF = function(node) {
	var vals = stx_ds_LinkedListSum.Cons(node,stx_ds_LinkedListSum.Nil);
	var t = vals;
	var concat = stx_ds_KaryTrees.bf_concat;
	return function() {
		return stx_ds_KaryTrees.next(t,concat);
	};
};
stx_ds_KaryTrees.iterBF = function(node) {
	return stx_ds_KaryTrees.iter(stx_fp_pack_LazyStream.fromThunk(stx_ds_KaryTrees.genBF(node)));
};
stx_ds_KaryTrees.iter = function(generator) {
	return { iterator : function() {
		var cursor = stx_fp_pack_LazyStream.reply(generator);
		return { next : function() {
			var out;
			var _g = stx_core_pack_CoupleLift.fst(cursor);
			if(_g._hx_index == 0) {
				var v = _g.v;
				out = v;
			} else {
				out = null;
			}
			cursor = stx_fp_pack_LazyStream.reply(stx_core_pack_CoupleLift.snd(cursor));
			return out;
		}, hasNext : function() {
			return stx_core_pack_OptionLift.is_defined(stx_core_pack_CoupleLift.fst(cursor));
		}};
	}};
};
var stx_ds_LazyBinaryTreeSum = $hxEnums["stx.ds.LazyBinaryTreeSum"] = { __ename__ : "stx.ds.LazyBinaryTreeSum", __constructs__ : ["LazyEmpty","LazySplit"]
	,LazyEmpty: {_hx_index:0,__enum__:"stx.ds.LazyBinaryTreeSum",toString:$estr}
	,LazySplit: ($_=function(v,l,r) { return {_hx_index:1,v:v,l:l,r:r,__enum__:"stx.ds.LazyBinaryTreeSum",toString:$estr}; },$_.__params__ = ["v","l","r"],$_)
};
var stx_ds_LazyBinaryTree = {};
stx_ds_LazyBinaryTree._new = function(self) {
	var this1 = self;
	return this1;
};
stx_ds_LazyBinaryTree.value = function(this1) {
	switch(this1._hx_index) {
	case 0:
		return null;
	case 1:
		var _g = this1.r;
		var _g = this1.l;
		var v = this1.v;
		return v;
	}
};
stx_ds_LazyBinaryTree.head = function(this1) {
	switch(this1._hx_index) {
	case 0:
		return stx_ds_LazyBinaryTreeSum.LazyEmpty;
	case 1:
		var _g = this1.r;
		var _g = this1.v;
		if(_g == null) {
			var l = this1.l;
			return l();
		} else {
			var v = _g;
			return stx_ds_LazyBinaryTreeSum.LazySplit(v,function() {
				return stx_ds_LazyBinaryTreeSum.LazyEmpty;
			},function() {
				return stx_ds_LazyBinaryTreeSum.LazyEmpty;
			});
		}
		break;
	}
};
stx_ds_LazyBinaryTree.tail = function(this1) {
	switch(this1._hx_index) {
	case 0:
		return stx_ds_LazyBinaryTreeSum.LazyEmpty;
	case 1:
		var _g = this1.l;
		var _g = this1.v;
		var r = this1.r;
		return r();
	}
};
stx_ds_LazyBinaryTree.df = function(this1,fn,z) {
	return stx_ds_LazyBinaryTrees.df(this1,fn,z);
};
stx_ds_LazyBinaryTree.isEnd = function(this1) {
	if(this1._hx_index == 0) {
		return true;
	} else {
		return false;
	}
};
var stx_ds_LazyBinaryTrees = function() { };
stx_ds_LazyBinaryTrees.__name__ = "stx.ds.LazyBinaryTrees";
stx_ds_LazyBinaryTrees.df = function(btree,fn,z) {
	switch(btree._hx_index) {
	case 0:
		return z;
	case 1:
		var r = btree.r;
		var l = btree.l;
		var v = btree.v;
		var a = fn(v,z);
		var b = stx_ds_LazyBinaryTrees.df(l(),fn,a);
		var c = stx_ds_LazyBinaryTrees.df(r(),fn,b);
		return c;
	}
};
stx_ds_LazyBinaryTrees.hdf = function(btree,fn,z) {
	switch(btree._hx_index) {
	case 0:
		return z;
	case 1:
		var r = btree.r;
		var l = btree.l;
		var v = btree.v;
		var o = fn(v,z);
		switch(o._hx_index) {
		case 0:
			var o1 = o.v;
			var b = stx_ds_LazyBinaryTrees.hdf(l(),fn,o1);
			var c = stx_ds_LazyBinaryTrees.hdf(r(),fn,b);
			return c;
		case 1:
			var o1 = o.v;
			return o1;
		}
		break;
	}
};
var stx_ds_LinkedListSum = $hxEnums["stx.ds.LinkedListSum"] = { __ename__ : "stx.ds.LinkedListSum", __constructs__ : ["Nil","Cons"]
	,Nil: {_hx_index:0,__enum__:"stx.ds.LinkedListSum",toString:$estr}
	,Cons: ($_=function(head,tail) { return {_hx_index:1,head:head,tail:tail,__enum__:"stx.ds.LinkedListSum",toString:$estr}; },$_.__params__ = ["head","tail"],$_)
};
var stx_ds_LinkedList = {};
stx_ds_LinkedList.fromIndex = function(arr) {
	var self = stx_ds_LinkedList.unit();
	var i = arr.length - 1;
	while(i >= 0) self = stx_ds_LinkedList.cons(self,arr[--i]);
	return self;
};
stx_ds_LinkedList.unit = function() {
	return stx_ds_LinkedListSum.Nil;
};
stx_ds_LinkedList.pure = function(v) {
	return stx_ds_LinkedListSum.Cons(v,stx_ds_LinkedListSum.Nil);
};
stx_ds_LinkedList._new = function(self) {
	var this1 = self;
	return this1;
};
stx_ds_LinkedList.tail = function(this1) {
	switch(this1._hx_index) {
	case 0:
		return stx_ds_LinkedListSum.Nil;
	case 1:
		var _g = this1.head;
		var next = this1.tail;
		return next;
	}
};
stx_ds_LinkedList.cons = function(this1,v) {
	return stx_ds_LinkedList._new(stx_ds_LinkedListSum.Cons(v,this1));
};
stx_ds_LinkedList.last = function(this1) {
	var crs = this1;
	var val = null;
	while(true) if(crs._hx_index == 1) {
		var xs = crs.tail;
		var x = crs.head;
		val = x;
		crs = xs;
	} else {
		break;
	}
	return val;
};
stx_ds_LinkedList.concat = function(this1,that) {
	switch(this1._hx_index) {
	case 0:
		if(that._hx_index == 0) {
			return stx_ds_LinkedListSum.Nil;
		} else {
			var l = that;
			return l;
		}
		break;
	case 1:
		var _g = this1.tail;
		var _g1 = this1.head;
		if(that._hx_index == 0) {
			var l = this1;
			return l;
		} else if(_g._hx_index == 0) {
			var x = _g1;
			return stx_ds_LinkedListSum.Cons(x,that);
		} else {
			var x = _g1;
			var xs = _g;
			return stx_ds_LinkedListSum.Cons(x,stx_ds_LinkedList.concat(xs,that));
		}
		break;
	}
};
stx_ds_LinkedList.find = function(this1,fn) {
	return stx_ds_LinkedList.fold(this1,function(next,memo) {
		return stx_core_pack_OptionLift.or(memo,function() {
			if(fn(next)) {
				return haxe_ds_Option.Some(next);
			} else {
				return haxe_ds_Option.None;
			}
		});
	},haxe_ds_Option.None);
};
stx_ds_LinkedList.fold = function(this1,f,b) {
	switch(this1._hx_index) {
	case 0:
		return b;
	case 1:
		var xs = this1.tail;
		var x = this1.head;
		return stx_ds_LinkedList.fold(xs,f,f(x,b));
	}
};
stx_ds_LinkedList.head = function(this1) {
	if(this1._hx_index == 1) {
		var xs = this1.tail;
		var x = this1.head;
		return x;
	} else {
		return null;
	}
};
stx_ds_LinkedList.iterator = function(this1) {
	var cursor = this1;
	return { next : function() {
		var value = null;
		if(cursor == null) {
			cursor = stx_ds_LinkedListSum.Nil;
		} else if(cursor._hx_index == 1) {
			var xs = cursor.tail;
			var x = cursor.head;
			value = x;
			cursor = xs;
		} else {
			cursor = stx_ds_LinkedListSum.Nil;
		}
		return value;
	}, hasNext : function() {
		if(cursor == null) {
			return true;
		} else if(cursor._hx_index == 0) {
			return false;
		} else {
			return true;
		}
	}};
};
stx_ds_LinkedList.map = function(this1,f) {
	switch(this1._hx_index) {
	case 0:
		return stx_ds_LinkedListSum.Nil;
	case 1:
		var xs = this1.tail;
		var x = this1.head;
		return stx_ds_LinkedListSum.Cons(f(x),stx_ds_LinkedList.map(xs,f));
	}
};
stx_ds_LinkedList.map_filter = function(this1,f) {
	switch(this1._hx_index) {
	case 0:
		return stx_ds_LinkedListSum.Nil;
	case 1:
		var xs = this1.tail;
		var x = this1.head;
		var nxt = f(x);
		if(nxt._hx_index == 0) {
			var v = nxt.v;
			return stx_ds_LinkedListSum.Cons(v,stx_ds_LinkedList.map_filter(xs,f));
		} else {
			return stx_ds_LinkedList.map_filter(xs,f);
		}
		break;
	}
};
stx_ds_LinkedList.elemWith = function(this1,v,$with) {
	if(this1._hx_index == 1) {
		var _g = this1.tail;
		var x = this1.head;
		return $with(v,x);
	} else {
		return false;
	}
};
stx_ds_LinkedList.zipWith = function(this1,that,$with) {
	var it = $getIterator(that);
	return stx_ds_LinkedList.map(this1,function(x) {
		if(it.hasNext()) {
			var tmp = it.next();
			return $with(x,tmp);
		} else {
			var this1 = stx_core_use_UseNano.fault(stx_core_pack_Wildcard.__,{ fileName : "stx/ds/LinkedList.hx", lineNumber : 135, className : "stx.ds._LinkedList.LinkedList_Impl_", methodName : "zipWith"});
			throw haxe_Exception.thrown(new stx_core_pack_Err(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,stx_core_pack_Failure.ERR_OF(stx_core_pack_Failure.ERR_OF("E_IteratorExhaustedUnexpectedly"))),haxe_ds_Option.None,this1));
		}
	});
};
stx_ds_LinkedList.foldr = function(this1,fn,z) {
	var rec = null;
	rec = function(next,memo) {
		switch(next._hx_index) {
		case 0:
			return memo;
		case 1:
			var xs = next.tail;
			var x = next.head;
			var nx = rec(xs,memo);
			var lx = fn(x,nx);
			return lx;
		}
	};
	return rec(this1,z);
};
stx_ds_LinkedList.zip = function(this1,that) {
	return stx_ds_LinkedList.zipWith(this1,that,function(tI,tII) {
		return stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,tI,tII);
	});
};
stx_ds_LinkedList.size = function(this1) {
	return stx_ds_LinkedList.fold(this1,function(n,m) {
		return m++;
	},0);
};
stx_ds_LinkedList.is_defined = function(this1) {
	if(this1._hx_index == 0) {
		return false;
	} else {
		return true;
	}
};
stx_ds_LinkedList.has = function(this1,v) {
	var nxt = null;
	nxt = function(ls) {
		if(ls._hx_index == 1) {
			var xs = ls.tail;
			var x = ls.head;
			if(x == v) {
				return true;
			} else {
				return nxt(xs);
			}
		} else {
			return false;
		}
	};
	return nxt(this1);
};
stx_ds_LinkedList.filter = function(this1,fn) {
	return stx_ds_LinkedList.foldr(this1,function(next,memo) {
		if(fn(next)) {
			return stx_ds_LinkedList.cons(memo,next);
		} else {
			return memo;
		}
	},stx_ds_LinkedList.unit());
};
var stx_ds_NelSum = $hxEnums["stx.ds.NelSum"] = { __ename__ : "stx.ds.NelSum", __constructs__ : ["InitNel","ConsNel"]
	,InitNel: ($_=function(x) { return {_hx_index:0,x:x,__enum__:"stx.ds.NelSum",toString:$estr}; },$_.__params__ = ["x"],$_)
	,ConsNel: ($_=function(x,xs) { return {_hx_index:1,x:x,xs:xs,__enum__:"stx.ds.NelSum",toString:$estr}; },$_.__params__ = ["x","xs"],$_)
};
var stx_ds_Nel = {};
stx_ds_Nel._new = function(self) {
	var this1 = self;
	return this1;
};
stx_ds_Nel.cons = function(this1,v) {
	switch(this1._hx_index) {
	case 0:
		var x = this1.x;
		return stx_ds_NelSum.ConsNel(v,this1);
	case 1:
		var xs = this1.xs;
		var x = this1.x;
		return stx_ds_NelSum.ConsNel(v,this1);
	}
};
var stx_ds_RedBlackMapLift = function() { };
stx_ds_RedBlackMapLift.__name__ = "stx.ds.RedBlackMapLift";
stx_ds_RedBlackMapLift.set = function(self,key,val) {
	var ins = null;
	ins = function(tree,comparator) {
		switch(tree._hx_index) {
		case 0:
			return stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Red,stx_ds_RedBlackTreeSum.Leaf,stx_core_KV.fromObj({ key : key, val : val}),stx_ds_RedBlackTreeSum.Leaf);
		case 1:
			var right = tree.right;
			var label = tree.label;
			var left = tree.left;
			var color = tree.color;
			if(stx_assert_pack_Assertion.ok(comparator,key,label.key)) {
				return stx_ds_RedBlackTree._.balance(stx_ds_RedBlackTreeSum.Node(color,ins(left,comparator),label,right));
			} else if(stx_assert_pack_Assertion.ok(comparator,label.key,key)) {
				return stx_ds_RedBlackTree._.balance(stx_ds_RedBlackTreeSum.Node(color,left,label,ins(right,comparator)));
			} else {
				return tree;
			}
			break;
		}
	};
	var self1 = self.data;
	var _g = self.with.lt();
	var _g1 = ins(self1,stx_assert_pack_Ord.toAssertion(_g));
	switch(_g1._hx_index) {
	case 0:
		throw haxe_Exception.thrown("Never reach here");
	case 1:
		var _g = _g1.color;
		var right = _g1.right;
		var label = _g1.label;
		var left = _g1.left;
		return { data : stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Black,left,label,right), 'with' : self.with};
	}
};
stx_ds_RedBlackMapLift.get = function(self,key) {
	var mem = null;
	mem = function(tree) {
		switch(tree._hx_index) {
		case 0:
			return null;
		case 1:
			var _g = tree.color;
			var right = tree.right;
			var label = tree.label;
			var left = tree.left;
			if(stx_assert_type_OrderedSum.ok(self.with.lt().applyII(key,label.key))) {
				return mem(left);
			} else if(stx_assert_type_OrderedSum.ok(self.with.lt().applyII(label.key,key))) {
				return mem(right);
			} else {
				return label.val;
			}
			break;
		}
	};
	return mem(self.data);
};
stx_ds_RedBlackMapLift.rem = function(self,value) {
	var balance = stx_ds_RedBlackTree._.balance;
	var eq = self.with.eq();
	var lt = self.with.lt();
	var cons = function(data) {
		return data;
	};
	var s = function(v) {
		return stx_ds_RedBlackTree._.toString(v);
	};
	var merge = null;
	merge = function(l,r) {
		switch(l._hx_index) {
		case 0:
			var v = r;
			return v;
		case 1:
			var _g = l.right;
			var _g1 = l.label;
			var _g2 = l.left;
			var _g3 = l.color;
			switch(r._hx_index) {
			case 0:
				var v = l;
				return v;
			case 1:
				var _g4 = r.right;
				var _g5 = r.label;
				var _g6 = r.left;
				var _g7 = r.color;
				var c0 = _g3;
				var l0 = _g2;
				var v0 = _g1;
				var r0 = _g;
				var r1 = _g4;
				var v1 = _g5;
				var l1 = _g6;
				var c1 = _g7;
				if(stx_assert_type_OrderedSum.ok(lt.applyII(v0.key,v1.key))) {
					var merge1 = stx_ds_RedBlackTreeSum.Node(c1,merge(l,l1),v1,r1);
					return balance(merge1);
				} else {
					var c0 = _g3;
					var l0 = _g2;
					var v0 = _g1;
					var r0 = _g;
					var r1 = _g4;
					var v1 = _g5;
					var l1 = _g6;
					var c1 = _g7;
					if(stx_assert_type_OrderedSum.ok(lt.applyII(v1.key,v0.key))) {
						var merge1 = stx_ds_RedBlackTreeSum.Node(c0,merge(l0,r),v0,r0);
						return balance(merge1);
					} else {
						return stx_ds_RedBlackTreeSum.Leaf;
					}
				}
				break;
			default:
				return stx_ds_RedBlackTreeSum.Leaf;
			}
			break;
		default:
			if(r._hx_index == 0) {
				var v = l;
				return v;
			} else {
				return stx_ds_RedBlackTreeSum.Leaf;
			}
		}
	};
	var rec = null;
	rec = function(data) {
		switch(data._hx_index) {
		case 0:
			return cons(stx_ds_RedBlackTreeSum.Leaf);
		case 1:
			var r = data.right;
			var v = data.label;
			var l = data.left;
			var c = data.color;
			if(stx_assert_type_EqualedSum.ok(eq.applyII(value,v.key))) {
				switch(l._hx_index) {
				case 0:
					var v1 = r;
					return cons(v1);
				case 1:
					var _g = l.right;
					var _g1 = l.label;
					var _g2 = l.left;
					var _g3 = l.color;
					switch(r._hx_index) {
					case 0:
						var v1 = l;
						return cons(v1);
					case 1:
						var c0 = _g3;
						var l0 = _g2;
						var v0 = _g1;
						var r0 = _g;
						var r1 = r.right;
						var v1 = r.label;
						var l1 = r.left;
						var c1 = r.color;
						var out = merge(l,r);
						return out;
					}
					break;
				}
			} else if(stx_assert_type_OrderedSum.ok(lt.applyII(value,v.key))) {
				var rec1 = stx_ds_RedBlackTreeSum.Node(c,rec(l),v,r);
				return cons(rec1);
			} else if(stx_assert_type_OrderedSum.ok(lt.applyII(v.key,value))) {
				var rec1 = stx_ds_RedBlackTreeSum.Node(c,l,v,rec(r));
				return cons(rec1);
			} else {
				return data;
			}
			break;
		}
	};
	return stx_ds_RedBlackMap.make(self.with,rec(self.data));
};
stx_ds_RedBlackMapLift.union = function(self,that) {
	var item = $iterator(stx_ds_RedBlackMap)(that);
	while(item.hasNext()) {
		var item1 = item.next();
		var key = [item1.key];
		var ins = [null];
		var self1 = (function(ins,val,key) {
			return function(tree,comparator) {
				switch(tree._hx_index) {
				case 0:
					return stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Red,stx_ds_RedBlackTreeSum.Leaf,stx_core_KV.fromObj({ key : key[0], val : val[0]}),stx_ds_RedBlackTreeSum.Leaf);
				case 1:
					var right = tree.right;
					var label = tree.label;
					var left = tree.left;
					var color = tree.color;
					if(stx_assert_pack_Assertion.ok(comparator,key[0],label.key)) {
						return stx_ds_RedBlackTree._.balance(stx_ds_RedBlackTreeSum.Node(color,ins[0](left,comparator),label,right));
					} else if(stx_assert_pack_Assertion.ok(comparator,label.key,key[0])) {
						return stx_ds_RedBlackTree._.balance(stx_ds_RedBlackTreeSum.Node(color,left,label,ins[0](right,comparator)));
					} else {
						return tree;
					}
					break;
				}
			};
		})(ins,[item1.val],key);
		ins[0] = self1;
		var _g = ins[0](self.data,stx_assert_pack_Ord.toAssertion(self.with.lt()));
		switch(_g._hx_index) {
		case 0:
			throw haxe_Exception.thrown("Never reach here");
		case 1:
			var _g1 = _g.color;
			var right = _g.right;
			var label = _g.label;
			var left = _g.left;
			self = { data : stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Black,left,label,right), 'with' : self.with};
			break;
		}
	}
	return self;
};
var stx_ds_RedBlackMap = {};
stx_ds_RedBlackMap._new = function(self) {
	var this1 = self;
	return this1;
};
stx_ds_RedBlackMap.string = function() {
	return stx_ds_RedBlackMap.make(stx_assert_pack_Comparable.string());
};
stx_ds_RedBlackMap.make = function($with,data) {
	return { 'with' : $with, data : data == null ? stx_ds_RedBlackTreeSum.Leaf : data};
};
stx_ds_RedBlackMap.make_with = function(ord,eq) {
	return { data : stx_ds_RedBlackTreeSum.Leaf, 'with' : new stx_assert_pack_comparable_term_Base(eq,ord)};
};
stx_ds_RedBlackMap.set = function(this1,k,v) {
	var self = stx_ds_RedBlackMap.get_self(this1);
	var key = k;
	var val = v;
	var ins = null;
	ins = function(tree,comparator) {
		switch(tree._hx_index) {
		case 0:
			return stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Red,stx_ds_RedBlackTreeSum.Leaf,stx_core_KV.fromObj({ key : key, val : val}),stx_ds_RedBlackTreeSum.Leaf);
		case 1:
			var right = tree.right;
			var label = tree.label;
			var left = tree.left;
			var color = tree.color;
			if(stx_assert_pack_Assertion.ok(comparator,key,label.key)) {
				return stx_ds_RedBlackTree._.balance(stx_ds_RedBlackTreeSum.Node(color,ins(left,comparator),label,right));
			} else if(stx_assert_pack_Assertion.ok(comparator,label.key,key)) {
				return stx_ds_RedBlackTree._.balance(stx_ds_RedBlackTreeSum.Node(color,left,label,ins(right,comparator)));
			} else {
				return tree;
			}
			break;
		}
	};
	var self1 = self.data;
	var _g = self.with.lt();
	var _g1 = ins(self1,stx_assert_pack_Ord.toAssertion(_g));
	switch(_g1._hx_index) {
	case 0:
		throw haxe_Exception.thrown("Never reach here");
	case 1:
		var _g = _g1.color;
		var right = _g1.right;
		var label = _g1.label;
		var left = _g1.left;
		return { data : stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Black,left,label,right), 'with' : self.with};
	}
};
stx_ds_RedBlackMap.put = function(this1,kv) {
	return stx_ds_RedBlackMap.set(this1,kv.key,kv.val);
};
stx_ds_RedBlackMap.get = function(this1,k) {
	var self = stx_ds_RedBlackMap.get_self(this1);
	var key = k;
	var mem = null;
	mem = function(tree) {
		switch(tree._hx_index) {
		case 0:
			return null;
		case 1:
			var _g = tree.color;
			var right = tree.right;
			var label = tree.label;
			var left = tree.left;
			if(stx_assert_type_OrderedSum.ok(self.with.lt().applyII(key,label.key))) {
				return mem(left);
			} else if(stx_assert_type_OrderedSum.ok(self.with.lt().applyII(label.key,key))) {
				return mem(right);
			} else {
				return label.val;
			}
			break;
		}
	};
	return stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,mem(self.data));
};
stx_ds_RedBlackMap.has = function(this1,k) {
	var self = stx_ds_RedBlackMap.get_self(this1);
	var key = k;
	var mem = null;
	mem = function(tree) {
		switch(tree._hx_index) {
		case 0:
			return null;
		case 1:
			var _g = tree.color;
			var right = tree.right;
			var label = tree.label;
			var left = tree.left;
			if(stx_assert_type_OrderedSum.ok(self.with.lt().applyII(key,label.key))) {
				return mem(left);
			} else if(stx_assert_type_OrderedSum.ok(self.with.lt().applyII(label.key,key))) {
				return mem(right);
			} else {
				return label.val;
			}
			break;
		}
	};
	return stx_core_pack_OptionLift.is_defined(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,mem(self.data)));
};
stx_ds_RedBlackMap.rem = function(this1,k) {
	var self = stx_ds_RedBlackMap.get_self(this1);
	var value = k;
	var balance = stx_ds_RedBlackTree._.balance;
	var eq = self.with.eq();
	var lt = self.with.lt();
	var cons = function(data) {
		return data;
	};
	var s = function(v) {
		return stx_ds_RedBlackTree._.toString(v);
	};
	var merge = null;
	merge = function(l,r) {
		switch(l._hx_index) {
		case 0:
			var v = r;
			return v;
		case 1:
			var _g = l.right;
			var _g1 = l.label;
			var _g2 = l.left;
			var _g3 = l.color;
			switch(r._hx_index) {
			case 0:
				var v = l;
				return v;
			case 1:
				var _g4 = r.right;
				var _g5 = r.label;
				var _g6 = r.left;
				var _g7 = r.color;
				var c0 = _g3;
				var l0 = _g2;
				var v0 = _g1;
				var r0 = _g;
				var r1 = _g4;
				var v1 = _g5;
				var l1 = _g6;
				var c1 = _g7;
				if(stx_assert_type_OrderedSum.ok(lt.applyII(v0.key,v1.key))) {
					var merge1 = stx_ds_RedBlackTreeSum.Node(c1,merge(l,l1),v1,r1);
					return balance(merge1);
				} else {
					var c0 = _g3;
					var l0 = _g2;
					var v0 = _g1;
					var r0 = _g;
					var r1 = _g4;
					var v1 = _g5;
					var l1 = _g6;
					var c1 = _g7;
					if(stx_assert_type_OrderedSum.ok(lt.applyII(v1.key,v0.key))) {
						var merge1 = stx_ds_RedBlackTreeSum.Node(c0,merge(l0,r),v0,r0);
						return balance(merge1);
					} else {
						return stx_ds_RedBlackTreeSum.Leaf;
					}
				}
				break;
			default:
				return stx_ds_RedBlackTreeSum.Leaf;
			}
			break;
		default:
			if(r._hx_index == 0) {
				var v = l;
				return v;
			} else {
				return stx_ds_RedBlackTreeSum.Leaf;
			}
		}
	};
	var rec = null;
	rec = function(data) {
		switch(data._hx_index) {
		case 0:
			return cons(stx_ds_RedBlackTreeSum.Leaf);
		case 1:
			var r = data.right;
			var v = data.label;
			var l = data.left;
			var c = data.color;
			if(stx_assert_type_EqualedSum.ok(eq.applyII(value,v.key))) {
				switch(l._hx_index) {
				case 0:
					var v1 = r;
					return cons(v1);
				case 1:
					var _g = l.right;
					var _g1 = l.label;
					var _g2 = l.left;
					var _g3 = l.color;
					switch(r._hx_index) {
					case 0:
						var v1 = l;
						return cons(v1);
					case 1:
						var c0 = _g3;
						var l0 = _g2;
						var v0 = _g1;
						var r0 = _g;
						var r1 = r.right;
						var v1 = r.label;
						var l1 = r.left;
						var c1 = r.color;
						var out = merge(l,r);
						return out;
					}
					break;
				}
			} else if(stx_assert_type_OrderedSum.ok(lt.applyII(value,v.key))) {
				var rec1 = stx_ds_RedBlackTreeSum.Node(c,rec(l),v,r);
				return cons(rec1);
			} else if(stx_assert_type_OrderedSum.ok(lt.applyII(v.key,value))) {
				var rec1 = stx_ds_RedBlackTreeSum.Node(c,l,v,rec(r));
				return cons(rec1);
			} else {
				return data;
			}
			break;
		}
	};
	return stx_ds_RedBlackMap.make(self.with,rec(self.data));
};
stx_ds_RedBlackMap.iterator = function(this1) {
	return $iterator(stx_ds_RedBlackTree._)(this1.data);
};
stx_ds_RedBlackMap.keyValIterator = function(this1) {
	return $iterator(stx_ds_RedBlackTree._)(this1.data);
};
stx_ds_RedBlackMap.union = function(this1,that) {
	return stx_ds_RedBlackMap._.union(stx_ds_RedBlackMap.get_self(this1),that);
};
stx_ds_RedBlackMap.toIter = function(this1) {
	var _e = this1;
	return stx_core_Iter._new({ iterator : function() {
		return $iterator(stx_ds_RedBlackMap)(_e);
	}});
};
stx_ds_RedBlackMap.get_self = function(this1) {
	return this1;
};
var stx_ds_RedBlackSetLift = function() { };
stx_ds_RedBlackSetLift.__name__ = "stx.ds.RedBlackSetLift";
stx_ds_RedBlackSetLift.balance = function(set) {
	return { data : stx_ds_RedBlackTree._.balance(set.data), 'with' : set.with};
};
stx_ds_RedBlackSetLift.put = function(set,val) {
	var ins = null;
	ins = function(tree,comparator) {
		switch(tree._hx_index) {
		case 0:
			return stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Red,stx_ds_RedBlackTreeSum.Leaf,val,stx_ds_RedBlackTreeSum.Leaf);
		case 1:
			var right = tree.right;
			var v = tree.label;
			var left = tree.left;
			var color = tree.color;
			if(stx_assert_pack_Assertion.ok(comparator,val,v)) {
				return stx_ds_RedBlackTree._.balance(stx_ds_RedBlackTreeSum.Node(color,ins(left,comparator),v,right));
			} else if(stx_assert_pack_Assertion.ok(comparator,v,val)) {
				return stx_ds_RedBlackTree._.balance(stx_ds_RedBlackTreeSum.Node(color,left,v,ins(right,comparator)));
			} else {
				return stx_ds_RedBlackTreeSum.Node(color,left,val,right);
			}
			break;
		}
	};
	var set1 = set.data;
	var _g = set.with.lt();
	var _g1 = ins(set1,stx_assert_pack_Ord.toAssertion(_g));
	switch(_g1._hx_index) {
	case 0:
		throw haxe_Exception.thrown("Never reach here");
	case 1:
		var _g = _g1.color;
		var right = _g1.right;
		var label = _g1.label;
		var left = _g1.left;
		return { data : stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Black,left,label,right), 'with' : set.with};
	}
};
stx_ds_RedBlackSetLift.toString = function(set) {
	return stx_ds_RedBlackTree._.toString(set.data);
};
stx_ds_RedBlackSetLift.rem = function(set,value) {
	var balance = stx_ds_RedBlackTree._.balance;
	var eq = ($_=set.with,$bind($_,$_.eq));
	var lt = ($_=set.with,$bind($_,$_.lt));
	var cons = function(data) {
		return data;
	};
	var s = function(v) {
		return stx_ds_RedBlackTree._.toString(v);
	};
	var merge = null;
	merge = function(l,r) {
		switch(l._hx_index) {
		case 0:
			var v = r;
			return v;
		case 1:
			var _g = l.right;
			var _g1 = l.label;
			var _g2 = l.left;
			var _g3 = l.color;
			switch(r._hx_index) {
			case 0:
				var v = l;
				return v;
			case 1:
				var _g4 = r.right;
				var _g5 = r.label;
				var _g6 = r.left;
				var _g7 = r.color;
				var c0 = _g3;
				var l0 = _g2;
				var v0 = _g1;
				var r0 = _g;
				var r1 = _g4;
				var v1 = _g5;
				var l1 = _g6;
				var c1 = _g7;
				if(stx_assert_type_OrderedSum.ok(lt().applyII(v0,v1))) {
					var merge1 = stx_ds_RedBlackTreeSum.Node(c1,merge(l,l1),v1,r1);
					return balance(merge1);
				} else {
					var c0 = _g3;
					var l0 = _g2;
					var v0 = _g1;
					var r0 = _g;
					var r1 = _g4;
					var v1 = _g5;
					var l1 = _g6;
					var c1 = _g7;
					if(stx_assert_type_OrderedSum.ok(lt().applyII(v1,v0))) {
						var merge1 = stx_ds_RedBlackTreeSum.Node(c0,merge(l0,r),v0,r0);
						return balance(merge1);
					} else {
						return stx_ds_RedBlackTreeSum.Leaf;
					}
				}
				break;
			default:
				return stx_ds_RedBlackTreeSum.Leaf;
			}
			break;
		default:
			if(r._hx_index == 0) {
				var v = l;
				return v;
			} else {
				return stx_ds_RedBlackTreeSum.Leaf;
			}
		}
	};
	var rec = null;
	rec = function(data) {
		switch(data._hx_index) {
		case 0:
			return cons(stx_ds_RedBlackTreeSum.Leaf);
		case 1:
			var r = data.right;
			var v = data.label;
			var l = data.left;
			var c = data.color;
			if(stx_assert_type_EqualedSum.ok(eq().applyII(value,v))) {
				switch(l._hx_index) {
				case 0:
					var v1 = r;
					return cons(v1);
				case 1:
					var _g = l.right;
					var _g1 = l.label;
					var _g2 = l.left;
					var _g3 = l.color;
					switch(r._hx_index) {
					case 0:
						var v1 = l;
						return cons(v1);
					case 1:
						var c0 = _g3;
						var l0 = _g2;
						var v0 = _g1;
						var r0 = _g;
						var r1 = r.right;
						var v1 = r.label;
						var l1 = r.left;
						var c1 = r.color;
						var out = merge(l,r);
						return out;
					}
					break;
				}
			} else if(stx_assert_type_OrderedSum.ok(lt().applyII(value,v))) {
				var rec1 = stx_ds_RedBlackTreeSum.Node(c,rec(l),v,r);
				return cons(rec1);
			} else if(stx_assert_type_OrderedSum.ok(lt().applyII(v,value))) {
				var rec1 = stx_ds_RedBlackTreeSum.Node(c,l,v,rec(r));
				return cons(rec1);
			} else {
				return data;
			}
			break;
		}
	};
	return stx_ds_RedBlackSet.make(set.with,rec(set.data));
};
stx_ds_RedBlackSetLift.has = function(set,val) {
	var hs = null;
	hs = function(tree,$with) {
		switch(tree._hx_index) {
		case 0:
			return false;
		case 1:
			var right = tree.right;
			var v = tree.label;
			var left = tree.left;
			var color = tree.color;
			if(stx_assert_type_EqualedSum.ok($with.eq().applyII(val,v))) {
				return true;
			} else if(stx_assert_type_OrderedSum.ok($with.lt().applyII(val,v))) {
				return hs(left,$with);
			} else if(stx_assert_type_OrderedSum.ok($with.lt().applyII(v,val))) {
				return hs(right,$with);
			} else {
				return false;
			}
			break;
		}
	};
	return hs(set.data,set.with);
};
stx_ds_RedBlackSetLift.fold = function(self,fn,z) {
	var memo = z;
	var next = $iterator(stx_ds_RedBlackSet)(self);
	while(next.hasNext()) {
		var next1 = next.next();
		memo = fn(next1,memo);
	}
	return memo;
};
stx_ds_RedBlackSetLift.toArray = function(self) {
	var itr = $iterator(stx_ds_RedBlackSet)(self);
	var out = [];
	while(itr.hasNext()) out.push(itr.next());
	return out;
};
stx_ds_RedBlackSetLift.union = function(self,that) {
	var val = $iterator(stx_ds_RedBlackSet)(that);
	while(val.hasNext()) {
		var val1 = val.next();
		self = stx_ds_RedBlackSetLift.put(self,val1);
	}
	return self;
};
stx_ds_RedBlackSetLift.filter = function(self,fn) {
	var next = stx_ds_RedBlackSet.make(self.with);
	var val = $iterator(stx_ds_RedBlackSet)(self);
	while(val.hasNext()) {
		var val1 = val.next();
		if(fn(val1)) {
			next = stx_ds_RedBlackSetLift.put(next,val1);
		}
	}
	return next;
};
stx_ds_RedBlackSetLift.equals = function(self,that) {
	return stx_ds_RedBlackSetLift.fold(stx_ds_RedBlackSetLift.union(self,that),function(next,memo) {
		return stx_assert_pack_Equaled.and(memo,stx_ds_RedBlackSetLift.has(self,next) && true);
	},true);
};
var stx_ds_RedBlackSet = {};
stx_ds_RedBlackSet._new = function(self) {
	var this1 = self;
	return this1;
};
stx_ds_RedBlackSet.make = function($with,data) {
	return stx_ds_RedBlackSet._new({ 'with' : $with, data : data == null ? stx_ds_RedBlackTreeSum.Leaf : data});
};
stx_ds_RedBlackSet.make_with = function(ord,eq,data) {
	var $with = new stx_assert_pack_comparable_term_Base(eq,ord);
	return stx_ds_RedBlackSet.make($with,data);
};
stx_ds_RedBlackSet.toIterable = function(this1) {
	var _e = this1;
	return { iterator : function() {
		return $iterator(stx_ds_RedBlackSet)(_e);
	}};
};
stx_ds_RedBlackSet.iterator = function(this1) {
	return $iterator(stx_ds_RedBlackTree._)(this1.data);
};
stx_ds_RedBlackSet.difference = function(this1,that) {
	return stx_ds_RedBlackSet._.filter(stx_ds_RedBlackSet.get_self(this1),function(v) {
		return !stx_ds_RedBlackSet.has(stx_ds_RedBlackSet.uses(that,stx_ds_RedBlackSet.get_self(this1).with),v);
	});
};
stx_ds_RedBlackSet.has = function(this1,v) {
	return stx_ds_RedBlackSet._.has(this1,v);
};
stx_ds_RedBlackSet.equals = function(this1,that) {
	return stx_ds_RedBlackSetLift.fold(stx_ds_RedBlackSet._.union(stx_ds_RedBlackSet.get_self(this1),that),function(next,memo) {
		return stx_assert_pack_Equaled.and(memo,stx_ds_RedBlackSet.has(this1,next) && true);
	},true);
};
stx_ds_RedBlackSet.uses = function(this1,$with) {
	return { data : this1.data, 'with' : $with};
};
stx_ds_RedBlackSet.lt = function(this1,that) {
	if(stx_ds_RedBlackSetLift.fold(stx_ds_RedBlackSet.difference(that,this1),function(next,memo) {
		return memo++;
	},0) > 0) {
		return true;
	} else {
		return false;
	}
};
stx_ds_RedBlackSet.get_self = function(this1) {
	return this1;
};
var stx_ds_RedBlackTreeSum = $hxEnums["stx.ds.RedBlackTreeSum"] = { __ename__ : "stx.ds.RedBlackTreeSum", __constructs__ : ["Leaf","Node"]
	,Leaf: {_hx_index:0,__enum__:"stx.ds.RedBlackTreeSum",toString:$estr}
	,Node: ($_=function(color,left,label,right) { return {_hx_index:1,color:color,left:left,label:label,right:right,__enum__:"stx.ds.RedBlackTreeSum",toString:$estr}; },$_.__params__ = ["color","left","label","right"],$_)
};
var stx_ds_RedBlackTreeLift = function() { };
stx_ds_RedBlackTreeLift.__name__ = "stx.ds.RedBlackTreeLift";
stx_ds_RedBlackTreeLift.balance = function(tree) {
	if(tree._hx_index == 1) {
		var _g = tree.right;
		var _g1 = tree.label;
		var _g2 = tree.left;
		if(tree.color._hx_index == 1) {
			if(_g2._hx_index == 1) {
				var _g3 = _g2.right;
				var _g4 = _g2.label;
				var _g5 = _g2.left;
				if(_g2.color._hx_index == 0) {
					if(_g5._hx_index == 1) {
						if(_g5.color._hx_index == 0) {
							var d = _g;
							var z = _g1;
							var c = _g3;
							var y = _g4;
							var b = _g5.right;
							var x = _g5.label;
							var a = _g5.left;
							return stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Red,stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Black,a,x,b),y,stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Black,c,z,d));
						} else if(_g3._hx_index == 1) {
							if(_g3.color._hx_index == 0) {
								var d = _g;
								var z = _g1;
								var x = _g4;
								var c = _g3.right;
								var y = _g3.label;
								var b = _g3.left;
								var a = _g5;
								return stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Red,stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Black,a,x,b),y,stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Black,c,z,d));
							} else if(_g._hx_index == 1) {
								var _g6 = _g.right;
								var _g7 = _g.label;
								var _g8 = _g.left;
								if(_g.color._hx_index == 0) {
									if(_g8._hx_index == 1) {
										if(_g8.color._hx_index == 0) {
											var x = _g1;
											var d = _g6;
											var z = _g7;
											var c = _g8.right;
											var y = _g8.label;
											var b = _g8.left;
											var a = _g2;
											return stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Red,stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Black,a,x,b),y,stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Black,c,z,d));
										} else if(_g6._hx_index == 1) {
											if(_g6.color._hx_index == 0) {
												var x = _g1;
												var y = _g7;
												var d = _g6.right;
												var z = _g6.label;
												var c = _g6.left;
												var a = _g2;
												var b = _g8;
												return stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Red,stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Black,a,x,b),y,stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Black,c,z,d));
											} else {
												return tree;
											}
										} else {
											return tree;
										}
									} else if(_g6._hx_index == 1) {
										if(_g6.color._hx_index == 0) {
											var x = _g1;
											var y = _g7;
											var d = _g6.right;
											var z = _g6.label;
											var c = _g6.left;
											var a = _g2;
											var b = _g8;
											return stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Red,stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Black,a,x,b),y,stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Black,c,z,d));
										} else {
											return tree;
										}
									} else {
										return tree;
									}
								} else {
									return tree;
								}
							} else {
								return tree;
							}
						} else if(_g._hx_index == 1) {
							var _g6 = _g.right;
							var _g7 = _g.label;
							var _g8 = _g.left;
							if(_g.color._hx_index == 0) {
								if(_g8._hx_index == 1) {
									if(_g8.color._hx_index == 0) {
										var x = _g1;
										var d = _g6;
										var z = _g7;
										var c = _g8.right;
										var y = _g8.label;
										var b = _g8.left;
										var a = _g2;
										return stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Red,stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Black,a,x,b),y,stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Black,c,z,d));
									} else if(_g6._hx_index == 1) {
										if(_g6.color._hx_index == 0) {
											var x = _g1;
											var y = _g7;
											var d = _g6.right;
											var z = _g6.label;
											var c = _g6.left;
											var a = _g2;
											var b = _g8;
											return stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Red,stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Black,a,x,b),y,stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Black,c,z,d));
										} else {
											return tree;
										}
									} else {
										return tree;
									}
								} else if(_g6._hx_index == 1) {
									if(_g6.color._hx_index == 0) {
										var x = _g1;
										var y = _g7;
										var d = _g6.right;
										var z = _g6.label;
										var c = _g6.left;
										var a = _g2;
										var b = _g8;
										return stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Red,stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Black,a,x,b),y,stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Black,c,z,d));
									} else {
										return tree;
									}
								} else {
									return tree;
								}
							} else {
								return tree;
							}
						} else {
							return tree;
						}
					} else if(_g3._hx_index == 1) {
						if(_g3.color._hx_index == 0) {
							var d = _g;
							var z = _g1;
							var x = _g4;
							var c = _g3.right;
							var y = _g3.label;
							var b = _g3.left;
							var a = _g5;
							return stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Red,stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Black,a,x,b),y,stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Black,c,z,d));
						} else if(_g._hx_index == 1) {
							var _g3 = _g.right;
							var _g4 = _g.label;
							var _g5 = _g.left;
							if(_g.color._hx_index == 0) {
								if(_g5._hx_index == 1) {
									if(_g5.color._hx_index == 0) {
										var x = _g1;
										var d = _g3;
										var z = _g4;
										var c = _g5.right;
										var y = _g5.label;
										var b = _g5.left;
										var a = _g2;
										return stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Red,stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Black,a,x,b),y,stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Black,c,z,d));
									} else if(_g3._hx_index == 1) {
										if(_g3.color._hx_index == 0) {
											var x = _g1;
											var y = _g4;
											var d = _g3.right;
											var z = _g3.label;
											var c = _g3.left;
											var a = _g2;
											var b = _g5;
											return stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Red,stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Black,a,x,b),y,stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Black,c,z,d));
										} else {
											return tree;
										}
									} else {
										return tree;
									}
								} else if(_g3._hx_index == 1) {
									if(_g3.color._hx_index == 0) {
										var x = _g1;
										var y = _g4;
										var d = _g3.right;
										var z = _g3.label;
										var c = _g3.left;
										var a = _g2;
										var b = _g5;
										return stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Red,stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Black,a,x,b),y,stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Black,c,z,d));
									} else {
										return tree;
									}
								} else {
									return tree;
								}
							} else {
								return tree;
							}
						} else {
							return tree;
						}
					} else if(_g._hx_index == 1) {
						var _g3 = _g.right;
						var _g4 = _g.label;
						var _g5 = _g.left;
						if(_g.color._hx_index == 0) {
							if(_g5._hx_index == 1) {
								if(_g5.color._hx_index == 0) {
									var x = _g1;
									var d = _g3;
									var z = _g4;
									var c = _g5.right;
									var y = _g5.label;
									var b = _g5.left;
									var a = _g2;
									return stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Red,stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Black,a,x,b),y,stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Black,c,z,d));
								} else if(_g3._hx_index == 1) {
									if(_g3.color._hx_index == 0) {
										var x = _g1;
										var y = _g4;
										var d = _g3.right;
										var z = _g3.label;
										var c = _g3.left;
										var a = _g2;
										var b = _g5;
										return stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Red,stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Black,a,x,b),y,stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Black,c,z,d));
									} else {
										return tree;
									}
								} else {
									return tree;
								}
							} else if(_g3._hx_index == 1) {
								if(_g3.color._hx_index == 0) {
									var x = _g1;
									var y = _g4;
									var d = _g3.right;
									var z = _g3.label;
									var c = _g3.left;
									var a = _g2;
									var b = _g5;
									return stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Red,stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Black,a,x,b),y,stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Black,c,z,d));
								} else {
									return tree;
								}
							} else {
								return tree;
							}
						} else {
							return tree;
						}
					} else {
						return tree;
					}
				} else if(_g._hx_index == 1) {
					var _g3 = _g.right;
					var _g4 = _g.label;
					var _g5 = _g.left;
					if(_g.color._hx_index == 0) {
						if(_g5._hx_index == 1) {
							if(_g5.color._hx_index == 0) {
								var x = _g1;
								var d = _g3;
								var z = _g4;
								var c = _g5.right;
								var y = _g5.label;
								var b = _g5.left;
								var a = _g2;
								return stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Red,stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Black,a,x,b),y,stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Black,c,z,d));
							} else if(_g3._hx_index == 1) {
								if(_g3.color._hx_index == 0) {
									var x = _g1;
									var y = _g4;
									var d = _g3.right;
									var z = _g3.label;
									var c = _g3.left;
									var a = _g2;
									var b = _g5;
									return stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Red,stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Black,a,x,b),y,stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Black,c,z,d));
								} else {
									return tree;
								}
							} else {
								return tree;
							}
						} else if(_g3._hx_index == 1) {
							if(_g3.color._hx_index == 0) {
								var x = _g1;
								var y = _g4;
								var d = _g3.right;
								var z = _g3.label;
								var c = _g3.left;
								var a = _g2;
								var b = _g5;
								return stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Red,stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Black,a,x,b),y,stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Black,c,z,d));
							} else {
								return tree;
							}
						} else {
							return tree;
						}
					} else {
						return tree;
					}
				} else {
					return tree;
				}
			} else if(_g._hx_index == 1) {
				var _g3 = _g.right;
				var _g4 = _g.label;
				var _g5 = _g.left;
				if(_g.color._hx_index == 0) {
					if(_g5._hx_index == 1) {
						if(_g5.color._hx_index == 0) {
							var x = _g1;
							var d = _g3;
							var z = _g4;
							var c = _g5.right;
							var y = _g5.label;
							var b = _g5.left;
							var a = _g2;
							return stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Red,stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Black,a,x,b),y,stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Black,c,z,d));
						} else if(_g3._hx_index == 1) {
							if(_g3.color._hx_index == 0) {
								var x = _g1;
								var y = _g4;
								var d = _g3.right;
								var z = _g3.label;
								var c = _g3.left;
								var a = _g2;
								var b = _g5;
								return stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Red,stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Black,a,x,b),y,stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Black,c,z,d));
							} else {
								return tree;
							}
						} else {
							return tree;
						}
					} else if(_g3._hx_index == 1) {
						if(_g3.color._hx_index == 0) {
							var x = _g1;
							var y = _g4;
							var d = _g3.right;
							var z = _g3.label;
							var c = _g3.left;
							var a = _g2;
							var b = _g5;
							return stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Red,stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Black,a,x,b),y,stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Black,c,z,d));
						} else {
							return tree;
						}
					} else {
						return tree;
					}
				} else {
					return tree;
				}
			} else {
				return tree;
			}
		} else {
			return tree;
		}
	} else {
		return tree;
	}
};
stx_ds_RedBlackTreeLift.toString = function(tree) {
	var rec = null;
	rec = function(tree,ins) {
		if(ins == null) {
			ins = "  ";
		}
		var nins = "" + ins + "  ";
		switch(tree._hx_index) {
		case 0:
			return "";
		case 1:
			var right = tree.right;
			var label = tree.label;
			var left = tree.left;
			var colour = tree.color;
			var c = colour == stx_RedBlackSum.Red ? "r" : "b";
			var l = rec(left,nins);
			var r = rec(right,nins);
			return "(" + c + ":" + Std.string(label) + ")\n" + ins + "<-:" + l + "\n" + ins + "->:" + r;
		}
	};
	return "\n" + rec(tree);
};
stx_ds_RedBlackTreeLift.iterator = function(tree) {
	var recurse = null;
	recurse = function(head,stack) {
		switch(head._hx_index) {
		case 0:
			if(stack.length == 0) {
				var head1 = stx_ds_RedBlackTreeSum.Leaf;
				var stack1 = [];
				return stx_fp_pack_LazyStream.make(stx_fp_pack_LazyStream.fromThunk(function() {
					return recurse(head1,stack1);
				}),haxe_ds_Option.None);
			} else {
				var arr = stack;
				var recurse1 = stx_core_pack_OptionLift.def(stx_core_pack_ArrayLift.head(arr),function() {
					return stx_ds_RedBlackTreeSum.Leaf;
				});
				var recurse2 = stx_core_pack_ArrayLift.tail(arr);
				return recurse(recurse1,recurse2);
			}
			break;
		case 1:
			var _g = head.color;
			var arr = stack;
			var r = head.right;
			var v = head.label;
			var l = head.left;
			var head = l;
			var stack = stx_core_pack_ArrayLift.cons(arr,r);
			return stx_fp_pack_LazyStream.make(stx_fp_pack_LazyStream.fromThunk(function() {
				return recurse(head,stack);
			}),haxe_ds_Option.Some(v));
		}
	};
	var val = recurse(tree,[]);
	return { next : function() {
		var res = stx_fp_pack_LazyStream.reply(val);
		var v = stx_core_pack_OptionLift.def(stx_core_pack_CoupleLift.fst(res),function() {
			return null;
		});
		val = stx_fp_pack_LazyStream.fromTuple(stx_fp_pack_LazyStream.reply(stx_core_pack_CoupleLift.snd(res)));
		return v;
	}, hasNext : function() {
		var res = stx_fp_pack_LazyStream.reply(val);
		return stx_core_pack_OptionLift.def(stx_core_pack_OptionLift.map(stx_core_pack_CoupleLift.fst(res),function(_) {
			return true;
		}),function() {
			return false;
		});
	}};
};
var stx_ds_RedBlackTree = {};
stx_ds_RedBlackTree._new = function(self) {
	var this1 = self;
	return this1;
};
var stx_ds_kary_$tree_Zipper = {};
stx_ds_kary_$tree_Zipper._new = function(self) {
	var this1 = self;
	return this1;
};
stx_ds_kary_$tree_Zipper.fromKaryTree = function(v) {
	return stx_ds_kary_$tree_Zipper._new(stx_ds_LinkedListSum.Cons(v,stx_ds_LinkedListSum.Nil));
};
stx_ds_kary_$tree_Zipper.isRoot = function(this1) {
	if(this1._hx_index == 1) {
		if(this1.tail._hx_index == 0) {
			var x = this1.head;
			return true;
		} else {
			return false;
		}
	} else {
		return false;
	}
};
stx_ds_kary_$tree_Zipper.end = function(this1) {
	return stx_ds_LinkedListSum.Cons(stx_ds_KaryTreeSum.Nought,this1);
};
stx_ds_kary_$tree_Zipper.right = function(this1) {
	if(this1._hx_index == 1) {
		var _g = this1.tail;
		if(_g._hx_index == 1) {
			var _g1 = _g.head;
			if(_g1._hx_index == 1) {
				var cursor = this1.head;
				var previous = _g.tail;
				var siblings = _g1.xs;
				var v = _g1.x;
				var _g = stx_ds_kary_$tree_Zipper.find_head(this1,siblings,cursor);
				if(_g._hx_index == 1) {
					var _g1 = _g.tail;
					var _g2 = _g.head;
					if(_g1._hx_index == 1) {
						var _g = _g1.tail;
						var right = _g1.head;
						var tree = stx_ds_KaryTreeSum.Branch(v,siblings);
						var o = stx_ds_kary_$tree_Zipper._new(stx_ds_LinkedListSum.Cons(right,stx_ds_LinkedListSum.Cons(tree,previous)));
						return o;
					} else {
						var tree = stx_ds_KaryTreeSum.Branch(v,siblings);
						return stx_ds_LinkedListSum.Cons(stx_ds_KaryTreeSum.Nought,stx_ds_LinkedListSum.Cons(tree,previous));
					}
				} else {
					var tree = stx_ds_KaryTreeSum.Branch(v,siblings);
					return stx_ds_LinkedListSum.Cons(stx_ds_KaryTreeSum.Nought,stx_ds_LinkedListSum.Cons(tree,previous));
				}
			} else {
				return stx_ds_kary_$tree_Zipper.end(this1);
			}
		} else {
			return stx_ds_kary_$tree_Zipper.end(this1);
		}
	} else {
		return stx_ds_kary_$tree_Zipper.end(this1);
	}
};
stx_ds_kary_$tree_Zipper.left = function(this1) {
	if(this1._hx_index == 1) {
		var _g = this1.tail;
		if(_g._hx_index == 1) {
			var _g1 = _g.head;
			if(_g1._hx_index == 1) {
				var cursor = this1.head;
				var previous = _g.tail;
				var siblings = _g1.xs;
				var v = _g1.x;
				var _g = stx_ds_kary_$tree_Zipper.find_left(this1,siblings,cursor);
				if(_g._hx_index == 1) {
					var _g1 = _g.tail;
					var left = _g.head;
					var tree = stx_ds_KaryTreeSum.Branch(v,siblings);
					return stx_ds_LinkedListSum.Cons(left,stx_ds_LinkedListSum.Cons(tree,previous));
				} else {
					var tree = stx_ds_KaryTreeSum.Branch(v,siblings);
					return stx_ds_LinkedListSum.Cons(stx_ds_KaryTreeSum.Nought,stx_ds_LinkedListSum.Cons(tree,previous));
				}
			} else {
				return stx_ds_LinkedListSum.Cons(stx_ds_KaryTreeSum.Nought,this1);
			}
		} else {
			return stx_ds_LinkedListSum.Cons(stx_ds_KaryTreeSum.Nought,this1);
		}
	} else {
		return stx_ds_LinkedListSum.Cons(stx_ds_KaryTreeSum.Nought,this1);
	}
};
stx_ds_kary_$tree_Zipper.up = function(this1) {
	var o;
	if(this1._hx_index == 1) {
		var _g = this1.tail;
		if(_g._hx_index == 1) {
			var cursor = this1.head;
			var rest = _g.tail;
			var parent = _g.head;
			o = stx_ds_LinkedListSum.Cons(parent,rest);
		} else {
			o = this1;
		}
	} else {
		o = this1;
	}
	return o;
};
stx_ds_kary_$tree_Zipper.down = function(this1) {
	if(this1._hx_index == 1) {
		var _g = this1.tail;
		var _g = this1.head;
		if(_g._hx_index == 1) {
			var _g1 = _g.xs;
			var _g2 = _g.x;
			if(_g1 == null) {
				return stx_ds_LinkedListSum.Cons(stx_ds_KaryTreeSum.Nought,this1);
			} else if(_g1._hx_index == 1) {
				var _g = _g1.tail;
				var firstChild = _g1.head;
				return stx_ds_LinkedListSum.Cons(firstChild,this1);
			} else {
				return stx_ds_LinkedListSum.Cons(stx_ds_KaryTreeSum.Nought,this1);
			}
		} else {
			return stx_ds_LinkedListSum.Cons(stx_ds_KaryTreeSum.Nought,this1);
		}
	} else {
		return stx_ds_LinkedListSum.Cons(stx_ds_KaryTreeSum.Nought,this1);
	}
};
stx_ds_kary_$tree_Zipper.value = function(this1) {
	if(this1._hx_index == 1) {
		var _g = this1.tail;
		var _g = this1.head;
		if(_g._hx_index == 1) {
			var _g1 = _g.xs;
			var v = _g.x;
			return v;
		} else {
			return null;
		}
	} else {
		return null;
	}
};
stx_ds_kary_$tree_Zipper.root = function(this1) {
	return stx_ds_LinkedListSum.Cons(stx_ds_LinkedList.last(this1),stx_ds_LinkedListSum.Nil);
};
stx_ds_kary_$tree_Zipper.toTree = function(this1) {
	return stx_ds_LinkedList.last(this1);
};
stx_ds_kary_$tree_Zipper.add_child = function(this1,v) {
	var new_tree = stx_ds_KaryTreeSum.Branch(v,stx_ds_LinkedListSum.Nil);
	return stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,new_tree,stx_ds_kary_$tree_Zipper.add_child_node(this1,new_tree));
};
stx_ds_kary_$tree_Zipper.add_child_node = function(this1,v) {
	if(this1._hx_index == 1) {
		var _g = this1.head;
		if(_g._hx_index == 1) {
			var rest = this1.tail;
			var children = _g.xs;
			var node = _g.x;
			var new_node = stx_ds_KaryTreeSum.Branch(node,stx_ds_LinkedList.cons(children,v));
			return stx_ds_kary_$tree_Zipper.update(this1,new_node);
		} else {
			return stx_ds_LinkedListSum.Cons(v,stx_ds_LinkedListSum.Nil);
		}
	} else {
		return stx_ds_LinkedListSum.Cons(v,stx_ds_LinkedListSum.Nil);
	}
};
stx_ds_kary_$tree_Zipper.rem_child_node = function(this1,v) {
	if(this1._hx_index == 1) {
		var _g = this1.tail;
		var _g1 = this1.head;
		if(_g1._hx_index == 1) {
			var _g2 = _g1.xs;
			var _g3 = _g1.x;
			var rest = _g;
			var children = _g2;
			var node = _g3;
			if(children == null) {
				return this1;
			} else {
				var rest = _g;
				var children = _g2;
				var node = _g3;
				children = stx_ds_LinkedList.fold(children,function(next,memo) {
					if(stx_ds_kary_$tree_Zipper.tree_equals(v,next)) {
						return memo;
					} else {
						return stx_ds_LinkedListSum.Cons(next,memo);
					}
				},stx_ds_LinkedListSum.Nil);
				var new_node = stx_ds_KaryTreeSum.Branch(node,children);
				return stx_ds_kary_$tree_Zipper.update(this1,new_node);
			}
		} else {
			return this1;
		}
	} else {
		return this1;
	}
};
stx_ds_kary_$tree_Zipper.select_child = function(this1,new_head) {
	if(this1._hx_index == 1) {
		var t = this1.tail;
		var head = this1.head;
		return stx_ds_LinkedListSum.Cons(new_head,t);
	} else {
		return stx_ds_LinkedListSum.Cons(new_head,stx_ds_LinkedListSum.Nil);
	}
};
stx_ds_kary_$tree_Zipper.update = function(this1,replace) {
	return stx_ds_kary_$tree_Zippers.update(this1,replace);
};
stx_ds_kary_$tree_Zipper.selectDF = function(this1,fn) {
	var head = stx_ds_LinkedList.head(this1);
	var path = stx_ds_LinkedListSum.Nil;
	var handler = null;
	handler = function(node) {
		if(node == null) {
			return false;
		}
		path = stx_ds_LinkedList.cons(path,node);
		if(node._hx_index == 0) {
			return false;
		}
		var handler1 = stx_ds_KaryTree.value(node);
		if(fn(handler1)) {
			return true;
		} else {
			var children = stx_ds_KaryTree.children(node);
			var node = $iterator(stx_ds_LinkedList)(children);
			while(node.hasNext()) {
				var node1 = node.next();
				if(!handler(node1)) {
					path = stx_ds_LinkedList.tail(path);
				} else {
					return true;
				}
			}
			return false;
		}
	};
	handler(head);
	if(path == stx_ds_LinkedListSum.Nil) {
		return stx_ds_LinkedList.concat(this1,stx_ds_LinkedList.cons(path,stx_ds_KaryTreeSum.Nought));
	} else {
		return stx_ds_LinkedList.concat(stx_ds_LinkedList.tail(this1),path);
	}
};
stx_ds_kary_$tree_Zipper.find_left = function(this1,list,cursor) {
	var handler = null;
	handler = function(ls,c) {
		if(ls._hx_index == 1) {
			var _g = ls.tail;
			var _g1 = ls.head;
			if(_g._hx_index == 1) {
				var x = _g1;
				var ys = _g.tail;
				var y = _g.head;
				if(stx_ds_kary_$tree_Zipper.tree_equals(c,y)) {
					return stx_ds_LinkedListSum.Cons(x,ys);
				} else {
					var x = _g1;
					var xs = _g;
					return handler(xs,c);
				}
			} else {
				var x = _g1;
				var xs = _g;
				return handler(xs,c);
			}
		} else {
			return stx_ds_LinkedListSum.Nil;
		}
	};
	return handler(list,cursor);
};
stx_ds_kary_$tree_Zipper.find_head = function(this1,list,cursor) {
	var handler = null;
	handler = function(ls,c) {
		if(ls._hx_index == 1) {
			var _g = ls.tail;
			var _g1 = ls.head;
			var xs = _g;
			var x = _g1;
			if(stx_ds_kary_$tree_Zipper.tree_equals(c,x)) {
				return stx_ds_LinkedListSum.Cons(x,xs);
			} else {
				var xs = _g;
				var x = _g1;
				return handler(xs,c);
			}
		} else {
			return stx_ds_LinkedListSum.Nil;
		}
	};
	return handler(list,cursor);
};
stx_ds_kary_$tree_Zipper.tree_equals = function(treel,treer) {
	return treel == treer;
};
var stx_ds_kary_$tree_Zippers = function() { };
stx_ds_kary_$tree_Zippers.__name__ = "stx.ds.kary_tree.Zippers";
stx_ds_kary_$tree_Zippers.update = function(zip,replace) {
	var changes = stx_ds_LinkedList.fold(zip,function(next,memo) {
		if(memo._hx_index == 0) {
			var ls = stx_ds_LinkedList.cons(stx_ds_LinkedList.unit(),stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,next,replace));
			return ls;
		} else {
			switch(next._hx_index) {
			case 0:
				return memo;
			case 1:
				var rst = next.xs;
				var v = next.x;
				var memo1 = memo;
				if(rst == null) {
					rst = stx_ds_LinkedListSum.Nil;
				}
				var leaves = stx_ds_LinkedList.map(rst,function(x) {
					var shouldChange = x == stx_core_pack_CoupleLift.fst(stx_ds_LinkedList.head(memo1));
					if(shouldChange) {
						return stx_core_pack_CoupleLift.snd(stx_ds_LinkedList.head(memo1));
					} else {
						return x;
					}
				});
				var branch = stx_ds_KaryTreeSum.Branch(v,leaves);
				var o = stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,next,branch);
				var o1 = stx_ds_LinkedList.cons(memo1,o);
				return o1;
			}
		}
	},stx_ds_LinkedListSum.Nil);
	var handler = null;
	handler = function(next) {
		if(next._hx_index == 1) {
			var xs = next.tail;
			var x = next.head;
			var ls = handler(xs);
			return stx_ds_LinkedList.concat(ls,stx_ds_LinkedListSum.Cons(stx_core_pack_CoupleLift.snd(x),stx_ds_LinkedListSum.Nil));
		} else {
			return stx_ds_LinkedListSum.Nil;
		}
	};
	var o = handler(changes);
	return stx_ds_kary_$tree_Zipper._new(o);
};
var stx_fn_Binary = {};
stx_fn_Binary._ = function() {
	return stx_fn_binary_Constructor.ZERO;
};
stx_fn_Binary._new = function(self) {
	var this1 = self;
	return this1;
};
stx_fn_Binary.prj = function(this1) {
	return this1;
};
var stx_fn_Block = {};
stx_fn_Block._ = function() {
	return stx_fn__$Block_Constructor.ZERO;
};
stx_fn_Block._new = function(self) {
	var this1 = self;
	return this1;
};
stx_fn_Block.unit = function() {
	return function() {
	};
};
stx_fn_Block.pure = function(fn) {
	return fn;
};
stx_fn_Block.lift = function(fn) {
	return stx_fn_Block._new(fn);
};
stx_fn_Block.equals = function(this1,that) {
	return stx_fn__$Block_Constructor.ZERO._.equals(that,this1);
};
stx_fn_Block.enact = function(this1) {
	stx_fn__$Block_Constructor.ZERO._.enact(this1);
};
stx_fn_Block.returning = function(this1,r) {
	return stx_fn__$Block_Constructor.ZERO._.returning(r,this1);
};
stx_fn_Block.promote = function(this1) {
	return stx_fn__$Block_Constructor.ZERO._.promote(this1);
};
stx_fn_Block.then = function(this1,that) {
	return stx_fn__$Block_Constructor.ZERO._.then(that,this1);
};
var stx_fn__$Block_Constructor = function() {
	this._ = new stx_fn__$Block_Destructure();
};
stx_fn__$Block_Constructor.__name__ = "stx.fn._Block.Constructor";
stx_fn__$Block_Constructor.prototype = {
	_: null
	,__class__: stx_fn__$Block_Constructor
};
var stx_fn__$Block_Destructure = function() {
};
stx_fn__$Block_Destructure.__name__ = "stx.fn._Block.Destructure";
stx_fn__$Block_Destructure.prototype = {
	returning: function(r,self) {
		return function() {
			self();
			return r;
		};
	}
	,equals: function(that,self) {
		return Reflect.compareMethods(self,that);
	}
	,promote: function(f) {
		return function(p) {
			f();
		};
	}
	,then: function(that,self) {
		return function() {
			self();
			that();
		};
	}
	,enact: function(self) {
		self();
	}
	,__class__: stx_fn__$Block_Destructure
};
var stx_fn_Dual = {};
stx_fn_Dual.unit = function() {
	return stx_fn_Dual._new(function(tp) {
		return tp;
	});
};
stx_fn_Dual._new = function(self) {
	var this1 = self;
	return this1;
};
stx_fn_Dual.into = function(this1,fn) {
	return stx_fn_unary_Implementation.then(this1,stx_core_use_UseNano.decouple(stx_core_pack_Wildcard.__,fn));
};
stx_fn_Dual.pass = function(this1,fn) {
	return stx_fn_Dual.fromUnary(stx_fn_unary_Implementation.then(this1,stx_core_use_UseNano.decouple(stx_core_pack_Wildcard.__,fn)));
};
stx_fn_Dual.first = function(this1,fn) {
	var next = stx_fn_lift_LiftDual.first(fn);
	return stx_fn_Dual.fromUnary(stx_fn_unary_Implementation.then(this1,stx_fn_Dual.toUnary(stx_fn_lift_LiftDual.first(fn))));
};
stx_fn_Dual.second = function(this1,fn) {
	return stx_fn_Dual.fromUnary(stx_fn_unary_Implementation.then(this1,stx_fn_Dual.toUnary(stx_fn_lift_LiftDual.second(fn))));
};
stx_fn_Dual.fromUnary = function(self) {
	return stx_fn_Dual._new(self);
};
stx_fn_Dual.toUnary = function(this1) {
	return this1;
};
var stx_fn_Fork = {};
stx_fn_Fork._new = function(self) {
	var this1 = self;
	return this1;
};
stx_fn_Fork.fromUnary = function(fn) {
	return stx_fn_Fork._new(fn);
};
stx_fn_Fork.toUnary = function(this1) {
	return this1;
};
stx_fn_Fork.then = function(this1,fn) {
	return stx_fn_unary_Implementation.then(this1,stx_fn_Join.toUnary(fn));
};
var stx_fn_Join = {};
stx_fn_Join._new = function(self) {
	var this1 = self;
	return this1;
};
stx_fn_Join.toUnary = function(this1) {
	return this1;
};
stx_fn_Join.toFunction = function(this1) {
	return this1;
};
stx_fn_Join.fromFn2 = function(fn) {
	return function(tp) {
		return (stx_core_use_UseNano.decouple(stx_core_pack_Wildcard.__,fn))(tp);
	};
};
var stx_fn_Other = {};
stx_fn_Other._new = function(self) {
	var this1 = self;
	return this1;
};
stx_fn_Other.reply = function(this1) {
	return this1(haxe_ds_Option.None);
};
stx_fn_Other.apply = function(this1,v) {
	return this1(haxe_ds_Option.Some(v));
};
stx_fn_Other.close = function(this1,v) {
	return function() {
		return stx_fn_Other.apply(this1,v);
	};
};
stx_fn_Other.fromUnaryT = function(fn) {
	return stx_fn_Other._new(fn);
};
stx_fn_Other.broker = function(this1,fn) {
	return fn(this1);
};
var stx_fn_Perhaps = {};
stx_fn_Perhaps._new = function(self) {
	var this1 = self;
	return this1;
};
var stx_fn_Pick = {};
stx_fn_Pick._new = function(self) {
	var this1 = self;
	return this1;
};
stx_fn_Pick.leftPickToSwitch = function(fn) {
	return function(e) {
		switch(e._hx_index) {
		case 0:
			var v = e.v;
			return fn(v);
		case 1:
			var v = e.v;
			return haxe_ds_Either.Right(v);
		}
	};
};
stx_fn_Pick.rightPickToSwitch = function(fn) {
	return function(e) {
		switch(e._hx_index) {
		case 0:
			var v = e.v;
			return haxe_ds_Either.Left(v);
		case 1:
			var v = e.v;
			return fn(v);
		}
	};
};
var stx_fn_Sink = {};
stx_fn_Sink._new = function(self) {
	var this1 = self;
	return this1;
};
stx_fn_Sink.unit = function() {
	return stx_fn_Sink.lift(function(p) {
	});
};
stx_fn_Sink.lift = function(fn) {
	return stx_fn_Sink._new(fn);
};
stx_fn_Sink.toTinkCallback = function(this1) {
	return this1;
};
stx_fn_Sink.stage = function(this1,before,after) {
	return function(p) {
		before(p);
		this1(p);
		after(p);
	};
};
var stx_fn_Switch = {};
stx_fn_Switch._new = function(self) {
	var this1 = self;
	return this1;
};
var stx_fn_Ternary = {};
stx_fn_Ternary._ = function() {
	return stx_fn_ternary_Constructor.ZERO;
};
stx_fn_Ternary._new = function(self) {
	var this1 = self;
	return this1;
};
stx_fn_Ternary.curry = function(this1) {
	return stx_fn_ternary_Constructor.ZERO._.curry(this1);
};
stx_fn_Ternary.rotate = function(this1) {
	return stx_fn_ternary_Constructor.ZERO._.rotate(this1);
};
stx_fn_Ternary.cache = function(this1,pI,pII,pIII) {
	return stx_fn_ternary_Constructor.ZERO._.cache(pI,pII,pIII,this1);
};
stx_fn_Ternary.equals = function(this1,that) {
	return stx_fn_ternary_Constructor.ZERO._.equals(that,this1);
};
var stx_fn_Thunk = {};
stx_fn_Thunk._ = function() {
	return stx_fn__$Thunk_Constructor.ZERO;
};
stx_fn_Thunk.lift = function(thk) {
	return stx_fn_Thunk._new(thk);
};
stx_fn_Thunk._new = function(self) {
	var this1 = self;
	return this1;
};
stx_fn_Thunk.then = function(this1,that) {
	return stx_fn__$Thunk_Constructor.ZERO._.then(that,this1);
};
stx_fn_Thunk.cache = function(this1) {
	return stx_fn__$Thunk_Constructor.ZERO._.cache(this1);
};
stx_fn_Thunk.prj = function(this1) {
	return this1;
};
var stx_fn__$Thunk_Constructor = function() {
	this._ = new stx_fn_Destructure();
	stx_core_pack_Clazz.call(this);
};
stx_fn__$Thunk_Constructor.__name__ = "stx.fn._Thunk.Constructor";
stx_fn__$Thunk_Constructor.__super__ = stx_core_pack_Clazz;
stx_fn__$Thunk_Constructor.prototype = $extend(stx_core_pack_Clazz.prototype,{
	_: null
	,__class__: stx_fn__$Thunk_Constructor
});
var stx_fn_Destructure = function() {
	stx_core_pack_Clazz.call(this);
};
stx_fn_Destructure.__name__ = "stx.fn.Destructure";
stx_fn_Destructure.promote = function(self) {
	return function(p) {
		return self();
	};
};
stx_fn_Destructure.stage = function(f,before,after) {
	var state = before();
	var result = f();
	after(state);
	return result;
};
stx_fn_Destructure.equals = function(that,self) {
	return Reflect.compareMethods(self,that);
};
stx_fn_Destructure.__super__ = stx_core_pack_Clazz;
stx_fn_Destructure.prototype = $extend(stx_core_pack_Clazz.prototype,{
	reply: function(self) {
		return self();
	}
	,cache: function(self) {
		var r = null;
		return function() {
			if(r == null) {
				r = false;
				r = self();
				return r;
			} else {
				return r;
			}
		};
	}
	,then: function(that,self) {
		return function() {
			var tmp = self();
			return that(tmp);
		};
	}
	,__class__: stx_fn_Destructure
});
var stx_fn_Unary = {};
stx_fn_Unary.unit = function() {
	return stx_fn_unary_Constructor.ZERO.unit();
};
stx_fn_Unary._ = function() {
	return stx_fn_unary_Constructor.ZERO;
};
stx_fn_Unary.lift = function(fn) {
	return stx_fn_Unary._new(fn);
};
stx_fn_Unary.pure = function(r) {
	return function(v) {
		return r;
	};
};
stx_fn_Unary._new = function(self) {
	var this1 = self;
	return this1;
};
stx_fn_Unary.prj = function(this1) {
	return this1;
};
var stx_fn_binary_Constructor = function() {
	this._ = new stx_fn_binary_Destructure();
};
stx_fn_binary_Constructor.__name__ = "stx.fn.binary.Constructor";
stx_fn_binary_Constructor.prototype = {
	_: null
	,__class__: stx_fn_binary_Constructor
};
var stx_fn_binary_Destructure = function() {
	stx_core_pack_Clazz.call(this);
};
stx_fn_binary_Destructure.__name__ = "stx.fn.binary.Destructure";
stx_fn_binary_Destructure.__super__ = stx_core_pack_Clazz;
stx_fn_binary_Destructure.prototype = $extend(stx_core_pack_Clazz.prototype,{
	braid: function(pI,pII,self) {
		return self(pI,pII);
	}
	,rotate: function(f) {
		return function(pII,pI) {
			return f(pI,pII);
		};
	}
	,swap: function(f) {
		return function(pII,pI) {
			return f(pI,pII);
		};
	}
	,curry: function(f) {
		return function(pI) {
			return function(pII) {
				return f(pI,pII);
			};
		};
	}
	,equals: function(that,self) {
		return Reflect.compareMethods(self,that);
	}
	,bindPi: function(pI,self) {
		var fn = self;
		var _g = fn;
		var a1 = pI;
		return function(a2) {
			return _g(a1,a2);
		};
	}
	,bindPii: function(pII,self) {
		var fn = self;
		var _g = fn;
		var a2 = pII;
		return function(a1) {
			return _g(a1,a2);
		};
	}
	,cache: function(pI,pII,self) {
		var r = null;
		return function() {
			if(r == null) {
				r = false;
				r = self(pI,pII);
				return r;
			} else {
				return r;
			}
		};
	}
	,pipe: function(tp,self) {
		return function() {
			return stx_core_pack_CoupleLift.decouple(tp(),self);
		};
	}
	,then: function(that,self) {
		return function(pI,pII) {
			var tmp = self(pI,pII);
			return that(tmp);
		};
	}
	,__class__: stx_fn_binary_Destructure
});
var stx_fn_binary_Implementation = function() { };
stx_fn_binary_Implementation.__name__ = "stx.fn.binary.Implementation";
stx_fn_binary_Implementation._ = function() {
	return stx_fn_binary_Constructor.ZERO._;
};
stx_fn_binary_Implementation.then = function(self,that) {
	return stx_fn_binary_Implementation._().then(that,self);
};
stx_fn_binary_Implementation.braid = function(self,pI,pII) {
	return stx_fn_binary_Implementation._().braid(pI,pII,self);
};
stx_fn_binary_Implementation.rotate = function(self) {
	return stx_fn_binary_Implementation._().rotate(self);
};
stx_fn_binary_Implementation.swap = function(self) {
	return stx_fn_binary_Implementation._().swap(self);
};
stx_fn_binary_Implementation.curry = function(self) {
	return stx_fn_binary_Implementation._().curry(self);
};
stx_fn_binary_Implementation.equals = function(self,that) {
	return stx_fn_binary_Implementation._().equals(that,self);
};
stx_fn_binary_Implementation.bindPi = function(self,pI) {
	return stx_fn_binary_Implementation._().bindPi(pI,self);
};
stx_fn_binary_Implementation.bindPii = function(self,pII) {
	return stx_fn_binary_Implementation._().bindPii(pII,self);
};
stx_fn_binary_Implementation.cache = function(self,pI,pII) {
	return stx_fn_binary_Implementation._().cache(pI,pII,self);
};
stx_fn_binary_Implementation.pipe = function(self,tp) {
	return stx_fn_binary_Implementation._().pipe(tp,self);
};
var stx_fn_lift_LiftBroker = function() { };
stx_fn_lift_LiftBroker.__name__ = "stx.fn.lift.LiftBroker";
stx_fn_lift_LiftBroker.broker = function(v,fn) {
	return (fn(function(x) {
		return x;
	}))(v);
};
var stx_fn_lift_LiftDual = function() { };
stx_fn_lift_LiftDual.__name__ = "stx.fn.lift.LiftDual";
stx_fn_lift_LiftDual.fan = function(a) {
	return stx_fn_Fork.fromUnary(stx_fn_unary_Implementation.then(a,function(x) {
		return stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,x,x);
	}));
};
stx_fn_lift_LiftDual.fork = function(self,that) {
	return function(p) {
		return stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,self(p),that(p));
	};
};
stx_fn_lift_LiftDual.span = function(bindl) {
	return stx_fn_Fork.fromUnary(stx_fn_lift_LiftDual.bound(bindl,function(x) {
		return x;
	}));
};
stx_fn_lift_LiftDual.bound = function(bindl,bindr) {
	var out = stx_fn_Fork.then(stx_fn_lift_LiftDual.fork(stx_fn_Unary.unit(),bindl),bindr);
	return out;
};
stx_fn_lift_LiftDual.first = function(fn1) {
	return function(t) {
		var tmp = stx_core_pack_CoupleLift.fst(t);
		return stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,fn1(tmp),stx_core_pack_CoupleLift.snd(t));
	};
};
stx_fn_lift_LiftDual.second = function(fn1) {
	return function(t) {
		var tmp = stx_core_pack_CoupleLift.fst(t);
		var tmp1 = stx_core_pack_CoupleLift.snd(t);
		return stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,tmp,fn1(tmp1));
	};
};
var stx_fn_ternary_Constructor = function() {
	this._ = new stx_fn_ternary_Destructure();
	stx_core_pack_Clazz.call(this);
};
stx_fn_ternary_Constructor.__name__ = "stx.fn.ternary.Constructor";
stx_fn_ternary_Constructor.__super__ = stx_core_pack_Clazz;
stx_fn_ternary_Constructor.prototype = $extend(stx_core_pack_Clazz.prototype,{
	_: null
	,__class__: stx_fn_ternary_Constructor
});
var stx_fn_ternary_Destructure = function() {
	stx_core_pack_Clazz.call(this);
};
stx_fn_ternary_Destructure.__name__ = "stx.fn.ternary.Destructure";
stx_fn_ternary_Destructure.__super__ = stx_core_pack_Clazz;
stx_fn_ternary_Destructure.prototype = $extend(stx_core_pack_Clazz.prototype,{
	rotate: function(f) {
		return function(pII,pIII,pI) {
			return f(pI,pII,pIII);
		};
	}
	,curry: function(f) {
		return function(pI) {
			return function(pII) {
				return function(pIII) {
					return f(pI,pII,pIII);
				};
			};
		};
	}
	,cache: function(pI,pII,pIII,self) {
		var r = null;
		return function() {
			if(r == null) {
				r = false;
				r = self(pI,pII,pIII);
				return r;
			} else {
				return r;
			}
		};
	}
	,equals: function(that,self) {
		return Reflect.compareMethods(self,that);
	}
	,__class__: stx_fn_ternary_Destructure
});
var stx_fn_type_App1X = function() { };
stx_fn_type_App1X.__name__ = "stx.fn.type.App1X";
stx_fn_type_App1X.__isInterface__ = true;
stx_fn_type_App1X.prototype = {
	supplyI: null
	,__class__: stx_fn_type_App1X
};
var stx_fn_type_App2X = function() { };
stx_fn_type_App2X.__name__ = "stx.fn.type.App2X";
stx_fn_type_App2X.__isInterface__ = true;
stx_fn_type_App2X.prototype = {
	supplyII: null
	,__class__: stx_fn_type_App2X
};
var stx_fn_type_AppXR = function() { };
stx_fn_type_AppXR.__name__ = "stx.fn.type.AppXR";
stx_fn_type_AppXR.__isInterface__ = true;
stx_fn_type_AppXR.prototype = {
	reply: null
	,__class__: stx_fn_type_AppXR
};
var stx_fn_type_AppXX = function() { };
stx_fn_type_AppXX.__name__ = "stx.fn.type.AppXX";
stx_fn_type_AppXX.__isInterface__ = true;
stx_fn_type_AppXX.prototype = {
	invoke: null
	,__class__: stx_fn_type_AppXX
};
var stx_fn_unary_Constructor = function() {
	this._ = new stx_fn_unary_Destructure();
	stx_core_pack_Clazz.call(this);
};
stx_fn_unary_Constructor.__name__ = "stx.fn.unary.Constructor";
stx_fn_unary_Constructor.__super__ = stx_core_pack_Clazz;
stx_fn_unary_Constructor.prototype = $extend(stx_core_pack_Clazz.prototype,{
	_: null
	,unit: function() {
		return function(x) {
			return x;
		};
	}
	,__class__: stx_fn_unary_Constructor
});
var stx_fn_unary_Destructure = function() {
	stx_core_pack_Clazz.call(this);
};
stx_fn_unary_Destructure.__name__ = "stx.fn.unary.Destructure";
stx_fn_unary_Destructure.__super__ = stx_core_pack_Clazz;
stx_fn_unary_Destructure.prototype = $extend(stx_core_pack_Clazz.prototype,{
	apply: function(pI,self) {
		return self(pI);
	}
	,cache: function(pI,self) {
		var r = null;
		return function() {
			if(r == null) {
				r = false;
				r = self(pI);
				return r;
			} else {
				return r;
			}
		};
	}
	,pipe: function(pI,self) {
		return function() {
			var tmp = pI();
			return self(tmp);
		};
	}
	,equals: function(that,self) {
		return Reflect.compareMethods(self,that);
	}
	,then: function(fn1,that) {
		return function(a) {
			var tmp = fn1(a);
			return that(tmp);
		};
	}
	,dual: function(self) {
		return function(t) {
			return stx_core_pack_CoupleLift.decouple(t,function(l,r) {
				return stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,self(l),self(r));
			});
		};
	}
	,perhaps: function(self) {
		return function(x) {
			switch(x._hx_index) {
			case 0:
				var v = x.v;
				return haxe_ds_Option.Some(self(v));
			case 1:
				return haxe_ds_Option.None;
			}
		};
	}
	,__class__: stx_fn_unary_Destructure
});
var stx_fn_unary_Implementation = function() { };
stx_fn_unary_Implementation.__name__ = "stx.fn.unary.Implementation";
stx_fn_unary_Implementation._ = function() {
	return stx_fn_unary_Constructor.ZERO._;
};
stx_fn_unary_Implementation.apply = function(self,pI) {
	var _this = stx_fn_unary_Implementation._();
	return self(pI);
};
stx_fn_unary_Implementation.cache = function(self,pI) {
	var _this = stx_fn_unary_Implementation._();
	var pI1 = pI;
	var self1 = self;
	var r = null;
	return function() {
		if(r == null) {
			r = false;
			r = self1(pI1);
			return r;
		} else {
			return r;
		}
	};
};
stx_fn_unary_Implementation.pipe = function(self,pI) {
	var _this = stx_fn_unary_Implementation._();
	var pI1 = pI;
	var self1 = self;
	return function() {
		var tmp = pI1();
		return self1(tmp);
	};
};
stx_fn_unary_Implementation.equals = function(self,that) {
	return stx_fn_unary_Implementation._().equals(that,self);
};
stx_fn_unary_Implementation.then = function(self,that) {
	var _this = stx_fn_unary_Implementation._();
	var fn1 = self;
	var that1 = that;
	return function(a) {
		var tmp = fn1(a);
		return that1(tmp);
	};
};
var stx_fp_pack_ContinuationLift = function() { };
stx_fp_pack_ContinuationLift.__name__ = "stx.fp.pack.ContinuationLift";
stx_fp_pack_ContinuationLift.apply = function(self,fn) {
	return stx_fn_unary_Implementation.apply(self,fn);
};
stx_fp_pack_ContinuationLift.map = function(self,fn) {
	return function(cont) {
		return self(function(p) {
			var tmp = fn(p);
			return cont(tmp);
		});
	};
};
stx_fp_pack_ContinuationLift.flat_map = function(self,fn) {
	return function(cont) {
		return self(function(p) {
			return (fn(p))(cont);
		});
	};
};
stx_fp_pack_ContinuationLift.zip_with = function(self,that,fn) {
	return function(cont) {
		return self(function(p) {
			return that(function(pI) {
				var tmp = fn(p,pI);
				return cont(tmp);
			});
		});
	};
};
stx_fp_pack_ContinuationLift.mod = function(self,g) {
	return function(f) {
		var tmp = self(f);
		return g(tmp);
	};
};
var stx_fp_pack_Continuation = {};
stx_fp_pack_Continuation.unit = function() {
	return function(fn) {
		return fn(null);
	};
};
stx_fp_pack_Continuation.pure = function(p) {
	return function(fn) {
		return fn(p);
	};
};
stx_fp_pack_Continuation.lift = function(fn) {
	return stx_fp_pack_Continuation._new(fn);
};
stx_fp_pack_Continuation._new = function(self) {
	var this1 = self;
	return this1;
};
stx_fp_pack_Continuation.callcc = function(f) {
	return function(k) {
		return (f(function(p) {
			return stx_fp_pack_Continuation.lift(function(_) {
				return k(p);
			});
		}))(k);
	};
};
stx_fp_pack_Continuation.asFunction = function(this1) {
	return this1;
};
var stx_fp_pack_Handler = {};
stx_fp_pack_Handler.lift = function(self) {
	return stx_fp_pack_Handler._new(self);
};
stx_fp_pack_Handler._new = function(self) {
	var this1 = self;
	return this1;
};
stx_fp_pack_Handler.handle = function(this1,cb) {
	this1(cb);
};
stx_fp_pack_Handler.callcc = function(f) {
	return function(k) {
		(f(function(p) {
			return stx_fp_pack_Handler.lift(function(_) {
				k(p);
			});
		}))(k);
	};
};
var stx_fp_pack_HandlerLift = function() { };
stx_fp_pack_HandlerLift.__name__ = "stx.fp.pack.HandlerLift";
stx_fp_pack_HandlerLift.lift = function(self) {
	return stx_fp_pack_Handler._new(self);
};
stx_fp_pack_HandlerLift.apply = function(self,fn) {
	stx_fp_pack_ContinuationLift.apply(self,fn);
};
stx_fp_pack_HandlerLift.map = function(self,fn) {
	return stx_fp_pack_HandlerLift.lift(stx_fp_pack_ContinuationLift.map(self,fn));
};
stx_fp_pack_HandlerLift.flat_map = function(self,fn) {
	return stx_fp_pack_HandlerLift.lift(stx_fp_pack_ContinuationLift.flat_map(self,fn));
};
stx_fp_pack_HandlerLift.zip_with = function(self,that,fn) {
	return stx_fp_pack_HandlerLift.lift(stx_fp_pack_ContinuationLift.zip_with(self,that,fn));
};
var stx_fp_pack_LazyStream = {};
stx_fp_pack_LazyStream.zero = function() {
	return stx_fp_pack_LazyStream.ZERO;
};
stx_fp_pack_LazyStream.fromThunk = function(v) {
	return function(inj) {
		return (v())(inj);
	};
};
stx_fp_pack_LazyStream.fromRec = function(v) {
	return function(inj) {
		return stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,haxe_ds_Option.Some(v()),stx_fp_pack_LazyStream.fromRec(v));
	};
};
stx_fp_pack_LazyStream.fromTuple = function(tp) {
	return function(inj) {
		return tp;
	};
};
stx_fp_pack_LazyStream.unit = function() {
	return function(inj) {
		return stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,haxe_ds_Option.None,stx_fp_pack_LazyStream.unit());
	};
};
stx_fp_pack_LazyStream.make = function(xs,x) {
	return stx_fp_pack_LazyStream.fromTuple(stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,x,xs));
};
stx_fp_pack_LazyStream.pure = function(x) {
	return stx_fp_pack_LazyStream.make(stx_fp_pack_LazyStream.unit(),x);
};
stx_fp_pack_LazyStream.reply = function(this1) {
	return this1(stx_fp_pack_LazyStream.zero());
};
var stx_fp_pack_Monoid = {};
stx_fp_pack_Monoid._new = function(self) {
	var this1 = self;
	return this1;
};
stx_fp_pack_Monoid.put = function(this1,v) {
	return { unit : function() {
		var tmp = this1.unit();
		return this1.plus(tmp,v);
	}, plus : function(l,r) {
		return this1.plus(l,r);
	}};
};
stx_fp_pack_Monoid.into = function(this1,next,fn) {
	return stx_fp_pack_Monoid.put(this1,fn(this1,next));
};
var stx_fp_pack_SemiGroup = {};
stx_fp_pack_SemiGroup._new = function(self) {
	var this1 = self;
	return this1;
};
var stx_fp_pack_State = {};
stx_fp_pack_State._new = function(self) {
	var this1 = self;
	return this1;
};
stx_fp_pack_State.unit = function() {
	return function(p) {
		return stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,tink_core_Noise.Noise,p);
	};
};
stx_fp_pack_State.pure = function(r) {
	return function(p) {
		return stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,r,p);
	};
};
var stx_fp_pack_StateLift = function() { };
stx_fp_pack_StateLift.__name__ = "stx.fp.pack.StateLift";
stx_fp_pack_StateLift.exec = function(self,p) {
	return stx_core_pack_CoupleLift.snd(self(p));
};
stx_fp_pack_StateLift.eval = function(self,p) {
	return stx_core_pack_CoupleLift.fst(self(p));
};
stx_fp_pack_StateLift.map = function(self,fn) {
	return function(p) {
		return stx_core_pack_CoupleLift.decouple(self(p),function(r,p) {
			return stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,fn(r),p);
		});
	};
};
stx_fp_pack_StateLift.mod = function(self,fn) {
	return function(p) {
		return stx_core_pack_CoupleLift.decouple(self(p),function(r,p) {
			return stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,r,fn(p));
		});
	};
};
stx_fp_pack_StateLift.flat_map = function(self,fn) {
	return function(p) {
		return stx_core_pack_CoupleLift.decouple(self(p),function(r,p) {
			return (fn(r))(p);
		});
	};
};
var stx_fs_Path = function() { };
stx_fs_Path.__name__ = "stx.fs.Path";
stx_fs_Path.parse = function(str) {
	return stx_arrowlet_pack_Attempt.fromFun1Res(function(env) {
		return stx_parse_pack_ParseResult.fold(stx_LiftIf.if_else(stx_asys_pack_Distro.is_windows(env.device.distro),function() {
			return new stx_parse_path_Windows().asBase();
		},function() {
			return new stx_parse_path_Posix().asBase();
		}).parse(stx_parse_pack_Input.pure(stx_parse_pack_Enumerable.string(str))),function(a) {
			return stx_core_use_UseNano.success(stx_core_pack_Wildcard.__,a.with);
		},function(e) {
			var this1 = stx_core_use_UseNano.fault(stx_core_pack_Wildcard.__,{ fileName : "src/main/haxe/stx/fs/Path.hx", lineNumber : 13, className : "stx.fs.Path", methodName : "parse"});
			return stx_core_use_UseNano.failure(stx_core_pack_Wildcard.__,new stx_core_pack_Err(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,stx_core_pack_Failure.ERR_OF(stx_fs_path_pack_PathFailure.ParseFailed(stx_parse_path_PathParseFailure.MalformedSource(stx_parse_pack_ParseFailure.toParseResult(e))))),haxe_ds_Option.None,this1));
		});
	});
};
var stx_fs_MoveSum = $hxEnums["stx.fs.MoveSum"] = { __ename__ : "stx.fs.MoveSum", __constructs__ : ["Into","From"]
	,Into: ($_=function(name) { return {_hx_index:0,name:name,__enum__:"stx.fs.MoveSum",toString:$estr}; },$_.__params__ = ["name"],$_)
	,From: {_hx_index:1,__enum__:"stx.fs.MoveSum",toString:$estr}
};
var stx_fs_StemDef = $hxEnums["stx.fs.StemDef"] = { __ename__ : "stx.fs.StemDef", __constructs__ : ["Here","Root"]
	,Here: {_hx_index:0,__enum__:"stx.fs.StemDef",toString:$estr}
	,Root: ($_=function(drive) { return {_hx_index:1,drive:drive,__enum__:"stx.fs.StemDef",toString:$estr}; },$_.__params__ = ["drive"],$_)
};
var stx_fs_pack_FSFailure = $hxEnums["stx.fs.pack.FSFailure"] = { __ename__ : "stx.fs.pack.FSFailure", __constructs__ : ["IsNotADirectory","FileUnreadable","UnknownFSError","AlreadyExists","CannotReadDirectory","CannotSetWorkingDirectory","CannotCreate","FilePathMalformed","IsAlreadyRoot"]
	,IsNotADirectory: {_hx_index:0,__enum__:"stx.fs.pack.FSFailure",toString:$estr}
	,FileUnreadable: ($_=function(dyn) { return {_hx_index:1,dyn:dyn,__enum__:"stx.fs.pack.FSFailure",toString:$estr}; },$_.__params__ = ["dyn"],$_)
	,UnknownFSError: ($_=function(dyn) { return {_hx_index:2,dyn:dyn,__enum__:"stx.fs.pack.FSFailure",toString:$estr}; },$_.__params__ = ["dyn"],$_)
	,AlreadyExists: {_hx_index:3,__enum__:"stx.fs.pack.FSFailure",toString:$estr}
	,CannotReadDirectory: {_hx_index:4,__enum__:"stx.fs.pack.FSFailure",toString:$estr}
	,CannotSetWorkingDirectory: ($_=function(target,details) { return {_hx_index:5,target:target,details:details,__enum__:"stx.fs.pack.FSFailure",toString:$estr}; },$_.__params__ = ["target","details"],$_)
	,CannotCreate: ($_=function(path) { return {_hx_index:6,path:path,__enum__:"stx.fs.pack.FSFailure",toString:$estr}; },$_.__params__ = ["path"],$_)
	,FilePathMalformed: ($_=function(fp) { return {_hx_index:7,fp:fp,__enum__:"stx.fs.pack.FSFailure",toString:$estr}; },$_.__params__ = ["fp"],$_)
	,IsAlreadyRoot: {_hx_index:8,__enum__:"stx.fs.pack.FSFailure",toString:$estr}
};
var stx_fs_pack_File = function() {
	stx_core_pack_Clazz.call(this);
};
stx_fs_pack_File.__name__ = "stx.fs.pack.File";
stx_fs_pack_File.__super__ = stx_core_pack_Clazz;
stx_fs_pack_File.prototype = $extend(stx_core_pack_Clazz.prototype,{
	read: function(path,binary) {
		if(binary == null) {
			binary = false;
		}
		return stx_arrowlet_pack_Proceed.fromFunXRes(function() {
			var out = null;
			try {
				var binary1 = binary;
				out = stx_core_use_UseNano.success(stx_core_pack_Wildcard.__,new sys_io_FileInput(js_node_Fs.openSync(path,"r")));
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
				var e = haxe_Exception.caught(_g).unwrap();
				var this1 = stx_core_use_UseNano.fault(stx_core_pack_Wildcard.__,{ fileName : "src/main/haxe/stx/fs/pack/File.hx", lineNumber : 10, className : "stx.fs.pack.File", methodName : "read"});
				out = stx_core_use_UseNano.failure(stx_core_pack_Wildcard.__,new stx_core_pack_Err(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,stx_core_pack_Failure.ERR_OF(stx_fs_pack_FSFailure.FileUnreadable(e))),haxe_ds_Option.None,this1));
			}
			return out;
		});
	}
	,exists: function(str) {
		return stx_arrowlet_pack_Proceed.fromFunXRes(function() {
			var out = null;
			try {
				out = stx_core_use_UseNano.success(stx_core_pack_Wildcard.__,sys_FileSystem.exists(str));
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
				var e = haxe_Exception.caught(_g).unwrap();
				var this1 = stx_core_use_UseNano.fault(stx_core_pack_Wildcard.__,{ fileName : "src/main/haxe/stx/fs/pack/File.hx", lineNumber : 21, className : "stx.fs.pack.File", methodName : "exists"});
				out = stx_core_use_UseNano.failure(stx_core_pack_Wildcard.__,new stx_core_pack_Err(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,stx_core_pack_Failure.ERR_OF(stx_fs_pack_FSFailure.UnknownFSError(e))),haxe_ds_Option.None,this1));
			}
			return out;
		});
	}
	,is_dir: function(str) {
		return stx_arrowlet_pack_Proceed.fromFunXRes(function() {
			var out = null;
			try {
				out = stx_core_use_UseNano.success(stx_core_pack_Wildcard.__,sys_FileSystem.isDirectory(str));
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
				var e = haxe_Exception.caught(_g).unwrap();
				var this1 = stx_core_use_UseNano.fault(stx_core_pack_Wildcard.__,{ fileName : "src/main/haxe/stx/fs/pack/File.hx", lineNumber : 32, className : "stx.fs.pack.File", methodName : "is_dir"});
				out = stx_core_use_UseNano.failure(stx_core_pack_Wildcard.__,new stx_core_pack_Err(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,stx_core_pack_Failure.ERR_OF(stx_fs_pack_FSFailure.UnknownFSError(e))),haxe_ds_Option.None,this1));
			}
			return out;
		});
	}
	,put: function(archive,data) {
		return stx_arrowlet_pack_Command.fromFun1Report(function(env) {
			var out = stx_core_pack_Report.unit();
			try {
				js_node_Fs.writeFileSync(stx_fs_path_pack_Archive.canonical(archive,env.device.sep),data);
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
				var e = haxe_Exception.caught(_g).unwrap();
				var this1 = stx_core_use_UseNano.fault(stx_core_pack_Wildcard.__,{ fileName : "src/main/haxe/stx/fs/pack/File.hx", lineNumber : 43, className : "stx.fs.pack.File", methodName : "put"});
				out = stx_core_pack_Report.pure(new stx_core_pack_Err(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,stx_core_pack_Failure.ERR_OF(stx_fs_pack_FSFailure.UnknownFSError(e))),haxe_ds_Option.None,this1));
			}
			return out;
		});
	}
	,__class__: stx_fs_pack_File
});
var stx_fs_pack_VolumeApi = function() { };
stx_fs_pack_VolumeApi.__name__ = "stx.fs.pack.VolumeApi";
stx_fs_pack_VolumeApi.__isInterface__ = true;
stx_fs_pack_VolumeApi.prototype = {
	index: null
	,parent: null
	,read: null
	,__class__: stx_fs_pack_VolumeApi
};
var stx_fs_pack_Volume = function(sep) {
	stx_core_pack_Clazz.call(this);
	this.sep = sep;
};
stx_fs_pack_Volume.__name__ = "stx.fs.pack.Volume";
stx_fs_pack_Volume.__interfaces__ = [stx_fs_pack_VolumeApi];
stx_fs_pack_Volume.__super__ = stx_core_pack_Clazz;
stx_fs_pack_Volume.prototype = $extend(stx_core_pack_Clazz.prototype,{
	sep: null
	,index: function(dir) {
		var path = stx_fs_path_pack_Directory.canonical(dir,this.sep);
		return stx_arrowlet_pack_ProceedLift.errata(stx_arrowlet_pack_Proceed.fromFunXR(function() {
			return js_node_Fs.readdirSync(path);
		}),function(e) {
			var this1 = e.fault();
			return new stx_core_pack_Err(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,stx_core_pack_Failure.ERR_OF(stx_fs_pack_FSFailure.CannotReadDirectory)),haxe_ds_Option.None,this1);
		});
	}
	,parent: function(dir) {
		return stx_LiftIf.if_else(dir.track.length > 0,function() {
			return stx_core_use_UseNano.success(stx_core_pack_Wildcard.__,stx_fs_path_pack_Directory.make(dir.drive,stx_fs_path_pack_Track._new(stx_core_pack_ArrayLift.rdropn(dir.track,1))));
		},function() {
			var this1 = stx_core_use_UseNano.fault(stx_core_pack_Wildcard.__,{ fileName : "src/main/haxe/stx/fs/pack/Volume.hx", lineNumber : 26, className : "stx.fs.pack.Volume", methodName : "parent"});
			return stx_core_use_UseNano.failure(stx_core_pack_Wildcard.__,new stx_core_pack_Err(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,stx_core_pack_Failure.ERR_OF(stx_fs_path_pack_PathFailure.ReachedRoot)),haxe_ds_Option.None,this1));
		});
	}
	,read: function(archive,binary) {
		if(binary == null) {
			binary = false;
		}
		var _gthis = this;
		return stx_arrowlet_pack_Proceed.fromFunXRes(function() {
			try {
				var path = stx_fs_path_pack_Archive.canonical(archive,_gthis.sep);
				var binary1 = binary;
				return stx_core_use_UseNano.success(stx_core_pack_Wildcard.__,new sys_io_FileInput(js_node_Fs.openSync(path,"r")));
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
				var e = haxe_Exception.caught(_g).unwrap();
				var this1 = stx_core_use_UseNano.fault(stx_core_pack_Wildcard.__,{ fileName : "src/main/haxe/stx/fs/pack/Volume.hx", lineNumber : 34, className : "stx.fs.pack.Volume", methodName : "read"});
				return stx_core_use_UseNano.failure(stx_core_pack_Wildcard.__,new stx_core_pack_Err(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,stx_core_pack_Failure.ERR_OF(stx_fs_pack_FSFailure.FileUnreadable(e))),haxe_ds_Option.None,this1));
			}
		});
	}
	,__class__: stx_fs_pack_Volume
});
var stx_fs_path_pack_Address = {};
stx_fs_path_pack_Address._new = function(self) {
	var this1 = self;
	return this1;
};
stx_fs_path_pack_Address.lift = function(self) {
	return stx_fs_path_pack_Address._new(self);
};
stx_fs_path_pack_Address.unit = function() {
	return stx_fs_path_pack_Address.lift({ drive : stx_fs_StemDef.Here, track : haxe_ds_Either.Right([]), entry : haxe_ds_Option.None});
};
stx_fs_path_pack_Address.make = function(drive,track,entry) {
	return stx_fs_path_pack_Address.lift({ drive : drive, track : track, entry : entry});
};
stx_fs_path_pack_Address.canonical = function(this1,sep) {
	var head;
	var _g = this1.drive;
	switch(_g._hx_index) {
	case 0:
		head = "./";
		break;
	case 1:
		var _g1 = _g.drive;
		switch(_g1._hx_index) {
		case 0:
			var v = _g1.v;
			head = "" + v + "/";
			break;
		case 1:
			head = "/";
			break;
		}
		break;
	}
	var body;
	var _g = this1.track;
	switch(_g._hx_index) {
	case 0:
		var route = _g.v;
		body = stx_fs_path_pack_Route.canonical(route,sep);
		break;
	case 1:
		var track = _g.v;
		body = stx_fs_path_pack_Track.canonical(track,sep);
		break;
	}
	var tail = stx_core_pack_OptionLift.fold(this1.entry,function(v) {
		return "/" + stx_fs_path_pack_Entry.canonical(v);
	},function() {
		return "";
	});
	return "" + head + body + tail;
};
stx_fs_path_pack_Address.exists = function(this1) {
	return stx_arrowlet_pack_Attempt.fromFun1Res(function(env) {
		return stx_core_use_UseNano.success(stx_core_pack_Wildcard.__,sys_FileSystem.exists(stx_fs_path_pack_Address.canonical(this1,env.device.sep)));
	});
};
stx_fs_path_pack_Address.prj = function(this1) {
	return this1;
};
stx_fs_path_pack_Address.get_self = function(this1) {
	return stx_fs_path_pack_Address.lift(this1);
};
var stx_fs_path_pack_ArchiveLift = function() {
	stx_core_pack_Clazz.call(this);
};
stx_fs_path_pack_ArchiveLift.__name__ = "stx.fs.path.pack.ArchiveLift";
stx_fs_path_pack_ArchiveLift.update = function(self,data) {
	return stx_fn_lift_LiftBroker.broker(function(env) {
		var out = haxe_ds_Option.None;
		try {
			js_node_Fs.writeFileSync(stx_fs_path_pack_Archive.canonical(self,env.device.sep),data);
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			var e = haxe_Exception.caught(_g).unwrap();
			var this1 = stx_core_use_UseNano.fault(stx_core_pack_Wildcard.__,{ fileName : "src/main/haxe/stx/fs/path/pack/Archive.hx", lineNumber : 50, className : "stx.fs.path.pack.ArchiveLift", methodName : "update"});
			out = haxe_ds_Option.Some(new stx_core_pack_Err(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,stx_core_pack_Failure.ERR_OF(stx_fs_pack_FSFailure.UnknownFSError(e))),haxe_ds_Option.None,this1));
		}
		return out;
	},function(F) {
		return stx_arrowlet_pack_Command.fromFun1Option;
	});
};
stx_fs_path_pack_ArchiveLift.upsert = function(self,data) {
	var lhs = stx_fs_path_pack_Directory.inject(stx_fs_path_pack_Archive.directory(self));
	var rhs = stx_fs_path_pack_Archive.update(self,data);
	var two = stx_arrowlet_pack_Command.and(lhs,rhs);
	return two;
};
stx_fs_path_pack_ArchiveLift.__super__ = stx_core_pack_Clazz;
stx_fs_path_pack_ArchiveLift.prototype = $extend(stx_core_pack_Clazz.prototype,{
	__class__: stx_fs_path_pack_ArchiveLift
});
var stx_fs_path_pack_Archive = {};
stx_fs_path_pack_Archive._new = function(self) {
	var this1 = self;
	return this1;
};
stx_fs_path_pack_Archive.lift = function(self) {
	return stx_fs_path_pack_Archive._new(self);
};
stx_fs_path_pack_Archive.make = function(drive,track,entry) {
	return stx_fs_path_pack_Archive.lift({ drive : drive, track : track, entry : entry});
};
stx_fs_path_pack_Archive.canonical = function(this1,sep) {
	var head = stx_core_pack_OptionLift.fold(this1.drive,function(v) {
		return v;
	},function() {
		return "";
	});
	var body = this1.track.join(sep);
	var tail = stx_fs_path_pack_Entry.canonical(this1.entry);
	return "" + head + (sep == null ? "null" : stx_fs_path_pack_Separator.toString(sep)) + body + (sep == null ? "null" : stx_fs_path_pack_Separator.toString(sep)) + tail;
};
stx_fs_path_pack_Archive.update = function(this1,data) {
	return stx_fs_path_pack_Archive._.update(stx_fs_path_pack_Archive.get_self(this1),data);
};
stx_fs_path_pack_Archive.upsert = function(this1,data) {
	return stx_fs_path_pack_Archive._.upsert(stx_fs_path_pack_Archive.get_self(this1),data);
};
stx_fs_path_pack_Archive.directory = function(this1) {
	return stx_fs_path_pack_Directory.make(this1.drive,this1.track);
};
stx_fs_path_pack_Archive.prj = function(this1) {
	return this1;
};
stx_fs_path_pack_Archive.get_self = function(this1) {
	return stx_fs_path_pack_Archive.lift(this1);
};
var stx_fs_path_pack_Attachment = {};
stx_fs_path_pack_Attachment._new = function(self) {
	var this1 = self;
	return this1;
};
stx_fs_path_pack_Attachment.lift = function(self) {
	return stx_fs_path_pack_Attachment._new(self);
};
stx_fs_path_pack_Attachment.make = function(entry,route) {
	return stx_fs_path_pack_Attachment.lift({ entry : entry, track : route});
};
stx_fs_path_pack_Attachment.prj = function(this1) {
	return this1;
};
stx_fs_path_pack_Attachment.get_self = function(this1) {
	return stx_fs_path_pack_Attachment.lift(this1);
};
var stx_fs_path_pack__$Directory_DirectoryLift = function() { };
stx_fs_path_pack__$Directory_DirectoryLift.__name__ = "stx.fs.path.pack._Directory.DirectoryLift";
stx_fs_path_pack__$Directory_DirectoryLift.entries = function(self) {
	return stx_arrowlet_pack_Attempt.fromFun1Res(function(env) {
		var sep = env.device.sep;
		var path = stx_fs_path_pack_Directory.canonical(self,sep);
		var this1 = stx_core_use_UseNano.fault(stx_core_pack_Wildcard.__,{ fileName : "src/main/haxe/stx/fs/path/pack/Directory.hx", lineNumber : 82, className : "stx.fs.path.pack._Directory.DirectoryLift", methodName : "entries"});
		var out = stx_core_use_UseNano.failure(stx_core_pack_Wildcard.__,new stx_core_pack_Err(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,stx_core_pack_Failure.ERR_OF(stx_fs_pack_FSFailure.AlreadyExists)),haxe_ds_Option.None,this1));
		var _this = js_node_Fs.readdirSync(path);
		var result = new Array(_this.length);
		var _g = 0;
		var _g1 = _this.length;
		while(_g < _g1) {
			var i = _g++;
			var str = [_this[i]];
			result[i] = stx_LiftIf.if_else(sys_FileSystem.isDirectory(stx_fs_path_pack_Directory.canonical(stx_fs_path_pack_Directory.into(self,[str[0]]),sep)),(function(str) {
				return function() {
					return stx_core_use_UseNano.left(stx_core_pack_Wildcard.__,str[0]);
				};
			})(str),(function(str) {
				return function() {
					return stx_core_use_UseNano.right(stx_core_pack_Wildcard.__,stx_fs_path_pack_Entry.parse(str[0]));
				};
			})(str));
		}
		out = stx_core_use_UseNano.success(stx_core_pack_Wildcard.__,result);
		return out;
	});
};
stx_fs_path_pack__$Directory_DirectoryLift.attach = function(self) {
	return stx_arrowlet_pack_Command.fromFun1Report(function(env) {
		var str = stx_fs_path_pack_Directory.canonical(self,env.device.sep);
		try {
			sys_FileSystem.createDirectory(str);
			return stx_core_pack_Report.unit();
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			var this1 = stx_core_use_UseNano.fault(stx_core_pack_Wildcard.__,{ fileName : "src/main/haxe/stx/fs/path/pack/Directory.hx", lineNumber : 100, className : "stx.fs.path.pack._Directory.DirectoryLift", methodName : "attach"});
			return stx_core_pack_Report.pure(new stx_core_pack_Err(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,stx_core_pack_Failure.ERR_OF(stx_fs_pack_FSFailure.CannotCreate(str))),haxe_ds_Option.None,this1));
		}
	});
};
stx_fs_path_pack__$Directory_DirectoryLift.inject = function(self) {
	return stx_arrowlet_pack_Command.fromFun1Execute(function(env) {
		return stx_arrowlet_pack_Execute.bind_fold(function(next,memo) {
			var path = stx_fs_path_pack_Directory.fromArray(next);
			return stx_core_pack_OptionLift.fold(memo,function(v) {
				return stx_arrowlet_pack_Execute.pure(v);
			},function() {
				return stx_arrowlet_pack_ProceedLift.point(stx_arrowlet_pack_AttemptLift.forward(stx_fs_path_pack__$Directory_DirectoryLift.exists(path),env),function(b) {
					return stx_LiftIf.if_else(b,function() {
						return stx_arrowlet_pack_Execute.unit();
					},function() {
						return stx_arrowlet_pack_Command.forward(stx_fs_path_pack__$Directory_DirectoryLift.attach(path),env);
					});
				});
			});
		},stx_core_pack_ArrayLift.lfold(stx_fs_path_pack_Directory.components(self),function(next,memo) {
			return stx_LiftIf.if_else(memo.length > 0,function() {
				var tmp = stx_core_pack_ArrayLift.snoc(stx_core_pack_Array.get(memo,memo.length - 1),next);
				return stx_core_pack_ArrayLift.snoc(memo,tmp);
			},function() {
				return stx_core_pack_ArrayLift.snoc(memo,[next]);
			});
		},[]));
	});
};
stx_fs_path_pack__$Directory_DirectoryLift.exists = function(self) {
	return stx_arrowlet_pack_Attempt.fromFun1Res(function(env) {
		try {
			return stx_core_use_UseNano.success(stx_core_pack_Wildcard.__,sys_FileSystem.exists(stx_fs_path_pack_Directory.canonical(self,env.device.sep)));
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			var e = haxe_Exception.caught(_g).unwrap();
			var this1 = stx_core_use_UseNano.fault(stx_core_pack_Wildcard.__,{ fileName : "src/main/haxe/stx/fs/path/pack/Directory.hx", lineNumber : 137, className : "stx.fs.path.pack._Directory.DirectoryLift", methodName : "exists"});
			return stx_core_use_UseNano.failure(stx_core_pack_Wildcard.__,new stx_core_pack_Err(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,stx_core_pack_Failure.ERR_OF(stx_fs_pack_FSFailure.UnknownFSError(e))),haxe_ds_Option.None,this1));
		}
	});
};
stx_fs_path_pack__$Directory_DirectoryLift.parent = function(self) {
	var fn = function() {
		var track = stx_fs_path_pack_Track.snapshot(self.track);
		track.pop();
		return stx_fs_path_pack_Directory.make(self.drive,track);
	};
	return stx_arrowlet_pack_ProceedLift.errata(stx_arrowlet_pack_Proceed.fromFunXR(fn),function(e) {
		var this1 = e.fault();
		return new stx_core_pack_Err(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,stx_core_pack_Failure.ERR_OF(stx_fs_pack_FSFailure.UnknownFSError(e.data))),haxe_ds_Option.None,this1);
	});
};
stx_fs_path_pack__$Directory_DirectoryLift.term = function(dir) {
	(stx_log_pack_Log.close(stx_LiftLog.log(stx_core_pack_Wildcard.__)))("term: " + (dir == null ? "null" : stx_fs_path_pack_Directory.toString(dir)),{ fileName : "src/main/haxe/stx/fs/path/pack/Directory.hx", lineNumber : 155, className : "stx.fs.path.pack._Directory.DirectoryLift", methodName : "term"});
	var init = stx_arrowlet_pack_Arrange.fromFun1Attempt(stx_fs_path_pack__$Directory_DirectoryLift.entries);
	var pure = function(entry) {
		return jali_pack_Constructor.datum(jali_pack_Term.make(),entry);
	};
	var make = jali_pack_Term.make();
	var c = stx_arrowlet_pack_ReframeLift.arrange(stx_arrowlet_pack_CascadeLift.reframe(stx_arrowlet_pack_Cascade.pure(stx_core_use_UseNano.success(stx_core_pack_Wildcard.__,dir))),stx_arrowlet_pack_Arrange.fromFun1Attempt(stx_fs_path_pack__$Directory_DirectoryLift.entries));
	var fn = function(either,t) {
		stx_log_pack_Log.trace(stx_log_pack_Log.close(stx_LiftLog.log(stx_core_pack_Wildcard.__)),either,{ fileName : "src/main/haxe/stx/fs/path/pack/Directory.hx", lineNumber : 162, className : "stx.fs.path.pack._Directory.DirectoryLift", methodName : "term"});
		switch(either._hx_index) {
		case 0:
			var string = either.v;
			return stx_arrowlet_pack_AttemptLift.process(stx_fs_path_pack__$Directory_DirectoryLift.term(stx_fs_path_pack_Directory.into(dir,[string])),stx_arrowlet_pack_Process.fromFun1R(function(t1) {
				var fn = jali_pack_Constructor.code(make,string,[t1]);
				return jali_pack_Constructor.subtree(make,t,fn);
			}));
		case 1:
			var entry = either.v;
			var fn = jali_pack_Constructor.datum(make,entry);
			return stx_arrowlet_pack_Attempt.pure(stx_core_use_UseNano.success(stx_core_pack_Wildcard.__,jali_pack_TermLift.concat(t,fn)));
		}
	};
	var ut = stx_arrowlet_pack_Arrange.pure(jali_pack_Term.unit());
	var fn1 = fn;
	var d = stx_fn_unary_Implementation.then(function(array) {
		return stx_arrowlet_pack_Arrange.bind_fold(fn1,array);
	},function(_) {
		return stx_core_pack_OptionLift.defv(_,ut);
	});
	var e = stx_arrowlet_pack_ReframeLift.rearrange(c,d);
	var f = stx_arrowlet_core_pack_ArrowletLift.prefix(e,function(env) {
		return stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,jali_pack_Constructor.unit(jali_pack_Term.make()),env);
	});
	return stx_arrowlet_pack_Attempt.lift(f);
};
var stx_fs_path_pack_Directory = {};
stx_fs_path_pack_Directory._new = function(self) {
	var this1 = self;
	return this1;
};
stx_fs_path_pack_Directory.lift = function(self) {
	return stx_fs_path_pack_Directory._new(self);
};
stx_fs_path_pack_Directory.make = function(drive,track) {
	return stx_fs_path_pack_Directory.lift({ drive : drive, track : track});
};
stx_fs_path_pack_Directory.fromArray = function(arr) {
	return stx_fn_lift_LiftBroker.broker(stx_core_pack_OptionLift.def(stx_core_pack_OptionLift.map(stx_core_pack_OptionLift.flat_map(stx_core_pack_ArrayLift.head(arr),function(str) {
		return stx_LiftIf.if_else(str.charAt(str.length - 1) == ":",function() {
			return haxe_ds_Option.Some(str);
		},function() {
			return haxe_ds_Option.None;
		});
	}),function(str) {
		return stx_fs_path_pack_Directory.make(haxe_ds_Option.Some(str),stx_core_pack_ArrayLift.tail(arr));
	}),function() {
		return stx_fs_path_pack_Directory.make(haxe_ds_Option.None,arr);
	}),function(F) {
		return stx_fs_path_pack_Directory.lift;
	});
};
stx_fs_path_pack_Directory.attach = function(this1) {
	return stx_fs_path_pack_Directory._.attach(stx_fs_path_pack_Directory.get_self(this1));
};
stx_fs_path_pack_Directory.inject = function(this1) {
	return stx_fs_path_pack_Directory._.inject(stx_fs_path_pack_Directory.get_self(this1));
};
stx_fs_path_pack_Directory.exists = function(this1) {
	return stx_fs_path_pack_Directory._.exists(stx_fs_path_pack_Directory.get_self(this1));
};
stx_fs_path_pack_Directory.prj = function(this1) {
	return this1;
};
stx_fs_path_pack_Directory.get_self = function(this1) {
	return stx_fs_path_pack_Directory.lift(this1);
};
stx_fs_path_pack_Directory.canonical = function(this1,sep) {
	var head = stx_core_pack_OptionLift.fold(this1.drive,function(v) {
		return v + (sep == null ? "null" : stx_fs_path_pack_Separator.toString(sep));
	},function() {
		return sep;
	});
	var body = this1.track.join(sep);
	return head + body;
};
stx_fs_path_pack_Directory.toString = function(this1) {
	return stx_fs_path_pack_Directory.canonical(this1,"::");
};
stx_fs_path_pack_Directory.components = function(this1) {
	return stx_core_pack_OptionLift.fold(this1.drive,function(v) {
		return [v].concat(this1.track);
	},function() {
		return this1.track;
	});
};
stx_fs_path_pack_Directory.into = function(this1,track) {
	return stx_fs_path_pack_Directory.make(this1.drive,this1.track.concat(track));
};
stx_fs_path_pack_Directory.entry = function(this1,entry) {
	return stx_fs_path_pack_Archive.make(this1.drive,this1.track,entry);
};
stx_fs_path_pack_Directory.entries = function(this1) {
	return stx_fs_path_pack_Directory._.entries(this1);
};
var stx_fs_path_pack_Entry = {};
stx_fs_path_pack_Entry._new = function(self) {
	var this1 = self;
	return this1;
};
stx_fs_path_pack_Entry.lift = function(self) {
	return stx_fs_path_pack_Entry._new(self);
};
stx_fs_path_pack_Entry.parse = function(str) {
	var val = str.split(".");
	switch(val.length) {
	case 0:
		throw haxe_Exception.thrown("WOBBLARIA");
	case 1:
		return stx_fs_path_pack_Entry.fromName(str);
	default:
		var ext = val.pop();
		return stx_fs_path_pack_Entry.make(val.join("."),ext);
	}
};
stx_fs_path_pack_Entry.make = function(name,ext) {
	return stx_fs_path_pack_Entry.lift({ name : name, ext : ext});
};
stx_fs_path_pack_Entry.fromName = function(name) {
	return stx_fs_path_pack_Entry.lift({ name : name});
};
stx_fs_path_pack_Entry.canonical = function(this1) {
	return stx_core_pack_OptionLift.defv(stx_core_pack_OptionLift.map(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,this1.ext),function(ext) {
		return "" + this1.name + "." + ext;
	}),this1.name);
};
stx_fs_path_pack_Entry.prj = function(this1) {
	return this1;
};
stx_fs_path_pack_Entry.get_self = function(this1) {
	return stx_fs_path_pack_Entry.lift(this1);
};
var stx_fs_path_pack_PathFailure = $hxEnums["stx.fs.path.pack.PathFailure"] = { __ename__ : "stx.fs.path.pack.PathFailure", __constructs__ : ["ParseFailed","ReachedRoot"]
	,ParseFailed: ($_=function(pf) { return {_hx_index:0,pf:pf,__enum__:"stx.fs.path.pack.PathFailure",toString:$estr}; },$_.__params__ = ["pf"],$_)
	,ReachedRoot: {_hx_index:1,__enum__:"stx.fs.path.pack.PathFailure",toString:$estr}
};
var stx_fs_path_pack_RawLift = function() { };
stx_fs_path_pack_RawLift.__name__ = "stx.fs.path.pack.RawLift";
stx_fs_path_pack_RawLift.toAddress = function(arr) {
	var head = stx_core_pack_ArrayLift.head(arr);
	var rest = stx_core_pack_ArrayLift.tail(arr);
	switch(head._hx_index) {
	case 0:
		var v = head.v;
		var is_denormalised = false;
		var is_absolute = false;
		var head = stx_fs_StemDef.Here;
		var body = [];
		var tail = haxe_ds_Option.None;
		var error = null;
		switch(v._hx_index) {
		case 0:
			var drive = v.name;
			is_absolute = true;
			head = stx_fs_StemDef.Root(drive);
			break;
		case 1:
			break;
		case 2:
			is_denormalised = true;
			stx_core_pack_ArrayLift.prj(body).push(stx_fs_MoveSum.From);
			break;
		case 4:
			var str = v.str;
			stx_core_pack_ArrayLift.prj(body).push(stx_fs_MoveSum.Into(str));
			break;
		case 5:
			var _g = v.ext;
			var _g1 = v.str;
			if(_g == null) {
				var str = _g1;
				tail = haxe_ds_Option.Some(stx_fs_path_pack_Entry.fromName(str));
			} else {
				var str = _g1;
				var ext = _g;
				tail = haxe_ds_Option.Some(stx_fs_path_pack_Entry.lift({ name : str, ext : ext}));
			}
			break;
		default:
			haxe_Log.trace(v,{ fileName : "src/main/haxe/stx/fs/path/pack/Raw.hx", lineNumber : 52, className : "stx.fs.path.pack.RawLift", methodName : "toAddress"});
			var this1 = stx_core_use_UseNano.fault(stx_core_pack_Wildcard.__,{ fileName : "src/main/haxe/stx/fs/path/pack/Raw.hx", lineNumber : 53, className : "stx.fs.path.pack.RawLift", methodName : "toAddress"});
			error = new stx_core_pack_Err(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,stx_core_pack_Failure.ERR_OF(stx_fs_path_pack_PathFailure.ParseFailed(stx_parse_path_PathParseFailure.NoHeadNode))),haxe_ds_Option.None,this1);
		}
		var _g = 0;
		var _g1 = rest;
		while(_g < _g1.length) {
			var node = _g1[_g];
			++_g;
			switch(node._hx_index) {
			case 0:
				var name = node.name;
				var this1 = stx_core_use_UseNano.fault(stx_core_pack_Wildcard.__,{ fileName : "src/main/haxe/stx/fs/path/pack/Raw.hx", lineNumber : 59, className : "stx.fs.path.pack.RawLift", methodName : "toAddress"});
				error = new stx_core_pack_Err(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,stx_core_pack_Failure.ERR_OF(stx_fs_path_pack_PathFailure.ParseFailed(stx_parse_path_PathParseFailure.MisplacedHeadNode))),haxe_ds_Option.None,this1);
				break;
			case 1:
				var this2 = stx_core_use_UseNano.fault(stx_core_pack_Wildcard.__,{ fileName : "src/main/haxe/stx/fs/path/pack/Raw.hx", lineNumber : 61, className : "stx.fs.path.pack.RawLift", methodName : "toAddress"});
				error = new stx_core_pack_Err(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,stx_core_pack_Failure.ERR_OF(stx_fs_path_pack_PathFailure.ParseFailed(stx_parse_path_PathParseFailure.MisplacedHeadNode))),haxe_ds_Option.None,this2);
				break;
			case 2:
				stx_core_pack_ArrayLift.prj(body).push(stx_fs_MoveSum.From);
				break;
			case 3:
				break;
			case 4:
				var str = node.str;
				stx_core_pack_ArrayLift.prj(body).push(stx_fs_MoveSum.Into(str));
				break;
			case 5:
				var _g2 = node.ext;
				var _g3 = node.str;
				if(_g2 == null) {
					var str1 = _g3;
					tail = haxe_ds_Option.Some(stx_fs_path_pack_Entry.fromName(str1));
				} else {
					var str2 = _g3;
					var ext = _g2;
					tail = haxe_ds_Option.Some(stx_fs_path_pack_Entry.lift({ name : str2, ext : ext}));
				}
				break;
			}
		}
		if(error != null) {
			return stx_core_use_UseNano.failure(stx_core_pack_Wildcard.__,error);
		} else {
			var track;
			if(!is_denormalised) {
				var result = new Array(body.length);
				var _g = 0;
				var _g1 = body.length;
				while(_g < _g1) {
					var i = _g++;
					var x = body[i];
					var track1;
					if(x._hx_index == 0) {
						var v = x.name;
						track1 = v;
					} else {
						track1 = "";
					}
					result[i] = track1;
				}
				track = stx_fs_path_pack_Track.lift(result);
			} else {
				track = [];
			}
			return stx_core_use_UseNano.success(stx_core_pack_Wildcard.__,stx_fs_path_pack_Address.lift({ drive : head, track : stx_LiftIf.if_else(is_denormalised,function() {
				return haxe_ds_Either.Left(body);
			},function() {
				return haxe_ds_Either.Right(track);
			}), entry : tail}));
		}
		break;
	case 1:
		return stx_core_use_UseNano.success(stx_core_pack_Wildcard.__,stx_fs_path_pack_Address.lift({ drive : stx_fs_StemDef.Here, track : haxe_ds_Either.Right([]), entry : haxe_ds_Option.None}));
	}
};
stx_fs_path_pack_RawLift.toDirectory = function(raw) {
	var _g = stx_core_pack_ArrayLift.head(raw);
	var tmp;
	if(_g._hx_index == 0) {
		var _g1 = _g.v;
		if(_g1._hx_index == 0) {
			var head = _g1.name;
			var drive = head;
			var track = stx_core_pack_ArrayLift.lfold(stx_core_pack_ArrayLift.tail(raw),function(next,memo) {
				return stx_core_pack_ResLift.fold(memo,function(arr) {
					switch(next._hx_index) {
					case 0:
						var _g = next.name;
						var this1 = stx_core_use_UseNano.fault(stx_core_pack_Wildcard.__,{ fileName : "src/main/haxe/stx/fs/path/pack/Raw.hx", lineNumber : 106, className : "stx.fs.path.pack.RawLift", methodName : "toDirectory"});
						return stx_core_use_UseNano.failure(stx_core_pack_Wildcard.__,new stx_core_pack_Err(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,stx_core_pack_Failure.ERR_OF(stx_fs_path_pack_PathFailure.ParseFailed(stx_parse_path_PathParseFailure.MisplacedHeadNode))),haxe_ds_Option.None,this1));
					case 1:
						var this1 = stx_core_use_UseNano.fault(stx_core_pack_Wildcard.__,{ fileName : "src/main/haxe/stx/fs/path/pack/Raw.hx", lineNumber : 107, className : "stx.fs.path.pack.RawLift", methodName : "toDirectory"});
						return stx_core_use_UseNano.failure(stx_core_pack_Wildcard.__,new stx_core_pack_Err(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,stx_core_pack_Failure.ERR_OF(stx_fs_path_pack_PathFailure.ParseFailed(stx_parse_path_PathParseFailure.MisplacedHeadNode))),haxe_ds_Option.None,this1));
					case 2:
						var this1 = stx_core_use_UseNano.fault(stx_core_pack_Wildcard.__,{ fileName : "src/main/haxe/stx/fs/path/pack/Raw.hx", lineNumber : 108, className : "stx.fs.path.pack.RawLift", methodName : "toDirectory"});
						return stx_core_use_UseNano.failure(stx_core_pack_Wildcard.__,new stx_core_pack_Err(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,stx_core_pack_Failure.ERR_OF(stx_fs_path_pack_PathFailure.ParseFailed(stx_parse_path_PathParseFailure.UnexpectedDenormalisedPath(raw)))),haxe_ds_Option.None,this1));
					case 3:
						return stx_core_use_UseNano.success(stx_core_pack_Wildcard.__,arr);
					case 4:
						var str = next.str;
						return stx_core_use_UseNano.success(stx_core_pack_Wildcard.__,stx_core_pack_ArrayLift.snoc(arr,str));
					case 5:
						var _g = next.ext;
						var _g = next.str;
						var this1 = stx_core_use_UseNano.fault(stx_core_pack_Wildcard.__,{ fileName : "src/main/haxe/stx/fs/path/pack/Raw.hx", lineNumber : 111, className : "stx.fs.path.pack.RawLift", methodName : "toDirectory"});
						return stx_core_use_UseNano.failure(stx_core_pack_Wildcard.__,new stx_core_pack_Err(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,stx_core_pack_Failure.ERR_OF(stx_fs_path_pack_PathFailure.ParseFailed(stx_parse_path_PathParseFailure.UnexpectedFileInDirectory(raw)))),haxe_ds_Option.None,this1));
					}
				},function(err) {
					return stx_core_use_UseNano.failure(stx_core_pack_Wildcard.__,err);
				});
			},stx_core_use_UseNano.success(stx_core_pack_Wildcard.__,[]));
			tmp = stx_core_pack_ResLift.map(track,function(track) {
				return stx_fs_path_pack_Directory.make(drive,track);
			});
		} else {
			var this1 = stx_core_use_UseNano.fault(stx_core_pack_Wildcard.__,{ fileName : "src/main/haxe/stx/fs/path/pack/Raw.hx", lineNumber : 121, className : "stx.fs.path.pack.RawLift", methodName : "toDirectory"});
			tmp = stx_core_use_UseNano.failure(stx_core_pack_Wildcard.__,new stx_core_pack_Err(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,stx_core_pack_Failure.ERR_OF(stx_fs_path_pack_PathFailure.ParseFailed(stx_parse_path_PathParseFailure.NoHeadNode))),haxe_ds_Option.None,this1));
		}
	} else {
		var this1 = stx_core_use_UseNano.fault(stx_core_pack_Wildcard.__,{ fileName : "src/main/haxe/stx/fs/path/pack/Raw.hx", lineNumber : 121, className : "stx.fs.path.pack.RawLift", methodName : "toDirectory"});
		tmp = stx_core_use_UseNano.failure(stx_core_pack_Wildcard.__,new stx_core_pack_Err(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,stx_core_pack_Failure.ERR_OF(stx_fs_path_pack_PathFailure.ParseFailed(stx_parse_path_PathParseFailure.NoHeadNode))),haxe_ds_Option.None,this1));
	}
	return stx_fn_lift_LiftBroker.broker(tmp,function(F) {
		return stx_fn_unary_Implementation.then(stx_fn_unary_Implementation.then(F,stx_arrowlet_pack_Proceed.fromRes),function(io) {
			return io;
		});
	});
};
stx_fs_path_pack_RawLift.toAttachment = function(raw) {
	var _g = stx_core_pack_ArrayLift.head(raw);
	if(_g._hx_index == 0) {
		if(_g.v._hx_index == 1) {
			return stx_core_pack_ResLift.flat_map(stx_core_pack_Res.lift(stx_core_pack_ArrayLift.lfold(stx_core_pack_ArrayLift.tail(raw),function(next,memo) {
				return stx_core_pack_ResLift.fold(memo,function(v) {
					switch(next._hx_index) {
					case 0:
						var _g = next.name;
						var this1 = stx_core_use_UseNano.fault(stx_core_pack_Wildcard.__,{ fileName : "src/main/haxe/stx/fs/path/pack/Raw.hx", lineNumber : 134, className : "stx.fs.path.pack.RawLift", methodName : "toAttachment"});
						return stx_core_use_UseNano.failure(stx_core_pack_Wildcard.__,new stx_core_pack_Err(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,stx_core_pack_Failure.ERR_OF(stx_fs_path_pack_PathFailure.ParseFailed(stx_parse_path_PathParseFailure.MisplacedHeadNode))),haxe_ds_Option.None,this1));
					case 1:
						var this1 = stx_core_use_UseNano.fault(stx_core_pack_Wildcard.__,{ fileName : "src/main/haxe/stx/fs/path/pack/Raw.hx", lineNumber : 135, className : "stx.fs.path.pack.RawLift", methodName : "toAttachment"});
						return stx_core_use_UseNano.failure(stx_core_pack_Wildcard.__,new stx_core_pack_Err(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,stx_core_pack_Failure.ERR_OF(stx_fs_path_pack_PathFailure.ParseFailed(stx_parse_path_PathParseFailure.MisplacedHeadNode))),haxe_ds_Option.None,this1));
					case 2:
						return stx_core_use_UseNano.success(stx_core_pack_Wildcard.__,stx_fs_path_pack_MaybeAttachment.snoc(v,stx_fs_MoveSum.From));
					case 3:
						return stx_core_use_UseNano.success(stx_core_pack_Wildcard.__,v);
					case 4:
						var str = next.str;
						return stx_core_use_UseNano.success(stx_core_pack_Wildcard.__,stx_fs_path_pack_MaybeAttachment.snoc(v,stx_fs_MoveSum.Into(str)));
					case 5:
						var e = next.ext;
						var n = next.str;
						return stx_core_use_UseNano.success(stx_core_pack_Wildcard.__,stx_fs_path_pack_MaybeAttachment.$name(v,{ name : n, ext : e}));
					}
				},function(e) {
					return stx_core_use_UseNano.failure(stx_core_pack_Wildcard.__,e);
				});
			},stx_core_use_UseNano.success(stx_core_pack_Wildcard.__,stx_fs_path_pack_MaybeAttachment._new()))),function(x) {
				return stx_core_pack_OptionLift.fold(stx_core_pack_CoupleLift.fst(x),function(drive) {
					return stx_core_use_UseNano.success(stx_core_pack_Wildcard.__,stx_fs_path_pack_Attachment.make(drive,stx_core_pack_CoupleLift.snd(x)));
				},function() {
					var this1 = stx_core_use_UseNano.fault(stx_core_pack_Wildcard.__,{ fileName : "src/main/haxe/stx/fs/path/pack/Raw.hx", lineNumber : 147, className : "stx.fs.path.pack.RawLift", methodName : "toAttachment"});
					return stx_core_use_UseNano.failure(stx_core_pack_Wildcard.__,new stx_core_pack_Err(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,stx_core_pack_Failure.ERR_OF(stx_fs_path_pack_PathFailure.ParseFailed(stx_parse_path_PathParseFailure.NoFileFoundOnAttachment(raw)))),haxe_ds_Option.None,this1));
				});
			});
		} else {
			var this1 = stx_core_use_UseNano.fault(stx_core_pack_Wildcard.__,{ fileName : "src/main/haxe/stx/fs/path/pack/Raw.hx", lineNumber : 150, className : "stx.fs.path.pack.RawLift", methodName : "toAttachment"});
			return stx_core_use_UseNano.failure(stx_core_pack_Wildcard.__,new stx_core_pack_Err(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,stx_core_pack_Failure.ERR_OF(stx_fs_path_pack_PathFailure.ParseFailed(stx_parse_path_PathParseFailure.MalformedRaw(raw)))),haxe_ds_Option.None,this1));
		}
	} else {
		var this1 = stx_core_use_UseNano.fault(stx_core_pack_Wildcard.__,{ fileName : "src/main/haxe/stx/fs/path/pack/Raw.hx", lineNumber : 150, className : "stx.fs.path.pack.RawLift", methodName : "toAttachment"});
		return stx_core_use_UseNano.failure(stx_core_pack_Wildcard.__,new stx_core_pack_Err(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,stx_core_pack_Failure.ERR_OF(stx_fs_path_pack_PathFailure.ParseFailed(stx_parse_path_PathParseFailure.MalformedRaw(raw)))),haxe_ds_Option.None,this1));
	}
};
stx_fs_path_pack_RawLift.toArchive = function(raw) {
	var _g = stx_core_pack_ArrayLift.head(raw);
	if(_g._hx_index == 0) {
		var _g1 = _g.v;
		if(_g1._hx_index == 0) {
			var head = _g1.name;
			var drive = head;
			var track = stx_core_pack_ArrayLift.lfold(stx_core_pack_ArrayLift.tail(raw),function(next,memo) {
				return stx_core_pack_ResLift.fold(memo,function(tp) {
					switch(next._hx_index) {
					case 0:
						var _g = next.name;
						var this1 = stx_core_use_UseNano.fault(stx_core_pack_Wildcard.__,{ fileName : "src/main/haxe/stx/fs/path/pack/Raw.hx", lineNumber : 160, className : "stx.fs.path.pack.RawLift", methodName : "toArchive"});
						return stx_core_use_UseNano.failure(stx_core_pack_Wildcard.__,new stx_core_pack_Err(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,stx_core_pack_Failure.ERR_OF(stx_fs_path_pack_PathFailure.ParseFailed(stx_parse_path_PathParseFailure.MisplacedHeadNode))),haxe_ds_Option.None,this1));
					case 1:
						var this1 = stx_core_use_UseNano.fault(stx_core_pack_Wildcard.__,{ fileName : "src/main/haxe/stx/fs/path/pack/Raw.hx", lineNumber : 161, className : "stx.fs.path.pack.RawLift", methodName : "toArchive"});
						return stx_core_use_UseNano.failure(stx_core_pack_Wildcard.__,new stx_core_pack_Err(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,stx_core_pack_Failure.ERR_OF(stx_fs_path_pack_PathFailure.ParseFailed(stx_parse_path_PathParseFailure.MisplacedHeadNode))),haxe_ds_Option.None,this1));
					case 2:
						var this1 = stx_core_use_UseNano.fault(stx_core_pack_Wildcard.__,{ fileName : "src/main/haxe/stx/fs/path/pack/Raw.hx", lineNumber : 162, className : "stx.fs.path.pack.RawLift", methodName : "toArchive"});
						return stx_core_use_UseNano.failure(stx_core_pack_Wildcard.__,new stx_core_pack_Err(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,stx_core_pack_Failure.ERR_OF(stx_fs_path_pack_PathFailure.ParseFailed(stx_parse_path_PathParseFailure.UnexpectedDenormalisedPath(raw)))),haxe_ds_Option.None,this1));
					case 3:
						return stx_core_use_UseNano.success(stx_core_pack_Wildcard.__,tp);
					case 4:
						var str = next.str;
						return stx_core_use_UseNano.success(stx_core_pack_Wildcard.__,stx_core_pack_CoupleLift.map(tp,function(arr) {
							return stx_core_pack_ArrayLift.snoc(arr,str);
						}));
					case 5:
						var _g = next.ext;
						var _g1 = next.str;
						if(_g == null) {
							var nm = _g1;
							return stx_core_use_UseNano.success(stx_core_pack_Wildcard.__,stx_core_pack_CoupleLift.map(tp,function(arr) {
								return stx_core_pack_ArrayLift.snoc(arr,nm);
							}));
						} else {
							var nm1 = _g1;
							var ext = _g;
							return stx_core_use_UseNano.success(stx_core_pack_Wildcard.__,stx_core_pack_CoupleLift.lmap(tp,function(_) {
								return stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,stx_fs_path_pack_Entry.make(nm1,ext));
							}));
						}
						break;
					}
				},function(e) {
					return stx_core_use_UseNano.failure(stx_core_pack_Wildcard.__,e);
				});
			},stx_core_use_UseNano.success(stx_core_pack_Wildcard.__,stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,null),stx_core_pack_Array.unit())));
			return stx_core_pack_ResLift.fold(track,function(tp) {
				return stx_core_pack_OptionLift.fold(stx_core_pack_CoupleLift.fst(tp),function(entry) {
					var tmp = stx_core_pack_CoupleLift.snd(tp);
					return stx_core_use_UseNano.success(stx_core_pack_Wildcard.__,stx_fs_path_pack_Archive.make(drive,tmp,entry));
				},function() {
					var this1 = stx_core_use_UseNano.fault(stx_core_pack_Wildcard.__,{ fileName : "src/main/haxe/stx/fs/path/pack/Raw.hx", lineNumber : 175, className : "stx.fs.path.pack.RawLift", methodName : "toArchive"});
					return stx_core_use_UseNano.failure(stx_core_pack_Wildcard.__,new stx_core_pack_Err(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,stx_core_pack_Failure.ERR_OF(stx_fs_path_pack_PathFailure.ParseFailed(stx_parse_path_PathParseFailure.NoFileOnPath(raw)))),haxe_ds_Option.None,this1));
				});
			},function(e) {
				return stx_core_use_UseNano.failure(stx_core_pack_Wildcard.__,e);
			});
		} else {
			var this1 = stx_core_use_UseNano.fault(stx_core_pack_Wildcard.__,{ fileName : "src/main/haxe/stx/fs/path/pack/Raw.hx", lineNumber : 180, className : "stx.fs.path.pack.RawLift", methodName : "toArchive"});
			return stx_core_use_UseNano.failure(stx_core_pack_Wildcard.__,new stx_core_pack_Err(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,stx_core_pack_Failure.ERR_OF(stx_fs_path_pack_PathFailure.ParseFailed(stx_parse_path_PathParseFailure.NoHeadNode))),haxe_ds_Option.None,this1));
		}
	} else {
		var this1 = stx_core_use_UseNano.fault(stx_core_pack_Wildcard.__,{ fileName : "src/main/haxe/stx/fs/path/pack/Raw.hx", lineNumber : 180, className : "stx.fs.path.pack.RawLift", methodName : "toArchive"});
		return stx_core_use_UseNano.failure(stx_core_pack_Wildcard.__,new stx_core_pack_Err(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,stx_core_pack_Failure.ERR_OF(stx_fs_path_pack_PathFailure.ParseFailed(stx_parse_path_PathParseFailure.NoHeadNode))),haxe_ds_Option.None,this1));
	}
};
stx_fs_path_pack_RawLift.kind = function(arr) {
	var absolute = false;
	var normalised = true;
	var has_trailing_slash = false;
	var _g = 0;
	var _g1 = arr.length;
	while(_g < _g1) {
		var i = _g++;
		var token = stx_fs_path_pack_Raw.at(arr,i);
		if(i == 0) {
			absolute = token._hx_index == 0 && token.name._hx_index == 1;
		}
		if(token == stx_parse_term_TokenSum.FPTUp) {
			normalised = false;
		}
		if(i == arr.length - 1) {
			has_trailing_slash = token._hx_index == 3;
		}
	}
	return { absolute : absolute, normalised : normalised, has_trailing_slash : has_trailing_slash, file : false};
};
var stx_fs_path_pack_Raw = {};
stx_fs_path_pack_Raw._new = function(self) {
	var this1 = self;
	return this1;
};
stx_fs_path_pack_Raw.lift = function(self) {
	return stx_fs_path_pack_Raw._new(self);
};
stx_fs_path_pack_Raw.at = function(this1,i) {
	return stx_core_pack_Array.get(this1,i);
};
stx_fs_path_pack_Raw.prj = function(this1) {
	return this1;
};
stx_fs_path_pack_Raw.get_self = function(this1) {
	return stx_fs_path_pack_Raw.lift(this1);
};
var stx_fs_path_pack_MaybeAttachment = {};
stx_fs_path_pack_MaybeAttachment.lift = function(clause) {
	return stx_fs_path_pack_MaybeAttachment._new(clause);
};
stx_fs_path_pack_MaybeAttachment._new = function(self) {
	var this1 = stx_core_pack_OptionLift.defv(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,self),stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,haxe_ds_Option.None,stx_fs_path_pack_Route._new([])));
	return this1;
};
stx_fs_path_pack_MaybeAttachment.snoc = function(this1,v) {
	return stx_fs_path_pack_MaybeAttachment.lift(stx_core_pack_CoupleLift.map(this1,function(r) {
		return stx_fs_path_pack_Route.snoc(r,v);
	}));
};
stx_fs_path_pack_MaybeAttachment.$name = function(this1,entry) {
	return stx_fs_path_pack_MaybeAttachment.lift(stx_core_pack_CoupleLift.lmap(this1,function(_) {
		return haxe_ds_Option.Some(entry);
	}));
};
var stx_fs_path_pack_Route = {};
stx_fs_path_pack_Route._new = function(self) {
	var this1 = self;
	return this1;
};
stx_fs_path_pack_Route.lift = function(self) {
	return stx_fs_path_pack_Route._new(self);
};
stx_fs_path_pack_Route.canonical = function(this1,sep) {
	var result = new Array(this1.length);
	var _g = 0;
	var _g1 = this1.length;
	while(_g < _g1) {
		var i = _g++;
		var move = this1[i];
		var tmp;
		switch(move._hx_index) {
		case 0:
			var str = move.name;
			tmp = str;
			break;
		case 1:
			tmp = "..";
			break;
		}
		result[i] = tmp;
	}
	return result.join(sep);
};
stx_fs_path_pack_Route.snoc = function(this1,v) {
	return stx_fs_path_pack_Route.lift(stx_core_pack_ArrayLift.snoc(this1,v));
};
stx_fs_path_pack_Route.concat = function(this1,that) {
	return this1.concat(that);
};
stx_fs_path_pack_Route.prj = function(this1) {
	return this1;
};
stx_fs_path_pack_Route.get_self = function(this1) {
	return stx_fs_path_pack_Route.lift(this1);
};
var stx_fs_path_pack_Separator = {};
stx_fs_path_pack_Separator.toString = function(this1) {
	if(this1 == null) {
		return "null";
	} else {
		return "" + this1;
	}
};
stx_fs_path_pack_Separator._new = function() {
	var this1 = "PosixSeparator";
	return this1;
};
var stx_fs_path_pack_Track = {};
stx_fs_path_pack_Track._new = function(self) {
	var this1 = stx_core_pack_OptionLift.defv(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,self),[]);
	return this1;
};
stx_fs_path_pack_Track.lift = function(self) {
	return stx_fs_path_pack_Track._new(self);
};
stx_fs_path_pack_Track.canonical = function(this1,sep) {
	return this1.join(sep);
};
stx_fs_path_pack_Track.snapshot = function(this1) {
	return this1.slice();
};
stx_fs_path_pack_Track.toRoute = function(this1) {
	var f = stx_fs_MoveSum.Into;
	var result = new Array(this1.length);
	var _g = 0;
	var _g1 = this1.length;
	while(_g < _g1) {
		var i = _g++;
		result[i] = f(this1[i]);
	}
	return result;
};
stx_fs_path_pack_Track.prj = function(this1) {
	return this1;
};
stx_fs_path_pack_Track.get_self = function(this1) {
	return stx_fs_path_pack_Track.lift(this1);
};
var stx_io_body_StdIns = function() { };
stx_io_body_StdIns.__name__ = "stx.io.body.StdIns";
stx_io_body_StdIns.pull = function(ip,un) {
	return stx_arrowlet_pack_Proceed.fromFunXRes(function() {
		var prim = null;
		var err = null;
		try {
			prim = stx_io_body_StdIns.apply(ip,un);
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			var _g1 = haxe_Exception.caught(_g).unwrap();
			if(((_g1) instanceof haxe_io_Eof)) {
				var this1 = stx_core_use_UseNano.fault(stx_core_pack_Wildcard.__,{ fileName : "src/main/haxe/stx/io/body/StdIns.hx", lineNumber : 12, className : "stx.io.body.StdIns", methodName : "pull"});
				err = new stx_core_pack_Err(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,stx_core_pack_Failure.ERR_OF(stx_io_pack_IOFailure.EndOfFile)),haxe_ds_Option.None,this1);
			} else if(js_Boot.__instanceof(_g1,haxe_io_Error)) {
				var e = _g1;
				var this1 = stx_core_use_UseNano.fault(stx_core_pack_Wildcard.__,{ fileName : "src/main/haxe/stx/io/body/StdIns.hx", lineNumber : 14, className : "stx.io.body.StdIns", methodName : "pull"});
				err = new stx_core_pack_Err(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,stx_core_pack_Failure.ERR_OF(stx_io_pack_IOFailure.Subsystem(e))),haxe_ds_Option.None,this1);
			} else {
				var e = _g1;
				var this1 = stx_core_use_UseNano.fault(stx_core_pack_Wildcard.__,{ fileName : "src/main/haxe/stx/io/body/StdIns.hx", lineNumber : 16, className : "stx.io.body.StdIns", methodName : "pull"});
				err = new stx_core_pack_Err(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,stx_core_pack_Failure.ERR_OF(stx_io_pack_IOFailure.Subsystem(haxe_io_Error.Custom(e)))),haxe_ds_Option.None,this1);
			}
		}
		var out = stx_core_pack_OptionLift.def(stx_core_pack_OptionLift.map(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,err),function(e) {
			return stx_core_use_UseNano.failure(stx_core_pack_Wildcard.__,e);
		}),function() {
			return stx_core_use_UseNano.success(stx_core_pack_Wildcard.__,prim);
		});
		return out;
	});
};
stx_io_body_StdIns.apply = function(ip,un) {
	switch(un._hx_index) {
	case 0:
		var x = un.bs;
		var prim;
		switch(x) {
		case "dbe":
			ip.set_bigEndian(true);
			prim = stx_core_pack_PrimitiveDef.PFloat(ip.readDouble());
			break;
		case "dle":
			ip.set_bigEndian(false);
			prim = stx_core_pack_PrimitiveDef.PFloat(ip.readDouble());
			break;
		case "fbe":
			ip.set_bigEndian(true);
			prim = stx_core_pack_PrimitiveDef.PFloat(ip.readFloat());
			break;
		case "fle":
			ip.set_bigEndian(false);
			prim = stx_core_pack_PrimitiveDef.PFloat(ip.readFloat());
			break;
		case "i16+":
			ip.set_bigEndian(true);
			prim = stx_core_pack_PrimitiveDef.PInt(ip.readInt16());
			break;
		case "i16-":
			ip.set_bigEndian(false);
			prim = stx_core_pack_PrimitiveDef.PInt(ip.readInt16());
			break;
		case "i24+":
			ip.set_bigEndian(true);
			prim = stx_core_pack_PrimitiveDef.PInt(ip.readInt24());
			break;
		case "i24-":
			ip.set_bigEndian(false);
			prim = stx_core_pack_PrimitiveDef.PInt(ip.readInt24());
			break;
		case "i32+":
			ip.set_bigEndian(true);
			prim = stx_core_pack_PrimitiveDef.PInt(ip.readInt32());
			break;
		case "i32-":
			ip.set_bigEndian(false);
			prim = stx_core_pack_PrimitiveDef.PInt(ip.readInt32());
			break;
		case "i8":
			prim = stx_core_pack_PrimitiveDef.PInt(ip.readInt8());
			break;
		case "ln":
			prim = stx_core_pack_PrimitiveDef.PString(ip.readLine());
			break;
		case "ui16+":
			ip.set_bigEndian(true);
			prim = stx_core_pack_PrimitiveDef.PInt(ip.readUInt16());
			break;
		case "ui16-":
			ip.set_bigEndian(false);
			prim = stx_core_pack_PrimitiveDef.PInt(ip.readUInt16());
			break;
		case "ui24+":
			ip.set_bigEndian(true);
			prim = stx_core_pack_PrimitiveDef.PInt(ip.readUInt24());
			break;
		case "ui24-":
			ip.set_bigEndian(false);
			prim = stx_core_pack_PrimitiveDef.PInt(ip.readUInt24());
			break;
		}
		return stx_io_pack_InputResponse.IResValue({ data : prim, type : x});
	case 1:
		var len = un.len;
		var pos = un.pos;
		var bytes = new haxe_io_Bytes(new ArrayBuffer(len));
		ip.readBytes(bytes,pos,len);
		return stx_io_pack_InputResponse.IResBytes(bytes);
	}
};
var stx_io_body_StdOuts = function() { };
stx_io_body_StdOuts.__name__ = "stx.io.body.StdOuts";
stx_io_body_StdOuts.push = function(op,value) {
	var fn = function() {
		var output = haxe_ds_Option.None;
		var valAsInt = haxe_ds_Option.None;
		var valAsString = haxe_ds_Option.None;
		var valAsFloat = haxe_ds_Option.None;
		var _g = value.data;
		switch(_g._hx_index) {
		case 2:
			var int = _g.int;
			valAsInt = haxe_ds_Option.Some(int);
			break;
		case 3:
			var fl = _g.fl;
			valAsFloat = haxe_ds_Option.Some(fl);
			break;
		case 4:
			var str = _g.str;
			valAsString = haxe_ds_Option.Some(str);
			break;
		default:
			var this1 = stx_core_use_UseNano.fault(stx_core_pack_Wildcard.__,{ fileName : "src/main/haxe/stx/io/body/StdOuts.hx", lineNumber : 19, className : "stx.io.body.StdOuts", methodName : "push"});
			new stx_core_pack_Err(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,stx_core_pack_Failure.ERR_OF(stx_io_pack_IOFailure.UnsupportedValue)),haxe_ds_Option.None,this1);
		}
		try {
			switch(value.type) {
			case "dbe":
				op.set_bigEndian(true);
				var val = $iterator(stx_core_pack_OptionLift)(valAsFloat);
				while(val.hasNext()) {
					var val1 = val.next();
					op.writeDouble(val1);
				}
				break;
			case "dle":
				op.set_bigEndian(false);
				var val = $iterator(stx_core_pack_OptionLift)(valAsFloat);
				while(val.hasNext()) {
					var val1 = val.next();
					op.writeDouble(val1);
				}
				break;
			case "fbe":
				op.set_bigEndian(true);
				var val = $iterator(stx_core_pack_OptionLift)(valAsFloat);
				while(val.hasNext()) {
					var val1 = val.next();
					op.writeFloat(val1);
				}
				break;
			case "fle":
				op.set_bigEndian(false);
				var val = $iterator(stx_core_pack_OptionLift)(valAsFloat);
				while(val.hasNext()) {
					var val1 = val.next();
					op.writeFloat(val1);
				}
				break;
			case "i16+":
				op.set_bigEndian(true);
				var val = $iterator(stx_core_pack_OptionLift)(valAsInt);
				while(val.hasNext()) {
					var val1 = val.next();
					op.writeInt16(val1);
				}
				break;
			case "i16-":
				op.set_bigEndian(false);
				var val = $iterator(stx_core_pack_OptionLift)(valAsInt);
				while(val.hasNext()) {
					var val1 = val.next();
					op.writeInt16(val1);
				}
				break;
			case "i24+":
				op.set_bigEndian(true);
				var val = $iterator(stx_core_pack_OptionLift)(valAsInt);
				while(val.hasNext()) {
					var val1 = val.next();
					op.writeInt24(val1);
				}
				break;
			case "i24-":
				op.set_bigEndian(false);
				var val = $iterator(stx_core_pack_OptionLift)(valAsInt);
				while(val.hasNext()) {
					var val1 = val.next();
					op.writeInt24(val1);
				}
				break;
			case "i32+":
				op.set_bigEndian(true);
				var val = $iterator(stx_core_pack_OptionLift)(valAsInt);
				while(val.hasNext()) {
					var val1 = val.next();
					op.writeInt32(val1);
				}
				break;
			case "i32-":
				op.set_bigEndian(false);
				var val = $iterator(stx_core_pack_OptionLift)(valAsInt);
				while(val.hasNext()) {
					var val1 = val.next();
					op.writeInt32(val1);
				}
				break;
			case "i8":
				var val = $iterator(stx_core_pack_OptionLift)(valAsInt);
				while(val.hasNext()) {
					var val1 = val.next();
					op.writeInt8(val1);
				}
				break;
			case "ln":
				var val = $iterator(stx_core_pack_OptionLift)(valAsString);
				while(val.hasNext()) {
					var val1 = val.next();
					op.writeString(val1);
				}
				break;
			case "ui16+":
				op.set_bigEndian(true);
				var val = $iterator(stx_core_pack_OptionLift)(valAsInt);
				while(val.hasNext()) {
					var val1 = val.next();
					op.writeInt16(val1);
				}
				break;
			case "ui16-":
				op.set_bigEndian(false);
				var val = $iterator(stx_core_pack_OptionLift)(valAsInt);
				while(val.hasNext()) {
					var val1 = val.next();
					op.writeUInt16(val1);
				}
				break;
			case "ui24+":
				op.set_bigEndian(true);
				var val = $iterator(stx_core_pack_OptionLift)(valAsInt);
				while(val.hasNext()) {
					var val1 = val.next();
					op.writeUInt24(val1);
				}
				break;
			case "ui24-":
				op.set_bigEndian(false);
				var val = $iterator(stx_core_pack_OptionLift)(valAsInt);
				while(val.hasNext()) {
					var val1 = val.next();
					op.writeUInt24(val1);
				}
				break;
			}
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			var e = haxe_Exception.caught(_g).unwrap();
			var this1 = stx_core_use_UseNano.fault(stx_core_pack_Wildcard.__,{ fileName : "src/main/haxe/stx/io/body/StdOuts.hx", lineNumber : 103, className : "stx.io.body.StdOuts", methodName : "push"});
			output = haxe_ds_Option.Some(new stx_core_pack_Err(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,stx_core_pack_Failure.ERR_OF(stx_io_pack_IOFailure.Subsystem(e))),haxe_ds_Option.None,this1));
		}
		return output;
	};
	return stx_arrowlet_pack_Execute.fromFunXR(fn);
};
var stx_io_pack_IOFailure = $hxEnums["stx.io.pack.IOFailure"] = { __ename__ : "stx.io.pack.IOFailure", __constructs__ : ["Subsystem","TypeError","SourceNotFound","EndOfFile","UnsupportedValue"]
	,Subsystem: ($_=function(e) { return {_hx_index:0,e:e,__enum__:"stx.io.pack.IOFailure",toString:$estr}; },$_.__params__ = ["e"],$_)
	,TypeError: {_hx_index:1,__enum__:"stx.io.pack.IOFailure",toString:$estr}
	,SourceNotFound: {_hx_index:2,__enum__:"stx.io.pack.IOFailure",toString:$estr}
	,EndOfFile: {_hx_index:3,__enum__:"stx.io.pack.IOFailure",toString:$estr}
	,UnsupportedValue: {_hx_index:4,__enum__:"stx.io.pack.IOFailure",toString:$estr}
};
var stx_io_pack_InputRequest = $hxEnums["stx.io.pack.InputRequest"] = { __ename__ : "stx.io.pack.InputRequest", __constructs__ : ["IReqValue","IReqBytes"]
	,IReqValue: ($_=function(bs) { return {_hx_index:0,bs:bs,__enum__:"stx.io.pack.InputRequest",toString:$estr}; },$_.__params__ = ["bs"],$_)
	,IReqBytes: ($_=function(pos,len) { return {_hx_index:1,pos:pos,len:len,__enum__:"stx.io.pack.InputRequest",toString:$estr}; },$_.__params__ = ["pos","len"],$_)
};
var stx_io_pack_InputResponse = $hxEnums["stx.io.pack.InputResponse"] = { __ename__ : "stx.io.pack.InputResponse", __constructs__ : ["IResValue","IResBytes"]
	,IResValue: ($_=function(p) { return {_hx_index:0,p:p,__enum__:"stx.io.pack.InputResponse",toString:$estr}; },$_.__params__ = ["p"],$_)
	,IResBytes: ($_=function(b) { return {_hx_index:1,b:b,__enum__:"stx.io.pack.InputResponse",toString:$estr}; },$_.__params__ = ["b"],$_)
};
var stx_io_pack_StdIn = {};
stx_io_pack_StdIn._new = function(self) {
	var this1 = self;
	return this1;
};
stx_io_pack_StdIn.apply = function(this1,type) {
	var ip = this1;
	var un = type;
	return stx_arrowlet_pack_Proceed.fromFunXRes(function() {
		var prim = null;
		var err = null;
		try {
			prim = stx_io_body_StdIns.apply(ip,un);
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			var _g1 = haxe_Exception.caught(_g).unwrap();
			if(((_g1) instanceof haxe_io_Eof)) {
				var this1 = stx_core_use_UseNano.fault(stx_core_pack_Wildcard.__,{ fileName : "src/main/haxe/stx/io/body/StdIns.hx", lineNumber : 12, className : "stx.io.body.StdIns", methodName : "pull"});
				err = new stx_core_pack_Err(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,stx_core_pack_Failure.ERR_OF(stx_io_pack_IOFailure.EndOfFile)),haxe_ds_Option.None,this1);
			} else if(js_Boot.__instanceof(_g1,haxe_io_Error)) {
				var e = _g1;
				var this1 = stx_core_use_UseNano.fault(stx_core_pack_Wildcard.__,{ fileName : "src/main/haxe/stx/io/body/StdIns.hx", lineNumber : 14, className : "stx.io.body.StdIns", methodName : "pull"});
				err = new stx_core_pack_Err(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,stx_core_pack_Failure.ERR_OF(stx_io_pack_IOFailure.Subsystem(e))),haxe_ds_Option.None,this1);
			} else {
				var e = _g1;
				var this1 = stx_core_use_UseNano.fault(stx_core_pack_Wildcard.__,{ fileName : "src/main/haxe/stx/io/body/StdIns.hx", lineNumber : 16, className : "stx.io.body.StdIns", methodName : "pull"});
				err = new stx_core_pack_Err(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,stx_core_pack_Failure.ERR_OF(stx_io_pack_IOFailure.Subsystem(haxe_io_Error.Custom(e)))),haxe_ds_Option.None,this1);
			}
		}
		var out = stx_core_pack_OptionLift.def(stx_core_pack_OptionLift.map(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,err),function(e) {
			return stx_core_use_UseNano.failure(stx_core_pack_Wildcard.__,e);
		}),function() {
			return stx_core_use_UseNano.success(stx_core_pack_Wildcard.__,prim);
		});
		return out;
	});
};
stx_io_pack_StdIn.prj = function(this1) {
	return this1;
};
var stx_io_pack_StdOut = {};
stx_io_pack_StdOut._new = function(self) {
	var this1 = self;
	return this1;
};
stx_io_pack_StdOut.apply = function(this1,type) {
	var op = this1;
	var value = type;
	var fn = function() {
		var output = haxe_ds_Option.None;
		var valAsInt = haxe_ds_Option.None;
		var valAsString = haxe_ds_Option.None;
		var valAsFloat = haxe_ds_Option.None;
		var _g = value.data;
		switch(_g._hx_index) {
		case 2:
			var int = _g.int;
			valAsInt = haxe_ds_Option.Some(int);
			break;
		case 3:
			var fl = _g.fl;
			valAsFloat = haxe_ds_Option.Some(fl);
			break;
		case 4:
			var str = _g.str;
			valAsString = haxe_ds_Option.Some(str);
			break;
		default:
			var this1 = stx_core_use_UseNano.fault(stx_core_pack_Wildcard.__,{ fileName : "src/main/haxe/stx/io/body/StdOuts.hx", lineNumber : 19, className : "stx.io.body.StdOuts", methodName : "push"});
			new stx_core_pack_Err(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,stx_core_pack_Failure.ERR_OF(stx_io_pack_IOFailure.UnsupportedValue)),haxe_ds_Option.None,this1);
		}
		try {
			switch(value.type) {
			case "dbe":
				op.set_bigEndian(true);
				var val = $iterator(stx_core_pack_OptionLift)(valAsFloat);
				while(val.hasNext()) {
					var val1 = val.next();
					op.writeDouble(val1);
				}
				break;
			case "dle":
				op.set_bigEndian(false);
				var val = $iterator(stx_core_pack_OptionLift)(valAsFloat);
				while(val.hasNext()) {
					var val1 = val.next();
					op.writeDouble(val1);
				}
				break;
			case "fbe":
				op.set_bigEndian(true);
				var val = $iterator(stx_core_pack_OptionLift)(valAsFloat);
				while(val.hasNext()) {
					var val1 = val.next();
					op.writeFloat(val1);
				}
				break;
			case "fle":
				op.set_bigEndian(false);
				var val = $iterator(stx_core_pack_OptionLift)(valAsFloat);
				while(val.hasNext()) {
					var val1 = val.next();
					op.writeFloat(val1);
				}
				break;
			case "i16+":
				op.set_bigEndian(true);
				var val = $iterator(stx_core_pack_OptionLift)(valAsInt);
				while(val.hasNext()) {
					var val1 = val.next();
					op.writeInt16(val1);
				}
				break;
			case "i16-":
				op.set_bigEndian(false);
				var val = $iterator(stx_core_pack_OptionLift)(valAsInt);
				while(val.hasNext()) {
					var val1 = val.next();
					op.writeInt16(val1);
				}
				break;
			case "i24+":
				op.set_bigEndian(true);
				var val = $iterator(stx_core_pack_OptionLift)(valAsInt);
				while(val.hasNext()) {
					var val1 = val.next();
					op.writeInt24(val1);
				}
				break;
			case "i24-":
				op.set_bigEndian(false);
				var val = $iterator(stx_core_pack_OptionLift)(valAsInt);
				while(val.hasNext()) {
					var val1 = val.next();
					op.writeInt24(val1);
				}
				break;
			case "i32+":
				op.set_bigEndian(true);
				var val = $iterator(stx_core_pack_OptionLift)(valAsInt);
				while(val.hasNext()) {
					var val1 = val.next();
					op.writeInt32(val1);
				}
				break;
			case "i32-":
				op.set_bigEndian(false);
				var val = $iterator(stx_core_pack_OptionLift)(valAsInt);
				while(val.hasNext()) {
					var val1 = val.next();
					op.writeInt32(val1);
				}
				break;
			case "i8":
				var val = $iterator(stx_core_pack_OptionLift)(valAsInt);
				while(val.hasNext()) {
					var val1 = val.next();
					op.writeInt8(val1);
				}
				break;
			case "ln":
				var val = $iterator(stx_core_pack_OptionLift)(valAsString);
				while(val.hasNext()) {
					var val1 = val.next();
					op.writeString(val1);
				}
				break;
			case "ui16+":
				op.set_bigEndian(true);
				var val = $iterator(stx_core_pack_OptionLift)(valAsInt);
				while(val.hasNext()) {
					var val1 = val.next();
					op.writeInt16(val1);
				}
				break;
			case "ui16-":
				op.set_bigEndian(false);
				var val = $iterator(stx_core_pack_OptionLift)(valAsInt);
				while(val.hasNext()) {
					var val1 = val.next();
					op.writeUInt16(val1);
				}
				break;
			case "ui24+":
				op.set_bigEndian(true);
				var val = $iterator(stx_core_pack_OptionLift)(valAsInt);
				while(val.hasNext()) {
					var val1 = val.next();
					op.writeUInt24(val1);
				}
				break;
			case "ui24-":
				op.set_bigEndian(false);
				var val = $iterator(stx_core_pack_OptionLift)(valAsInt);
				while(val.hasNext()) {
					var val1 = val.next();
					op.writeUInt24(val1);
				}
				break;
			}
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			var e = haxe_Exception.caught(_g).unwrap();
			var this1 = stx_core_use_UseNano.fault(stx_core_pack_Wildcard.__,{ fileName : "src/main/haxe/stx/io/body/StdOuts.hx", lineNumber : 103, className : "stx.io.body.StdOuts", methodName : "push"});
			output = haxe_ds_Option.Some(new stx_core_pack_Err(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,stx_core_pack_Failure.ERR_OF(stx_io_pack_IOFailure.Subsystem(e))),haxe_ds_Option.None,this1));
		}
		return output;
	};
	return stx_arrowlet_pack_Execute.fromFunXR(fn);
};
var stx_log_pack_log_pack_Bias = {};
stx_log_pack_log_pack_Bias._new = function() {
	var this1 = stx_log_pack_log_pack_Bias.instance;
	return this1;
};
stx_log_pack_log_pack_Bias.ok = function(this1) {
	return this1;
};
var stx_log_Config = function(bias) {
	this.bias = bias;
	this.whitelist = [];
	this.blacklist = [];
	this.races = [];
};
stx_log_Config.__name__ = "stx.log.Config";
stx_log_Config.prototype = {
	races: null
	,bias: null
	,whitelist: null
	,blacklist: null
	,race_predicate: function(pos) {
		var race = Lambda.fold(this.races,function(next,memo) {
			return stx_core_pack_OptionLift.fold(memo,function(v) {
				return stx_LiftIf.if_else(next.stamp > v.stamp,function() {
					return haxe_ds_Option.Some(next);
				},function() {
					return haxe_ds_Option.Some(v);
				});
			},function() {
				return haxe_ds_Option.Some(next);
			});
		},haxe_ds_Option.None);
		if(race._hx_index == 0) {
			var v = race.v;
			this.note("wins race");
			var out = stx_log_pack_LogPosition.match(pos,v);
			if(out) {
				this.note("wins race");
			}
			return out;
		} else {
			return false;
		}
	}
	,note: function(str) {
	}
	,do_apply: function(pos) {
		this.note("for: " + Std.string(pos));
		if(this.whitelist.length > 0) {
			this.note("whitelist defined");
			if(stx_core_pack_ArrayLift.any(this.whitelist,function(pred) {
				return stx_core_pack_Report.ok(pred.applyI(pos));
			})) {
				this.note("in whitelist");
				if(this.blacklist.length > 0) {
					this.note("blacklist defined");
					var out = stx_core_pack_ArrayLift.all(this.blacklist,function(pred) {
						return stx_core_pack_Report.ok(pred.applyI(pos));
					});
					if(out) {
						this.note("in blacklist");
					}
					return out;
				} else {
					return true;
				}
			} else {
				return false;
			}
		} else if(this.blacklist.length > 0) {
			this.note("blacklist defined");
			var out = stx_core_pack_ArrayLift.all(this.blacklist,function(pred) {
				return stx_core_pack_Report.ok(pred.applyI(pos));
			});
			if(out) {
				this.note("in blacklist");
			}
			return out;
		} else if(this.races.length > 0) {
			this.note("in races");
			return this.race_predicate(pos);
		} else {
			var ok = stx_log_pack_log_pack_Bias.ok(this.bias);
			if(ok) {
				this.note("bias ok");
			} else {
				this.note("no");
			}
			return ok;
		}
	}
	,apply: function(pos) {
		if(this.races.length > 0) {
			return this.race_predicate(pos);
		} else {
			return this.do_apply(pos);
		}
	}
	,race: function(ts,scoping,scope) {
		this.races.push(stx_log_pack_log_pack_Race.make(scoping,ts,scope));
	}
	,__class__: stx_log_Config
};
var stx_log_pack_FullHaxeLog = function() { };
stx_log_pack_FullHaxeLog.__name__ = "stx.log.pack.FullHaxeLog";
stx_log_pack_FullHaxeLog.trace = function(v,infos) {
	var arr = stx_core_pack_OptionLift.def(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,stx_log_pack_LogPosition.get_customParams(infos)),function() {
		return [];
	});
	var meta = stx_core_pack_OptionLift.def(stx_core_pack_ArrayLift.search(arr,function(x) {
		var _g = Type.typeof(x);
		if(_g._hx_index == 6) {
			if(_g.c == stx_log_pack_log_pack_Stamp) {
				return true;
			} else {
				return false;
			}
		} else {
			return false;
		}
	}),function() {
		return new stx_log_pack_log_pack_Stamp(0);
	});
	var _g = Type.typeof(v);
	var data = _g._hx_index == 6 ? _g.c == String ? v : "" + Std.string(v) : "" + Std.string(v);
	stx_log_pack_HaxeLog.trace("" + meta.toLogString(infos) + " " + data,{ fileName : "stx/log/pack/FullHaxeLog.hx", lineNumber : 52, className : "stx.log.pack.FullHaxeLog", methodName : "trace"});
};
var stx_log_pack_HaxeLog = function() { };
stx_log_pack_HaxeLog.__name__ = "stx.log.pack.HaxeLog";
stx_log_pack_HaxeLog.note = function(str) {
};
stx_log_pack_HaxeLog.trace = function(v,infos) {
	stx_log_pack_HaxeLog.note("haxelog " + Std.string(infos));
	stx_log_pack_HaxeLog.note("js");
	stx_log_pack_JsLog.__trace(v,infos);
};
stx_log_pack_HaxeLog.clear = function() {
	js_Boot.__clear_trace();
};
var stx_log_pack_JsLog = function() { };
stx_log_pack_JsLog.__name__ = "stx.log.pack.JsLog";
stx_log_pack_JsLog.__trace = function(v,i) {
	var msg = i != null ? i.fileName + ":" + i.lineNumber + ": " : "";
	msg += js_Boot.__string_rec(v,"");
	var d;
	var tmp;
	if(typeof(document) != "undefined") {
		d = document.getElementById("haxe:trace");
		tmp = d != null;
	} else {
		tmp = false;
	}
	if(tmp) {
		d.innerHTML += __unhtml(msg) + "<br/>";
	} else if(typeof console != "undefined" && console.log != null) {
		console.log(msg);
	}
};
var stx_log_pack_LogPosition = {};
stx_log_pack_LogPosition.fromPos = function(pos) {
	return stx_log_pack_LogPosition._new(pos);
};
stx_log_pack_LogPosition._new = function(self) {
	var this1 = self;
	return this1;
};
stx_log_pack_LogPosition.here = function(pos) {
	return stx_log_pack_LogPosition._new(pos);
};
stx_log_pack_LogPosition.rt = function() {
	return true;
};
stx_log_pack_LogPosition.pure = function(pos) {
	return stx_log_pack_LogPosition._new(pos);
};
stx_log_pack_LogPosition.get_meta = function(this1) {
	var obj = null;
	var cs = stx_core_pack_OptionLift.defv(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,stx_log_pack_LogPosition.get_customParams(this1)),[]);
	var _g = 0;
	while(_g < cs.length) {
		var x = cs[_g];
		++_g;
		var clazz = js_Boot.getClass(x);
		if(clazz == stx_log_pack_log_pack_Meta) {
			obj = x;
			break;
		}
	}
	if(obj == null) {
		obj = new stx_log_pack_log_pack_Meta();
		stx_log_pack_LogPosition.get_customParams(this1).push(obj);
	}
	return obj;
};
stx_log_pack_LogPosition.stamp = function(this1,l) {
	var meta = stx_log_pack_LogPosition.get_meta(this1);
	meta.stamp = stx_core_pack_Option.fromNullT(l);
};
stx_log_pack_LogPosition.get_customParams = function(this1) {
	return stx_LiftIf.if_else(stx_core_pack_OptionLift.is_defined(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,this1.customParams)),function() {
		return this1.customParams;
	},function() {
		this1.customParams = [];
		return this1.customParams;
	});
};
stx_log_pack_LogPosition.scoping = function(this1,method) {
	return new stx_log_pack_Scoping(stx_core_pack_OptionLift.defv(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,method),this1.methodName),this1.className,this1.fileName);
};
stx_log_pack_LogPosition.match = function(this1,race) {
	switch(race.scope._hx_index) {
	case 0:
		return this1.methodName == race.scoping.method;
	case 1:
		return this1.className == race.scoping.type;
	case 2:
		return this1.fileName == race.scoping.module;
	}
};
stx_log_pack_LogPosition.prj = function(this1) {
	return this1;
};
var stx_log_pack_log_pack_Stamp = function(level) {
	this.level = level;
	this.timestamp = new Date();
};
stx_log_pack_log_pack_Stamp.__name__ = "stx.log.pack.log.pack.Stamp";
stx_log_pack_log_pack_Stamp.prototype = {
	timestamp: null
	,verbose: null
	,level: null
	,toString: function() {
		var time = HxOverrides.dateStr(this.timestamp);
		var lev = stx_log_pack_log_pack_Level.toString(this.level);
		var out = "Stamp(" + lev + " " + time + ")";
		return out;
	}
	,toLogString: function(posInfos) {
		var pos = stx_LiftIf.if_else(stx_log_pack_LogPosition.rt(),function() {
			return stx_core_pack_Position._.toStringClassMethodLine(posInfos);
		},function() {
			return "<unknown>";
		});
		var time = HxOverrides.dateStr(this.timestamp);
		var lev = stx_log_pack_log_pack_Level.toString(this.level);
		var out = "" + lev + " " + time + " " + pos;
		return out;
	}
	,__class__: stx_log_pack_log_pack_Stamp
};
var stx_log_pack_Log = {};
stx_log_pack_Log._ = function() {
	return stx_log_pack_log_Constructor.ZERO;
};
stx_log_pack_Log._new = function(self) {
	var this1 = stx_core_pack_OptionLift.def(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,self),function() {
		return stx_log_pack_FullHaxeLog.trace;
	});
	return this1;
};
stx_log_pack_Log.printer = function(this1,pos) {
	return function(x) {
		this1(x,pos);
	};
};
stx_log_pack_Log.logWithLevelAndLogPosition = function(this1,v,level,pos) {
	var p = stx_log_pack_LogPosition._new(pos);
	stx_log_pack_LogPosition.get_meta(p).set_stamp(new stx_log_pack_log_pack_Stamp(level));
	var config = stx_log_Config.instance;
	var should = config.apply(p);
	if(should) {
		this1(v,p);
	}
};
stx_log_pack_Log.trace = function(this1,v,pos) {
	stx_log_pack_Log.logWithLevelAndLogPosition(this1,v,0,pos);
};
stx_log_pack_Log.debug = function(this1,v,pos) {
	stx_log_pack_Log.logWithLevelAndLogPosition(this1,v,1,pos);
};
stx_log_pack_Log.info = function(this1,v,pos) {
	stx_log_pack_Log.logWithLevelAndLogPosition(this1,v,2,pos);
};
stx_log_pack_Log.warn = function(this1,v,pos) {
	stx_log_pack_Log.logWithLevelAndLogPosition(this1,v,3,pos);
};
stx_log_pack_Log.error = function(this1,v,pos) {
	stx_log_pack_Log.logWithLevelAndLogPosition(this1,v,4,pos);
};
stx_log_pack_Log.fatal = function(this1,v,pos) {
	stx_log_pack_Log.logWithLevelAndLogPosition(this1,v,5,pos);
};
stx_log_pack_Log.levelled = function(this1,level) {
	return stx_log_pack_log_Constructor.ZERO.levelled(this1,level);
};
stx_log_pack_Log.tag = function(this1,string) {
	return function(x,pos) {
		stx_log_pack_LogPosition.get_meta(stx_log_pack_LogPosition.pure(pos)).tags.push(string);
		this1(x,pos);
	};
};
stx_log_pack_Log.tags = function(this1,arr) {
	return Lambda.fold(arr,function(next,memo) {
		var memo0 = memo;
		var memo1 = stx_log_pack_Log.tag(memo0,next);
		var memo11 = memo1;
		return memo11;
	},this1);
};
stx_log_pack_Log.use = function(this1,fn) {
	return function(x,pos) {
		var tmp = fn(x);
		this1(tmp,pos);
	};
};
stx_log_pack_Log.containing = function(this1,p) {
	return stx_log_pack_log_Constructor.ZERO.containing(this1,p);
};
stx_log_pack_Log.positioned = function(this1,p) {
	return stx_log_pack_log_Constructor.ZERO.positioned(this1,p);
};
stx_log_pack_Log.close = function(this1) {
	return stx_log_pack_log_Constructor.ZERO.positioned(this1,new stx_assert_Module({ fileName : "stx/log/pack/Log.hx", lineNumber : 142, className : "stx.log.pack._Log.Log_Impl_", methodName : "close"}).never());
};
stx_log_pack_Log.prj = function(this1) {
	return this1;
};
var stx_log_pack_LogFailure = $hxEnums["stx.log.pack.LogFailure"] = { __ename__ : "stx.log.pack.LogFailure", __constructs__ : ["UnderLogLevel"]
	,UnderLogLevel: {_hx_index:0,__enum__:"stx.log.pack.LogFailure",toString:$estr}
};
var stx_log_pack_Scoping = function(method,type,$module) {
	this.method = method;
	this.type = type;
	this.module = $module;
};
stx_log_pack_Scoping.__name__ = "stx.log.pack.Scoping";
stx_log_pack_Scoping.prototype = {
	method: null
	,type: null
	,module: null
	,copy: function(method,type,$module) {
		return new stx_log_pack_Scoping(stx_core_pack_OptionLift.defv(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,method),this.method),stx_core_pack_OptionLift.defv(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,type),this.type),stx_core_pack_OptionLift.defv(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,$module),this.module));
	}
	,with_method: function(name) {
		return this.copy(name);
	}
	,toString: function() {
		return "(" + this.module + "::" + this.type + "::" + this.method + ")";
	}
	,__class__: stx_log_pack_Scoping
};
var stx_log_pack_log_Constructor = function() {
	stx_core_pack_Clazz.call(this);
};
stx_log_pack_log_Constructor.__name__ = "stx.log.pack.log.Constructor";
stx_log_pack_log_Constructor.__super__ = stx_core_pack_Clazz;
stx_log_pack_log_Constructor.prototype = $extend(stx_core_pack_Clazz.prototype,{
	positioned: function(log,p) {
		return function(v,pos) {
			if(!stx_core_pack_OptionLift.is_defined(p.applyI(pos))) {
				log(v,pos);
			}
		};
	}
	,use: function(log,fn) {
		return function(x,pos) {
			var tmp = fn(x);
			log(tmp,pos);
		};
	}
	,containing: function(log,p) {
		return function(v,pos) {
			if(!stx_core_pack_OptionLift.is_defined(p.applyI(v))) {
				log(v,pos);
			}
		};
	}
	,levelled: function(log,level) {
		return stx_log_pack_Log.use(this.positioned(log,new stx_log_pack_log_term_LevelledLog(level)),function(x) {
			var lvl = stx_log_pack_log_pack_Level.toString(level);
			var val = stx_show_pack_Show.show(x);
			return "" + lvl + ": " + val;
		});
	}
	,__class__: stx_log_pack_log_Constructor
});
var stx_log_pack_log_pack_Level = {};
stx_log_pack_log_pack_Level._new = function(self) {
	var this1 = self;
	return this1;
};
stx_log_pack_log_pack_Level.asInt = function(this1) {
	var int = this1;
	return int;
};
stx_log_pack_log_pack_Level.toString = function(this1) {
	switch(this1) {
	case 0:
		return "TRACE";
	case 1:
		return "DEBUG";
	case 2:
		return "INFO";
	case 3:
		return "WARN";
	case 4:
		return "ERROR";
	case 5:
		return "FATAL";
	}
};
var stx_log_pack_log_type_MetaApi = function() { };
stx_log_pack_log_type_MetaApi.__name__ = "stx.log.pack.log.type.MetaApi";
stx_log_pack_log_type_MetaApi.__isInterface__ = true;
stx_log_pack_log_type_MetaApi.prototype = {
	id: null
	,tags: null
	,stamp: null
	,__class__: stx_log_pack_log_type_MetaApi
};
var stx_log_pack_log_pack_Meta = function(id,tags,stamp) {
	var _g = function(value) {
		return stx_core_use_UseNano.uuid(stx_core_pack_Wildcard.__,value);
	};
	var value = null;
	var tmp = function() {
		return _g(value);
	};
	this.id = stx_core_pack_OptionLift.def(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,id),tmp);
	this.tags = stx_core_pack_OptionLift.defv(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,tags),[]);
	this.stamp = stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,stamp);
};
stx_log_pack_log_pack_Meta.__name__ = "stx.log.pack.log.pack.Meta";
stx_log_pack_log_pack_Meta.__interfaces__ = [stx_log_pack_log_type_MetaApi];
stx_log_pack_log_pack_Meta.prototype = {
	id: null
	,tags: null
	,stamp: null
	,set_stamp: function(stamp) {
		this.stamp = haxe_ds_Option.Some(stamp);
	}
	,__class__: stx_log_pack_log_pack_Meta
};
var stx_log_pack_log_pack_Race = {};
stx_log_pack_log_pack_Race._new = function(self) {
	var this1 = self;
	return this1;
};
stx_log_pack_log_pack_Race.lift = function(self) {
	return stx_log_pack_log_pack_Race._new(self);
};
stx_log_pack_log_pack_Race.make = function(scoping,stamp,scope) {
	return { scoping : scoping, stamp : stamp, scope : stx_core_pack_OptionLift.defv(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,scope),stx_log_type_ScopeSum.ScopeMethod)};
};
stx_log_pack_log_pack_Race.prj = function(this1) {
	return this1;
};
stx_log_pack_log_pack_Race.get_self = function(this1) {
	return stx_log_pack_log_pack_Race.lift(this1);
};
stx_log_pack_log_pack_Race.rescope = function(this1,fn) {
	return stx_log_pack_log_pack_Race.make(fn(this1.scoping),this1.stamp,this1.scope);
};
var stx_log_pack_log_term_LevelledLog = function(level) {
	this.level = level;
};
stx_log_pack_log_term_LevelledLog.__name__ = "stx.log.pack.log.term.LevelledLog";
stx_log_pack_log_term_LevelledLog.__interfaces__ = [stx_assert_type_PredicateApi];
stx_log_pack_log_term_LevelledLog.prototype = {
	level: null
	,applyI: function(pos) {
		var _gthis = this;
		var params = stx_core_pack_OptionLift.defv(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,stx_log_pack_LogPosition.get_customParams(pos)),[]);
		var _g = [];
		var _g1 = 0;
		var _g2 = params;
		while(_g1 < _g2.length) {
			var v = _g2[_g1];
			++_g1;
			if(v != null) {
				_g.push(v);
			}
		}
		var tmp = stx_core_pack_ArrayLift.map_filter(_g,function(param) {
			return stx_LiftIf.if_else(stx_log_pack_log_pack_Meta == js_Boot.getClass(param),function() {
				return stx_core_pack_OptionLift.map(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,((param) instanceof stx_log_pack_log_pack_Meta) ? param : null),function(x) {
					return stx_core_pack_OptionLift.defv(stx_core_pack_OptionLift.map(x.stamp,function(x) {
						return stx_log_pack_log_pack_Level.asInt(x.level) >= stx_log_pack_log_pack_Level.asInt(_gthis.level);
					}),false);
				});
			},function() {
				return haxe_ds_Option.None;
			});
		}).length > 0;
		var this1 = stx_core_use_UseNano.fault(stx_core_pack_Wildcard.__,{ fileName : "stx/log/pack/log/term/LevelledLog.hx", lineNumber : 23, className : "stx.log.pack.log.term.LevelledLog", methodName : "applyI"});
		return stx_LiftAssert.report(tmp,new stx_core_pack_Err(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,stx_core_pack_Failure.ERR_OF(stx_log_pack_LogFailure.UnderLogLevel)),haxe_ds_Option.None,this1));
	}
	,__class__: stx_log_pack_log_term_LevelledLog
};
var stx_log_type_ScopeSum = $hxEnums["stx.log.type.ScopeSum"] = { __ename__ : "stx.log.type.ScopeSum", __constructs__ : ["ScopeMethod","ScopeClass","ScopeModule"]
	,ScopeMethod: {_hx_index:0,__enum__:"stx.log.type.ScopeSum",toString:$estr}
	,ScopeClass: {_hx_index:1,__enum__:"stx.log.type.ScopeSum",toString:$estr}
	,ScopeModule: {_hx_index:2,__enum__:"stx.log.type.ScopeSum",toString:$estr}
};
var stx_parse_pack_parser_term_Delegate = function(delegation,id) {
	stx_LiftAssert.assert(stx_core_pack_Wildcard.__,id).exists(delegation);
	stx_parse_pack_parser_term_Base.call(this,delegation,id);
	this.tag = delegation.tag;
};
stx_parse_pack_parser_term_Delegate.__name__ = "stx.parse.pack.parser.term.Delegate";
stx_parse_pack_parser_term_Delegate.__super__ = stx_parse_pack_parser_term_Base;
stx_parse_pack_parser_term_Delegate.prototype = $extend(stx_parse_pack_parser_term_Base.prototype,{
	check: function() {
		stx_LiftAssert.assert(stx_core_pack_Wildcard.__,this.id).exists(this.delegation);
	}
	,do_parse: function(ipt) {
		return this.delegation.parse(ipt);
	}
	,__class__: stx_parse_pack_parser_term_Delegate
});
var stx_parse_pack_parser_term_ErrorTransformer = function(delegation,transformer,id) {
	stx_parse_pack_parser_term_Delegate.call(this,delegation,id);
	this.transformer = transformer;
};
stx_parse_pack_parser_term_ErrorTransformer.__name__ = "stx.parse.pack.parser.term.ErrorTransformer";
stx_parse_pack_parser_term_ErrorTransformer.__super__ = stx_parse_pack_parser_term_Delegate;
stx_parse_pack_parser_term_ErrorTransformer.prototype = $extend(stx_parse_pack_parser_term_Delegate.prototype,{
	transformer: null
	,do_parse: function(ipt) {
		var _gthis = this;
		return stx_parse_pack_ParseResult.fold(this.delegation.parse(ipt),stx_core_pack_OutcomeSum.Success,function(e) {
			return stx_parse_pack_ParseFailure.toParseResult(stx_parse_pack_ParseFailure.mod(e,_gthis.transformer));
		});
	}
	,__class__: stx_parse_pack_parser_term_ErrorTransformer
});
var stx_parse_term_Literal = function(delegation,id) {
	stx_parse_pack_parser_term_Base.call(this,delegation,id);
};
stx_parse_term_Literal.__name__ = "stx.parse.term.Literal";
stx_parse_term_Literal.__super__ = stx_parse_pack_parser_term_Base;
stx_parse_term_Literal.prototype = $extend(stx_parse_pack_parser_term_Base.prototype,{
	do_parse: function(ipt) {
		var data = stx_parse_pack_Input.get_content(ipt).data.substr(stx_parse_pack_Input.get_offset(ipt));
		var code = StringTools.fastCodeAt;
		var has = stx_Parse.range;
		var q = 34;
		var ok = code(data,0) == 34;
		var idx = 1;
		if(ok) {
			_hx_loop1: while(true) switch(code(data,idx)) {
			case 34:
				++idx;
				break _hx_loop1;
			case 92:
				if(code(data,idx + 1) == 34) {
					idx += 2;
				} else {
					++idx;
				}
				break;
			default:
				++idx;
			}
		}
		var out = ipt.content.take(idx);
		out = HxOverrides.substr(out,1,out.length - 2);
		if(idx > 1) {
			return stx_parse_pack_ParseSuccess.toParseResult(stx_parse_pack_ParseSuccess.make({ content : ipt.content.drop(idx), memo : ipt.memo},out));
		} else {
			return stx_parse_pack_ParseFailure.toParseResult(stx_parse_pack_ParseFailure.at_with(ipt,"not matched",false,{ fileName : "stx/parse/term/Literal.hx", lineNumber : 31, className : "stx.parse.term.Literal", methodName : "do_parse"}));
		}
	}
	,__class__: stx_parse_term_Literal
});
var stx_parse_Jali = function() {
	stx_core_pack_Clazz.call(this);
};
stx_parse_Jali.__name__ = "stx.parse.Jali";
stx_parse_Jali.spaced = function(p) {
	var p1 = stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_With(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Many(stx_parse_Jali.whitespace,{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 94, className : "stx.parse.pack.ParserLift", methodName : "many"})),p,function(_,b) {
		return b;
	},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 113, className : "stx.parse.pack.ParserLift", methodName : "and_with"}));
	var tag = stx_core_pack_OptionLift.def(p.tag,$bind(p,p.name));
	p1.tag = haxe_ds_Option.Some(tag);
	var name = tag;
	return stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_ErrorTransformer(p1,function(err) {
		return err.map(function(info) {
			return stx_parse_pack_ParseErrorInfo.tag(info,name);
		});
	},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 165, className : "stx.parse.pack.ParserLift", methodName : "with_error_tag"}));
};
stx_parse_Jali.bracketed = function(prs) {
	var p = stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_With(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_With(stx_parse_Jali.l_brckt,prs,function(_,b) {
		return b;
	},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 113, className : "stx.parse.pack.ParserLift", methodName : "and_with"})),stx_parse_Jali.r_brckt,function(a,_) {
		return a;
	},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 100, className : "stx.parse.pack.ParserLift", methodName : "and_"}));
	var tag = stx_core_pack_OptionLift.def(prs.tag,$bind(prs,prs.name));
	p.tag = haxe_ds_Option.Some(tag);
	var name = tag;
	return stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_ErrorTransformer(p,function(err) {
		return err.map(function(info) {
			return stx_parse_pack_ParseErrorInfo.tag(info,name);
		});
	},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 165, className : "stx.parse.pack.ParserLift", methodName : "with_error_tag"}));
};
stx_parse_Jali.term = function() {
	var p = stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_LAnon(stx_parse_Jali.term));
	p.tag = haxe_ds_Option.Some("term");
	var name = "term";
	var deferred = stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_ErrorTransformer(p,function(err) {
		return err.map(function(info) {
			return stx_parse_pack_ParseErrorInfo.tag(info,name);
		});
	},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 165, className : "stx.parse.pack.ParserLift", methodName : "with_error_tag"}));
	return stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Then(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_With(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Many(stx_parse_Jali.token,{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 94, className : "stx.parse.pack.ParserLift", methodName : "many"})),stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Many(stx_parse_Jali.bracketed(deferred),{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 94, className : "stx.parse.pack.ParserLift", methodName : "many"})),function(l,r) {
		return stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,l,r);
	},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 103, className : "stx.parse.pack.ParserLift", methodName : "and"})),stx_core_use_UseNano.decouple(stx_core_pack_Wildcard.__,function(l,r) {
		switch(l.length) {
		case 0:
			var term = r;
			return jali_pack_TermSum.TOf(jali_pack_HeadSum.Rest,term);
		case 1:
			var data = l;
			var term = r;
			return jali_pack_TermSum.TOf(jali_pack_HeadSum.Code(stx_core_use_UseOptionNano.fudge(stx_core_pack_ArrayLift.head(data))),term);
		default:
			var data = l;
			var term = r;
			return jali_pack_TermSum.TOf(jali_pack_HeadSum.Data(data),term);
		}
	}),{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 88, className : "stx.parse.pack.ParserLift", methodName : "then"}));
};
stx_parse_Jali.__super__ = stx_core_pack_Clazz;
stx_parse_Jali.prototype = $extend(stx_core_pack_Clazz.prototype,{
	main: function() {
		return stx_parse_Jali.term();
	}
	,parse: function(ipt) {
		return this.main().parse(ipt);
	}
	,__class__: stx_parse_Jali
});
var stx_parse_Module = function() {
	stx_core_pack_Clazz.call(this);
};
stx_parse_Module.__name__ = "stx.parse.Module";
stx_parse_Module.__super__ = stx_core_pack_Clazz;
stx_parse_Module.prototype = $extend(stx_core_pack_Clazz.prototype,{
	greedy: function(prs) {
		return stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_With(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Many(prs,{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 94, className : "stx.parse.pack.ParserLift", methodName : "many"})),stx_Parse.eof(),function(a,_) {
			return a;
		},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 100, className : "stx.parse.pack.ParserLift", methodName : "and_"}));
	}
	,__class__: stx_parse_Module
});
var stx_parse_jali_term_Delegate = function(delegate,id) {
	stx_parse_pack_parser_term_Base.call(this,delegate,id);
};
stx_parse_jali_term_Delegate.__name__ = "stx.parse.jali.term.Delegate";
stx_parse_jali_term_Delegate.__super__ = stx_parse_pack_parser_term_Base;
stx_parse_jali_term_Delegate.prototype = $extend(stx_parse_pack_parser_term_Base.prototype,{
	do_parse: function(ipt) {
		return stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Then(this.delegation,function(x) {
			return jali_pack_LangSum.Lit(jali_pack_Constructor.datum(jali_LiftJali.make(jali_pack_TermSum.TOf),x,jali_pack_Tail.fromWildcard(stx_core_pack_Wildcard.__)));
		},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 88, className : "stx.parse.pack.ParserLift", methodName : "then"})).parse(ipt);
	}
	,__class__: stx_parse_jali_term_Delegate
});
var stx_parse_jali_term_Id = function(delegation,id) {
	stx_parse_pack_parser_term_Base.call(this,delegation,id);
};
stx_parse_jali_term_Id.__name__ = "stx.parse.jali.term.Id";
stx_parse_jali_term_Id.__super__ = stx_parse_pack_parser_term_Base;
stx_parse_jali_term_Id.prototype = $extend(stx_parse_pack_parser_term_Base.prototype,{
	do_parse: function(ipt) {
		var args = ipt.memo.symbols.h[this.__id__];
		if(args == null) {
			return stx_parse_pack_ParseFailure.toParseResult(stx_parse_pack_ParseFailure.at_with(ipt,"malformed input " + Std.string(args),false,{ fileName : "stx/parse/jali/term/Id.hx", lineNumber : 15, className : "stx.parse.jali.term.Id", methodName : "do_parse"}));
		} else {
			switch(args._hx_index) {
			case 0:
				var _g = args.rest;
				var _g = args.head;
				if(_g._hx_index == 2) {
					var code = _g.code;
					var p = stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Identifier(code,{ fileName : "stx/parse/jali/term/Id.hx", lineNumber : 11, className : "stx.parse.jali.term.Id", methodName : "do_parse"}));
					var _e = jali_LiftJali.make(jali_pack_TermSum.TOf);
					return stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Then(p,stx_fn_unary_Implementation.then(function(code) {
						return jali_pack_Constructor.code_only(_e,code);
					},jali_pack_LangSum.Lit),{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 88, className : "stx.parse.pack.ParserLift", methodName : "then"})).parse(ipt);
				} else {
					return stx_parse_pack_ParseFailure.toParseResult(stx_parse_pack_ParseFailure.at_with(ipt,"malformed input " + Std.string(args),false,{ fileName : "stx/parse/jali/term/Id.hx", lineNumber : 15, className : "stx.parse.jali.term.Id", methodName : "do_parse"}));
				}
				break;
			}
		}
	}
	,__class__: stx_parse_jali_term_Id
});
var stx_parse_jali_term_Lang = function(grammar,id) {
	stx_parse_pack_parser_term_Base.call(this,id,{ fileName : "stx/parse/jali/term/Lang.hx", lineNumber : 8, className : "stx.parse.jali.term.Lang", methodName : "new"});
	this.grammar = grammar;
};
stx_parse_jali_term_Lang.__name__ = "stx.parse.jali.term.Lang";
stx_parse_jali_term_Lang.__super__ = stx_parse_pack_parser_term_Base;
stx_parse_jali_term_Lang.prototype = $extend(stx_parse_pack_parser_term_Base.prototype,{
	grammar: null
	,do_parse: function(ipt) {
		return this.grammar.of("main").parse(ipt);
	}
	,__class__: stx_parse_jali_term_Lang
});
var stx_parse_jali_term_Memo = function(delegation,id) {
	stx_parse_pack_parser_term_Delegate.call(this,stx_parse_pack_LRLift.memo(delegation),id);
};
stx_parse_jali_term_Memo.__name__ = "stx.parse.jali.term.Memo";
stx_parse_jali_term_Memo.__super__ = stx_parse_pack_parser_term_Delegate;
stx_parse_jali_term_Memo.prototype = $extend(stx_parse_pack_parser_term_Delegate.prototype,{
	do_parse: function(ipt) {
		var out = stx_parse_pack_parser_term_Delegate.prototype.do_parse.call(this,ipt);
		return out;
	}
	,__class__: stx_parse_jali_term_Memo
});
var stx_parse_jali_term_Recode = function(delegate,id) {
	stx_parse_pack_parser_term_Base.call(this,delegate,id);
};
stx_parse_jali_term_Recode.__name__ = "stx.parse.jali.term.Recode";
stx_parse_jali_term_Recode.__super__ = stx_parse_pack_parser_term_Base;
stx_parse_jali_term_Recode.prototype = $extend(stx_parse_pack_parser_term_Base.prototype,{
	do_parse: function(ipt) {
		return stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Then(this.delegation,function(x) {
			return jali_pack_LangSum.Lit(jali_pack_Constructor.code_only(jali_LiftJali.make(jali_pack_TermSum.TOf),x));
		},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 88, className : "stx.parse.pack.ParserLift", methodName : "then"})).parse(ipt);
	}
	,__class__: stx_parse_jali_term_Recode
});
var stx_parse_jali_term_Regex = function(delegation,id) {
	stx_parse_pack_parser_term_Base.call(this,delegation,id);
};
stx_parse_jali_term_Regex.__name__ = "stx.parse.jali.term.Regex";
stx_parse_jali_term_Regex.__super__ = stx_parse_pack_parser_term_Base;
stx_parse_jali_term_Regex.prototype = $extend(stx_parse_pack_parser_term_Base.prototype,{
	do_parse: function(input) {
		var args = input.memo.symbols.h[this.__id__];
		var _g = input.memo.symbols.h[this.__id__];
		if(_g == null) {
			var fatal = true;
			if(fatal == null) {
				fatal = false;
			}
			return stx_parse_pack_ParseFailure.toParseResult(stx_parse_pack_ParseFailure.at_with(input,"malformed arguments " + Std.string(args),fatal,{ fileName : "stx/parse/jali/term/Regex.hx", lineNumber : 12, className : "stx.parse.jali.term.Regex", methodName : "do_parse"}));
		} else {
			switch(_g._hx_index) {
			case 0:
				var _g1 = _g.rest;
				var _g1 = _g.head;
				if(_g1._hx_index == 2) {
					var code = _g1.code;
					return stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Then(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Regex(code,{ fileName : "stx/parse/jali/term/Regex.hx", lineNumber : 10, className : "stx.parse.jali.term.Regex", methodName : "do_parse"})),function(_) {
						return jali_pack_LangSum.Lit(jali_pack_Constructor.code_only(jali_LiftJali.make(jali_pack_TermSum.TOf),_));
					},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 88, className : "stx.parse.pack.ParserLift", methodName : "then"})).parse(input);
				} else {
					var fatal = true;
					if(fatal == null) {
						fatal = false;
					}
					return stx_parse_pack_ParseFailure.toParseResult(stx_parse_pack_ParseFailure.at_with(input,"malformed arguments " + Std.string(args),fatal,{ fileName : "stx/parse/jali/term/Regex.hx", lineNumber : 12, className : "stx.parse.jali.term.Regex", methodName : "do_parse"}));
				}
				break;
			}
		}
	}
	,__class__: stx_parse_jali_term_Regex
});
var stx_parse_jali_term_Stash = function(delegation,value,pos) {
	stx_parse_pack_parser_term_Delegate.call(this,delegation,pos);
	this.value = value;
};
stx_parse_jali_term_Stash.__name__ = "stx.parse.jali.term.Stash";
stx_parse_jali_term_Stash.__super__ = stx_parse_pack_parser_term_Delegate;
stx_parse_jali_term_Stash.prototype = $extend(stx_parse_pack_parser_term_Delegate.prototype,{
	value: null
	,do_parse: function(input) {
		input.memo.symbols.set(this.delegation,this.value);
		return this.delegation.parse(input);
	}
	,__class__: stx_parse_jali_term_Stash
});
var stx_parse_jali_term_Tag = function(label,delegation,id) {
	stx_parse_pack_parser_term_Base.call(this,delegation,id);
	this.label = label;
};
stx_parse_jali_term_Tag.__name__ = "stx.parse.jali.term.Tag";
stx_parse_jali_term_Tag.__super__ = stx_parse_pack_parser_term_Base;
stx_parse_jali_term_Tag.prototype = $extend(stx_parse_pack_parser_term_Base.prototype,{
	label: null
	,do_parse: function(ipt) {
		var _gthis = this;
		return stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Then(this.delegation,function(v) {
			return jali_pack_LangSum.Tag(_gthis.label,v);
		},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 88, className : "stx.parse.pack.ParserLift", methodName : "then"})).parse(ipt);
	}
	,__class__: stx_parse_jali_term_Tag
});
var stx_parse_lift_LiftArrayReader = function() { };
stx_parse_lift_LiftArrayReader.__name__ = "stx.parse.lift.LiftArrayReader";
stx_parse_lift_LiftArrayReader.reader = function(arr) {
	return stx_parse_pack_Input.pure(stx_parse_pack_Enumerable.array(arr));
};
var stx_parse_lift_LiftStringReader = function() { };
stx_parse_lift_LiftStringReader.__name__ = "stx.parse.lift.LiftStringReader";
stx_parse_lift_LiftStringReader.reader = function(str) {
	return stx_parse_pack_Input.pure(stx_parse_pack_Enumerable.string(str));
};
var stx_parse_pack_EnumerableApi = function() { };
stx_parse_pack_EnumerableApi.__name__ = "stx.parse.pack.EnumerableApi";
stx_parse_pack_EnumerableApi.__isInterface__ = true;
stx_parse_pack_EnumerableApi.prototype = {
	data: null
	,index: null
	,head: null
	,take: null
	,drop: null
	,match: null
	,prepend: null
	,is_end: null
	,__class__: stx_parse_pack_EnumerableApi
};
var stx_parse_pack_Enumerable = {};
stx_parse_pack_Enumerable._new = function(self) {
	var this1 = self;
	return this1;
};
stx_parse_pack_Enumerable.lift = function(self) {
	return stx_parse_pack_Enumerable._new(self);
};
stx_parse_pack_Enumerable.array = function(array) {
	return new stx_parse_pack_enumerable_term_Array(array);
};
stx_parse_pack_Enumerable.string = function(string) {
	return new stx_parse_pack_enumerable_term_String(string);
};
stx_parse_pack_Enumerable.prj = function(this1) {
	return this1;
};
stx_parse_pack_Enumerable.get_self = function(this1) {
	return stx_parse_pack_Enumerable.lift(this1);
};
var stx_parse_pack_Head = {};
stx_parse_pack_Head.getHead = function(this1) {
	return this1.headParser;
};
var stx_parse_pack_LRLift = function() { };
stx_parse_pack_LRLift.__name__ = "stx.parse.pack.LRLift";
stx_parse_pack_LRLift.lrAnswer = function(p,genKey,input,growable) {
	var _g = growable.head;
	switch(_g._hx_index) {
	case 0:
		var head = _g.v;
		if(stx_parse_pack_Head.getHead(head) != p) {
			return growable.seed;
		} else {
			var entry = stx_parse_pack_MemoEntry.MemoParsed(growable.seed);
			var key = genKey(input.content.index);
			input.memo.memoEntries.h[key] = entry;
			return stx_parse_pack_ParseResult.fold(growable.seed,function(_) {
				return stx_parse_pack_LRLift.grow(p,genKey,input,head);
			},function(_) {
				return growable.seed;
			});
		}
		break;
	case 1:
		var this1 = stx_core_use_UseNano.fault(stx_core_pack_Wildcard.__,{ fileName : "stx/parse/pack/LR.hx", lineNumber : 17, className : "stx.parse.pack.LRLift", methodName : "lrAnswer"});
		throw haxe_Exception.thrown(new stx_core_pack_Err(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,stx_core_pack_Failure.ERR_OF(stx_parse_pack_ParseSystemFailure.E_NoRecursionHead)),haxe_ds_Option.None,this1));
	}
};
stx_parse_pack_LRLift.recall = function(p,genKey,input) {
	var key = genKey(input.content.index);
	var res = input.memo.memoEntries.h[key];
	var cached = res == null ? haxe_ds_Option.None : haxe_ds_Option.Some(res);
	var res = input.memo.recursionHeads.h[input.content.index + ""];
	var _g = res == null ? haxe_ds_Option.None : haxe_ds_Option.Some(res);
	switch(_g._hx_index) {
	case 0:
		var head = _g.v;
		if(cached == haxe_ds_Option.None && !stx_ds_LinkedList.has(stx_ds_LinkedList.cons(head.involvedSet,head.headParser),stx_parse_pack_Parser.get_self(p))) {
			var tmp = stx_parse_pack_MemoEntry.MemoParsed(stx_parse_pack_ParseFailure.toParseResult(stx_parse_pack_ParseFailure.at_with(input,"dummy",null,{ fileName : "stx/parse/pack/LR.hx", lineNumber : 38, className : "stx.parse.pack.LRLift", methodName : "recall"})));
		}
		if(stx_ds_LinkedList.has(head.evalSet,p)) {
			head.evalSet = stx_ds_LinkedList.filter(head.evalSet,function(x) {
				return x != p;
			});
			var memo = stx_parse_pack_MemoEntry.MemoParsed(p.parse(input));
			var key = genKey(input.content.index);
			input.memo.memoEntries.h[key] = memo;
			cached = haxe_ds_Option.Some(memo);
		}
		return cached;
	case 1:
		return cached;
	}
};
stx_parse_pack_LRLift.setupLR = function(p,input,recDetect) {
	if(recDetect.head == haxe_ds_Option.None) {
		recDetect.head = haxe_ds_Option.Some(stx_parse_pack_Parser.mkHead(p));
	}
	var stack = input.memo.lrStack;
	var h = stx_core_use_UseOptionNano.fudge(recDetect.head);
	while(stx_ds_LinkedList.head(stack) != null && stx_ds_LinkedList.head(stack).rule != p) {
		var head = stx_ds_LinkedList.head(stack);
		head.head = recDetect.head;
		h.involvedSet = stx_ds_LinkedList.cons(h.involvedSet,head.rule);
		stack = stx_ds_LinkedList.tail(stack);
	}
};
stx_parse_pack_LRLift.grow = function(p,genKey,rest,head) {
	rest.memo.recursionHeads.h[rest.content.index + ""] = head;
	var oldRes;
	var key = genKey(rest.content.index);
	var res = rest.memo.memoEntries.h[key];
	var _g = stx_core_use_UseOptionNano.fudge(res == null ? haxe_ds_Option.None : haxe_ds_Option.Some(res));
	if(_g._hx_index == 0) {
		var ans = _g.ans;
		oldRes = ans;
	} else {
		throw haxe_Exception.thrown("impossible match");
	}
	head.evalSet = head.involvedSet;
	if(p == null) {
		throw haxe_Exception.thrown("undefined parse delegate");
	}
	var res = p.parse(rest);
	switch(res._hx_index) {
	case 0:
		var _g = res.t;
		if(stx_parse_pack_Input.get_offset(stx_parse_pack_ParseResult.get_rest(oldRes)) < stx_parse_pack_Input.get_offset(stx_parse_pack_ParseResult.get_rest(res))) {
			var entry = stx_parse_pack_MemoEntry.MemoParsed(res);
			var key = genKey(rest.content.index);
			rest.memo.memoEntries.h[key] = entry;
			return stx_parse_pack_LRLift.grow(p,genKey,rest,head);
		} else {
			var key = rest.content.index + "";
			var _this = rest.memo.recursionHeads;
			if(Object.prototype.hasOwnProperty.call(_this.h,key)) {
				delete(_this.h[key]);
			}
			var key = genKey(rest.content.index);
			var res1 = rest.memo.memoEntries.h[key];
			var _g = stx_core_use_UseOptionNano.fudge(res1 == null ? haxe_ds_Option.None : haxe_ds_Option.Some(res1));
			if(_g._hx_index == 0) {
				var ans = _g.ans;
				return ans;
			} else {
				throw haxe_Exception.thrown("impossible match");
			}
		}
		break;
	case 1:
		var isError = stx_core_pack_OptionLift.defv(stx_core_pack_OptionLift.map(res.e.with.head(),function(_) {
			return _.fatal;
		}),false);
		if(isError) {
			var entry = stx_parse_pack_MemoEntry.MemoParsed(res);
			var key = genKey(rest.content.index);
			rest.memo.memoEntries.h[key] = entry;
			var key = rest.content.index + "";
			var _this = rest.memo.recursionHeads;
			if(Object.prototype.hasOwnProperty.call(_this.h,key)) {
				delete(_this.h[key]);
			}
			return res;
		} else {
			var key = rest.content.index + "";
			var _this = rest.memo.recursionHeads;
			if(Object.prototype.hasOwnProperty.call(_this.h,key)) {
				delete(_this.h[key]);
			}
			return oldRes;
		}
		break;
	}
};
stx_parse_pack_LRLift.memo = function(p) {
	return stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Memoise(p));
};
var stx_parse_pack_LR = {};
stx_parse_pack_LR.pos = function(this1) {
	return stx_parse_pack_ParseResult.get_rest(this1.seed);
};
var stx_parse_pack_MemoEntry = $hxEnums["stx.parse.pack.MemoEntry"] = { __ename__ : "stx.parse.pack.MemoEntry", __constructs__ : ["MemoParsed","MemoLR"]
	,MemoParsed: ($_=function(ans) { return {_hx_index:0,ans:ans,__enum__:"stx.parse.pack.MemoEntry",toString:$estr}; },$_.__params__ = ["ans"],$_)
	,MemoLR: ($_=function(lr) { return {_hx_index:1,lr:lr,__enum__:"stx.parse.pack.MemoEntry",toString:$estr}; },$_.__params__ = ["lr"],$_)
};
var stx_parse_pack_Memo = {};
stx_parse_pack_Memo.unit = function() {
	return { symbols : new haxe_ds_ObjectMap(), memoEntries : new haxe_ds_StringMap(), recursionHeads : new haxe_ds_StringMap(), lrStack : stx_ds_LinkedList.unit()};
};
stx_parse_pack_Memo.get = function(this1,key) {
	var value = this1.memoEntries.h[key];
	if(value == null) {
		return haxe_ds_Option.None;
	} else {
		return haxe_ds_Option.Some(value);
	}
};
var stx_parse_pack_ParseResultLift = function() { };
stx_parse_pack_ParseResultLift.__name__ = "stx.parse.pack.ParseResultLift";
stx_parse_pack_ParseResultLift.mkLR = function(seed,rule,head) {
	return { seed : seed, rule : stx_parse_pack_Parser.get_self(rule), head : head};
};
var stx_parse_pack_UID = {};
stx_parse_pack_UID._new = function() {
	var this1 = stx_parse_pack__$UID_UIDs.parserUid();
	return this1;
};
var stx_parse_pack__$UID_UIDs = function() { };
stx_parse_pack__$UID_UIDs.__name__ = "stx.parse.pack._UID.UIDs";
stx_parse_pack__$UID_UIDs.parserUid = function() {
	return ++stx_parse_pack__$UID_UIDs._parserUid;
};
var stx_parse_pack_enumerable_term_Base = function(data,index) {
	if(index == null) {
		index = 0;
	}
	this.data = data;
	this.index = index;
};
stx_parse_pack_enumerable_term_Base.__name__ = "stx.parse.pack.enumerable.term.Base";
stx_parse_pack_enumerable_term_Base.__interfaces__ = [stx_parse_pack_EnumerableApi];
stx_parse_pack_enumerable_term_Base.prototype = {
	data: null
	,index: null
	,is_end: function() {
		throw haxe_Exception.thrown("abstract function");
	}
	,match: function(fn) {
		throw haxe_Exception.thrown("abstract function");
	}
	,prepend: function(v) {
		throw haxe_Exception.thrown("abstract function");
	}
	,head: function() {
		throw haxe_Exception.thrown("abstract function");
	}
	,drop: function(n) {
		throw haxe_Exception.thrown("abstract function");
	}
	,take: function(len) {
		throw haxe_Exception.thrown("abstract function");
	}
	,__class__: stx_parse_pack_enumerable_term_Base
};
var stx_parse_pack_enumerable_term_Array = function(v,i) {
	stx_parse_pack_enumerable_term_Base.call(this,v,i);
};
stx_parse_pack_enumerable_term_Array.__name__ = "stx.parse.pack.enumerable.term.Array";
stx_parse_pack_enumerable_term_Array.__super__ = stx_parse_pack_enumerable_term_Base;
stx_parse_pack_enumerable_term_Array.prototype = $extend(stx_parse_pack_enumerable_term_Base.prototype,{
	is_end: function() {
		return this.data.length <= this.index;
	}
	,match: function(e) {
		return e(this.head());
	}
	,prepend: function(v) {
		return new stx_parse_pack_enumerable_term_Array(stx_core_pack_ArrayLift.cons(this.data,v),this.index);
	}
	,take: function(len) {
		if(len == null) {
			len = this.data.length - this.index;
		}
		return stx_core_pack_ArrayLift.prj(this.data).slice(this.index,this.index + len);
	}
	,drop: function(i) {
		return new stx_parse_pack_enumerable_term_Array(this.data,this.index + i);
	}
	,head: function() {
		return this.data[this.index];
	}
	,__class__: stx_parse_pack_enumerable_term_Array
});
var stx_parse_pack_enumerable_term_String = function(v,i) {
	stx_parse_pack_enumerable_term_Base.call(this,v,i);
};
stx_parse_pack_enumerable_term_String.__name__ = "stx.parse.pack.enumerable.term.String";
stx_parse_pack_enumerable_term_String.__super__ = stx_parse_pack_enumerable_term_Base;
stx_parse_pack_enumerable_term_String.prototype = $extend(stx_parse_pack_enumerable_term_Base.prototype,{
	is_end: function() {
		return this.data.length <= this.index;
	}
	,match: function(e) {
		var to_match = this.take();
		return e(to_match);
	}
	,prepend: function(v) {
		var left = HxOverrides.substr(this.data,0,this.index);
		var right = HxOverrides.substr(this.data,this.index,null);
		return new stx_parse_pack_enumerable_term_String(this.data = left + v + right,this.index);
	}
	,take: function(len) {
		if(len == null) {
			len = this.data.length - this.index;
		}
		if(len == 0) {
			len = 1;
		}
		var out = HxOverrides.substr(this.data,this.index,len);
		return out;
	}
	,drop: function(i) {
		return new stx_parse_pack_enumerable_term_String(this.data,this.index + i);
	}
	,head: function() {
		return this.data.charAt(this.index);
	}
	,__class__: stx_parse_pack_enumerable_term_String
});
var stx_parse_pack_parser_term_AndThen = function(delegation,flatmap,id) {
	stx_parse_pack_parser_term_Base.call(this,delegation,id);
	this.flatmap = flatmap;
};
stx_parse_pack_parser_term_AndThen.__name__ = "stx.parse.pack.parser.term.AndThen";
stx_parse_pack_parser_term_AndThen.__super__ = stx_parse_pack_parser_term_Base;
stx_parse_pack_parser_term_AndThen.prototype = $extend(stx_parse_pack_parser_term_Base.prototype,{
	flatmap: null
	,do_parse: function(input) {
		var _gthis = this;
		stx_LiftAssert.assert(stx_core_pack_Wildcard.__,{ fileName : "stx/parse/pack/parser/term/AndThen.hx", lineNumber : 11, className : "stx.parse.pack.parser.term.AndThen", methodName : "do_parse"}).exists(this.delegation);
		return stx_parse_pack_ParseResult.fold(this.delegation.parse(input),function(s) {
			return _gthis.flatmap(s.with).parse(s.rest);
		},stx_core_pack_OutcomeSum.Failure);
	}
	,__class__: stx_parse_pack_parser_term_AndThen
});
var stx_parse_pack_parser_term_Commit = function(delegation,id) {
	stx_parse_pack_parser_term_Delegate.call(this,delegation,id);
};
stx_parse_pack_parser_term_Commit.__name__ = "stx.parse.pack.parser.term.Commit";
stx_parse_pack_parser_term_Commit.__super__ = stx_parse_pack_parser_term_Delegate;
stx_parse_pack_parser_term_Commit.prototype = $extend(stx_parse_pack_parser_term_Delegate.prototype,{
	do_parse: function(ipt) {
		return stx_parse_pack_ParseResult.fold(this.delegation.parse(ipt),stx_core_pack_OutcomeSum.Success,function(err) {
			return stx_parse_pack_ParseFailure.toParseResult(stx_core_use_UseNano.if_else(!stx_core_pack_OptionLift.defv(stx_core_pack_OptionLift.map(err.with.head(),function(_) {
				return _.fatal;
			}),false) || stx_core_pack_OptionLift.defv(stx_core_pack_OptionLift.map(err.with.head(),function(_) {
				return _.msg == stx_parse_pack_ParseError.FAIL;
			}),false),function() {
				return err;
			},function() {
				var err1 = stx_parse_pack_ParseError.at_with(err.rest,"Cannot Commit",true,{ fileName : "stx/parse/pack/parser/term/Commit.hx", lineNumber : 12, className : "stx.parse.pack.parser.term.Commit", methodName : "do_parse"});
				var this1 = { rest : err.rest, 'with' : err.with.next(err1)};
				return this1;
			}));
		});
	}
	,__class__: stx_parse_pack_parser_term_Commit
});
var stx_parse_pack_parser_term_Failed = function(msg,is_error,id) {
	if(is_error == null) {
		is_error = false;
	}
	stx_parse_pack_parser_term_Direct.call(this,id);
	this.msg = msg;
	this.is_error = is_error;
};
stx_parse_pack_parser_term_Failed.__name__ = "stx.parse.pack.parser.term.Failed";
stx_parse_pack_parser_term_Failed.__super__ = stx_parse_pack_parser_term_Direct;
stx_parse_pack_parser_term_Failed.prototype = $extend(stx_parse_pack_parser_term_Direct.prototype,{
	msg: null
	,is_error: null
	,do_parse: function(ipt) {
		var fatal = this.is_error;
		if(fatal == null) {
			fatal = false;
		}
		return stx_parse_pack_ParseFailure.toParseResult(stx_parse_pack_ParseFailure.at_with(ipt,this.msg,fatal,this.id));
	}
	,__class__: stx_parse_pack_parser_term_Failed
});
var stx_parse_pack_parser_term_Inspect = function(delegation,prefix,postfix,id) {
	this.prefix = prefix;
	this.postfix = postfix;
	stx_parse_pack_parser_term_Delegate.call(this,delegation,id);
};
stx_parse_pack_parser_term_Inspect.__name__ = "stx.parse.pack.parser.term.Inspect";
stx_parse_pack_parser_term_Inspect.__super__ = stx_parse_pack_parser_term_Delegate;
stx_parse_pack_parser_term_Inspect.prototype = $extend(stx_parse_pack_parser_term_Delegate.prototype,{
	prefix: null
	,postfix: null
	,do_parse: function(ipt) {
		this.prefix(ipt);
		var out = this.delegation.parse(ipt);
		this.postfix(out);
		return out;
	}
	,__class__: stx_parse_pack_parser_term_Inspect
});
var stx_parse_pack_parser_term_LAnon = function(closure,id) {
	stx_parse_pack_parser_term_Anon.call(this,id,{ fileName : "stx/parse/pack/parser/term/LAnon.hx", lineNumber : 6, className : "stx.parse.pack.parser.term.LAnon", methodName : "new"});
	stx_LiftAssert.assert(stx_core_pack_Wildcard.__,{ fileName : "stx/parse/pack/parser/term/LAnon.hx", lineNumber : 7, className : "stx.parse.pack.parser.term.LAnon", methodName : "new"}).exists(closure);
	this.closure = stx_fn_Thunk.prj(stx_fn_Thunk.cache(closure));
};
stx_parse_pack_parser_term_LAnon.__name__ = "stx.parse.pack.parser.term.LAnon";
stx_parse_pack_parser_term_LAnon.__super__ = stx_parse_pack_parser_term_Anon;
stx_parse_pack_parser_term_LAnon.prototype = $extend(stx_parse_pack_parser_term_Anon.prototype,{
	closure: null
	,do_parse: function(ipt) {
		if(this.method == null) {
			this.method = stx_core_use_UseOptionNano.fudge(stx_core_pack_OptionLift.map(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,this.closure()),function(_) {
				return $bind(_,_.parse);
			}));
			var _g = stx_assert_pack_PredicateLift.errata(new stx_assert_Module({ fileName : "stx/parse/pack/parser/term/LAnon.hx", lineNumber : 13, className : "stx.parse.pack.parser.term.LAnon", methodName : "do_parse"}).exists(),function(e) {
				var this1 = e.fault();
				return new stx_core_pack_Err(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,stx_core_pack_Failure.ERR_OF(stx_parse_pack_ParseSystemFailure.E_UndefinedParseDelegate(ipt))),haxe_ds_Option.None,this1);
			}).applyI(this.method);
			if(_g._hx_index == 0) {
				var e = _g.v;
				throw haxe_Exception.thrown(e);
			}
			return this.method(ipt);
		} else {
			return this.method(ipt);
		}
	}
	,__class__: stx_parse_pack_parser_term_LAnon
});
var stx_parse_pack_parser_term_Memoise = function(delegation) {
	stx_parse_pack_parser_term_Delegate.call(this,delegation,{ fileName : "stx/parse/pack/parser/term/Memoise.hx", lineNumber : 5, className : "stx.parse.pack.parser.term.Memoise", methodName : "new"});
	this.uid = stx_parse_pack_UID._new();
};
stx_parse_pack_parser_term_Memoise.__name__ = "stx.parse.pack.parser.term.Memoise";
stx_parse_pack_parser_term_Memoise.__super__ = stx_parse_pack_parser_term_Delegate;
stx_parse_pack_parser_term_Memoise.prototype = $extend(stx_parse_pack_parser_term_Delegate.prototype,{
	genKey: function(pos) {
		return Std.string(this.id) + "@" + pos;
	}
	,do_parse: function(ipt) {
		var _g = stx_parse_pack_LRLift.recall(this.delegation,$bind(this,this.genKey),ipt);
		switch(_g._hx_index) {
		case 0:
			var mEntry = _g.v;
			switch(mEntry._hx_index) {
			case 0:
				var ans = mEntry.ans;
				return ans;
			case 1:
				var recDetect = mEntry.lr;
				stx_parse_pack_LR._.setupLR(this.delegation,ipt,recDetect);
				return recDetect.seed;
			}
			break;
		case 1:
			var fatal = false;
			if(fatal == null) {
				fatal = false;
			}
			var base = stx_parse_pack_ParseResultLift.mkLR(stx_parse_pack_ParseFailure.toParseResult(stx_parse_pack_ParseFailure.at_with(ipt,stx_parse_pack_ParseError.FAIL,fatal,this.id)),this.delegation,haxe_ds_Option.None);
			ipt.memo.lrStack = stx_ds_LinkedList.cons(ipt.memo.lrStack,base);
			var entry = stx_parse_pack_MemoEntry.MemoLR(base);
			var key = this.genKey(ipt.content.index);
			ipt.memo.memoEntries.h[key] = entry;
			var _g = stx_assert_pack_PredicateLift.errata(new stx_assert_Module({ fileName : "stx/parse/pack/parser/term/Memoise.hx", lineNumber : 19, className : "stx.parse.pack.parser.term.Memoise", methodName : "do_parse"}).exists(),function(e) {
				var this1 = e.fault();
				return new stx_core_pack_Err(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,stx_core_pack_Failure.ERR_OF(stx_parse_pack_ParseSystemFailure.E_UndefinedParseDelegate(ipt))),haxe_ds_Option.None,this1);
			}).applyI(this.delegation);
			if(_g._hx_index == 0) {
				var e = _g.v;
				throw haxe_Exception.thrown(e);
			}
			var res = this.delegation.parse(ipt);
			ipt.memo.lrStack = stx_ds_LinkedList.tail(ipt.memo.lrStack);
			var _g = base.head;
			switch(_g._hx_index) {
			case 0:
				var _g1 = _g.v;
				base.seed = res;
				return stx_parse_pack_LRLift.lrAnswer(this.delegation,$bind(this,this.genKey),ipt,base);
			case 1:
				var entry = stx_parse_pack_MemoEntry.MemoParsed(res);
				var key = this.genKey(ipt.content.index);
				ipt.memo.memoEntries.h[key] = entry;
				return res;
			}
			break;
		}
	}
	,__class__: stx_parse_pack_parser_term_Memoise
});
var stx_parse_pack_parser_term_OptionP = function(delegation,id) {
	stx_parse_pack_parser_term_Base.call(this,delegation,id);
};
stx_parse_pack_parser_term_OptionP.__name__ = "stx.parse.pack.parser.term.OptionP";
stx_parse_pack_parser_term_OptionP.__super__ = stx_parse_pack_parser_term_Base;
stx_parse_pack_parser_term_OptionP.prototype = $extend(stx_parse_pack_parser_term_Base.prototype,{
	do_parse: function(ipt) {
		var _g = stx_assert_pack_PredicateLift.errata(new stx_assert_Module({ fileName : "stx/parse/pack/parser/term/Option.hx", lineNumber : 10, className : "stx.parse.pack.parser.term.OptionP", methodName : "do_parse"}).exists(),function(e) {
			var this1 = e.fault();
			return new stx_core_pack_Err(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,stx_core_pack_Failure.ERR_OF(stx_parse_pack_ParseSystemFailure.E_UndefinedParseDelegate(ipt))),haxe_ds_Option.None,this1);
		}).applyI(this.delegation);
		if(_g._hx_index == 0) {
			var e = _g.v;
			throw haxe_Exception.thrown(e);
		}
		return stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Or(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Then(this.delegation,haxe_ds_Option.Some,{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 88, className : "stx.parse.pack.ParserLift", methodName : "then"})),stx_parse_pack_parser_term_Succeed.pure(haxe_ds_Option.None),{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 82, className : "stx.parse.pack.ParserLift", methodName : "or"})).parse(ipt);
	}
	,__class__: stx_parse_pack_parser_term_OptionP
});
var stx_parse_pack_parser_term_Pure = function(value,pos) {
	this.value = value;
	stx_parse_pack_parser_term_Base.call(this,pos,{ fileName : "stx/parse/pack/parser/term/Pure.hx", lineNumber : 7, className : "stx.parse.pack.parser.term.Pure", methodName : "new"});
};
stx_parse_pack_parser_term_Pure.__name__ = "stx.parse.pack.parser.term.Pure";
stx_parse_pack_parser_term_Pure.__super__ = stx_parse_pack_parser_term_Base;
stx_parse_pack_parser_term_Pure.prototype = $extend(stx_parse_pack_parser_term_Base.prototype,{
	value: null
	,do_parse: function(ipt) {
		return this.value;
	}
	,__class__: stx_parse_pack_parser_term_Pure
});
var stx_parse_pack_parser_term_Rep1Sep = function(delegate,sep,pos) {
	stx_parse_pack_parser_term_Base.call(this,delegate,pos);
	this.sep = sep;
};
stx_parse_pack_parser_term_Rep1Sep.__name__ = "stx.parse.pack.parser.term.Rep1Sep";
stx_parse_pack_parser_term_Rep1Sep.__super__ = stx_parse_pack_parser_term_Base;
stx_parse_pack_parser_term_Rep1Sep.prototype = $extend(stx_parse_pack_parser_term_Base.prototype,{
	sep: null
	,do_parse: function(ipt) {
		return stx_parse_pack_Parser.get_self(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Then(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_With(this.delegation,stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Many(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_With(this.sep,this.delegation,function(_,b) {
			return b;
		},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 113, className : "stx.parse.pack.ParserLift", methodName : "and_with"})),{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 94, className : "stx.parse.pack.ParserLift", methodName : "many"})),function(l,r) {
			return stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,l,r);
		},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 103, className : "stx.parse.pack.ParserLift", methodName : "and"})),stx_core_use_UseNano.decouple(stx_core_pack_Wildcard.__,function(l,r) {
			return stx_core_pack_ArrayLift.cons(r,l);
		}),{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 88, className : "stx.parse.pack.ParserLift", methodName : "then"}))).parse(ipt);
	}
	,__class__: stx_parse_pack_parser_term_Rep1Sep
});
var stx_parse_pack_parser_term_RepSep = function(delegate,sep,pos) {
	stx_parse_pack_parser_term_Base.call(this,delegate,pos);
	this.sep = sep;
};
stx_parse_pack_parser_term_RepSep.__name__ = "stx.parse.pack.parser.term.RepSep";
stx_parse_pack_parser_term_RepSep.__super__ = stx_parse_pack_parser_term_Base;
stx_parse_pack_parser_term_RepSep.prototype = $extend(stx_parse_pack_parser_term_Base.prototype,{
	sep: null
	,do_parse: function(ipt) {
		return stx_parse_pack_Parser.get_self(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Then(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_With(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_OptionP(this.delegation,{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 180, className : "stx.parse.pack.ParserLift", methodName : "option"})),stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Many(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_With(this.sep,this.delegation,function(_,b) {
			return b;
		},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 113, className : "stx.parse.pack.ParserLift", methodName : "and_with"})),{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 94, className : "stx.parse.pack.ParserLift", methodName : "many"})),function(l,r) {
			return stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,l,r);
		},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 103, className : "stx.parse.pack.ParserLift", methodName : "and"})),stx_core_use_UseNano.decouple(stx_core_pack_Wildcard.__,function(l,r) {
			switch(l._hx_index) {
			case 0:
				var r1 = r;
				var l1 = l.v;
				return stx_core_pack_ArrayLift.cons(r1,l1);
			case 1:
				return [];
			}
		}),{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 88, className : "stx.parse.pack.ParserLift", methodName : "then"}))).parse(ipt);
	}
	,__class__: stx_parse_pack_parser_term_RepSep
});
var stx_parse_pack_parser_term_Succeed = function(value,id) {
	stx_parse_pack_parser_term_Direct.call(this,id);
	this.value = value;
};
stx_parse_pack_parser_term_Succeed.__name__ = "stx.parse.pack.parser.term.Succeed";
stx_parse_pack_parser_term_Succeed.pure = function(r) {
	return stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Succeed(r,{ fileName : "stx/parse/pack/parser/term/Succeed.hx", lineNumber : 10, className : "stx.parse.pack.parser.term.Succeed", methodName : "pure"}));
};
stx_parse_pack_parser_term_Succeed.__super__ = stx_parse_pack_parser_term_Direct;
stx_parse_pack_parser_term_Succeed.prototype = $extend(stx_parse_pack_parser_term_Direct.prototype,{
	value: null
	,do_parse: function(ipt) {
		return stx_parse_pack_ParseSuccess.toParseResult(stx_parse_pack_ParseSuccess.make(ipt,this.value));
	}
	,__class__: stx_parse_pack_parser_term_Succeed
});
var stx_parse_path_Base = function(is_windows) {
	this.p_special_chars = stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Regex("[^<>:\"\\\\|?*\\/A-Za-z0-9]",{ fileName : "stx/Parse.hx", lineNumber : 172, className : "stx.LiftParse", methodName : "regex"}));
	this.char_and_space = stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Or(stx_Parse.alphanum,stx_Parse.whitespace,{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 82, className : "stx.parse.pack.ParserLift", methodName : "or"}));
	this.p_up = stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Then(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Identifier("..",{ fileName : "src/main/haxe/stx/parse/path/Base.hx", lineNumber : 38, className : "stx.parse.path.Base", methodName : "p_up"})),function(x) {
		return stx_parse_term_TokenSum.FPTUp;
	},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 88, className : "stx.parse.pack.ParserLift", methodName : "then"}));
	this.is_windows = is_windows;
};
stx_parse_path_Base.__name__ = "stx.parse.path.Base";
stx_parse_path_Base.prototype = {
	is_windows: null
	,separator: function() {
		if(this.is_windows) {
			return "\\\\";
		} else {
			return "/";
		}
	}
	,p_sep: function() {
		var sep = this.separator();
		return stx_parse_pack_Parser.get_self(stx_parse_pack_Parser.Anon(function(ipt) {
			if(ipt.content.take(1) == sep) {
				return stx_parse_pack_ParseSuccess.toParseResult(stx_parse_pack_ParseSuccess.make({ content : ipt.content.drop(1), memo : ipt.memo},stx_parse_term_TokenSum.FPTSep));
			} else {
				return stx_parse_pack_ParseFailure.toParseResult(stx_parse_pack_ParseFailure.at_with(ipt,"not a separator",false,{ fileName : "src/main/haxe/stx/parse/path/Base.hx", lineNumber : 18, className : "stx.parse.path.Base", methodName : "p_sep"}));
			}
		}));
	}
	,p_root: function() {
		if(this.is_windows) {
			return stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Then(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_With(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Then(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Regex("[A-Za-z]:",{ fileName : "stx/Parse.hx", lineNumber : 172, className : "stx.LiftParse", methodName : "regex"})),stx_fn_unary_Implementation.then(haxe_ds_Option.Some,stx_parse_term_TokenSum.FPTDrive),{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 88, className : "stx.parse.pack.ParserLift", methodName : "then"})),stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_OptionP(this.p_sep(),{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 180, className : "stx.parse.pack.ParserLift", methodName : "option"})),function(l,r) {
				return stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,l,r);
			},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 103, className : "stx.parse.pack.ParserLift", methodName : "and"})),function(tp) {
				var _g = stx_core_pack_CoupleLift.snd(tp);
				switch(_g._hx_index) {
				case 0:
					var v = _g.v;
					return [stx_core_pack_CoupleLift.fst(tp),v];
				case 1:
					return [stx_core_pack_CoupleLift.fst(tp)];
				}
			},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 88, className : "stx.parse.pack.ParserLift", methodName : "then"}));
		} else {
			return stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Then(this.p_sep(),function(x) {
				return [stx_parse_term_TokenSum.FPTDrive(haxe_ds_Option.None)];
			},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 88, className : "stx.parse.pack.ParserLift", methodName : "then"}));
		}
	}
	,p_up: null
	,char_and_space: null
	,p_special_chars: null
	,p_path_chars: function() {
		return stx_LiftParse.token(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_OneMany(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_With(stx_LiftParse.not(this.p_sep()),stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Or(this.char_and_space,this.p_special_chars,{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 82, className : "stx.parse.pack.ParserLift", methodName : "or"})),function(_,b) {
			return b;
		},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 113, className : "stx.parse.pack.ParserLift", methodName : "and_with"})),{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 97, className : "stx.parse.pack.ParserLift", methodName : "one_many"})));
	}
	,p_file_chars: function() {
		return stx_LiftParse.token(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_OneMany(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Or(this.char_and_space,this.p_special_chars,{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 82, className : "stx.parse.pack.ParserLift", methodName : "or"})),{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 97, className : "stx.parse.pack.ParserLift", methodName : "one_many"})));
	}
	,p_term: function() {
		return stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_AndThen(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_With(this.p_path_chars(),stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_With(stx_LiftParse.not(this.p_sep()),stx_LiftParse.not(stx_LiftParse.id(":")),function(l,r) {
			return stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,l,r);
		},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 103, className : "stx.parse.pack.ParserLift", methodName : "and"})),function(a,_) {
			return a;
		},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 100, className : "stx.parse.pack.ParserLift", methodName : "and_"})),function(str) {
			switch(str) {
			case ".":
				return stx_parse_pack_Parser.Failed("not a term",null,{ fileName : "src/main/haxe/stx/parse/path/Base.hx", lineNumber : 62, className : "stx.parse.path.Base", methodName : "p_term"});
			case "..":
				return stx_parse_pack_Parser.Failed("not a term",null,{ fileName : "src/main/haxe/stx/parse/path/Base.hx", lineNumber : 63, className : "stx.parse.path.Base", methodName : "p_term"});
			default:
				var all = str.split(".");
				var ext = null;
				if(all.length > 1 && all[1] != null && str != ".") {
					ext = all.pop();
				}
				if(ext == null) {
					return stx_parse_pack_Parser.Succeed(stx_parse_term_TokenSum.FPTDown(str),{ fileName : "src/main/haxe/stx/parse/path/Base.hx", lineNumber : 71, className : "stx.parse.path.Base", methodName : "p_term"});
				} else {
					return stx_parse_pack_Parser.Succeed(stx_parse_term_TokenSum.FPTFile(all.join("."),ext),{ fileName : "src/main/haxe/stx/parse/path/Base.hx", lineNumber : 73, className : "stx.parse.path.Base", methodName : "p_term"});
				}
			}
		},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 91, className : "stx.parse.pack.ParserLift", methodName : "and_then"}));
	}
	,p_junction: function() {
		return stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Or(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Or(this.p_term(),this.p_up,{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 82, className : "stx.parse.pack.ParserLift", methodName : "or"})),this.p_down(),{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 82, className : "stx.parse.pack.ParserLift", methodName : "or"}));
	}
	,p_down: function() {
		return stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Then(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_With(this.p_path_chars(),stx_LiftParse.not(stx_LiftParse.id(":")),function(a,_) {
			return a;
		},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 100, className : "stx.parse.pack.ParserLift", methodName : "and_"})),function(str) {
			return stx_parse_term_TokenSum.FPTDown(str);
		},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 88, className : "stx.parse.pack.ParserLift", methodName : "then"}));
	}
	,p_abs: function() {
		var p1 = this.p_root();
		var p11 = this.p_junction();
		var next = stx_parse_pack_Parser.get_self(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Many(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_With(this.p_sep(),p11,function(l,r) {
			return stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,l,r);
		},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 103, className : "stx.parse.pack.ParserLift", methodName : "and"})),{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 94, className : "stx.parse.pack.ParserLift", methodName : "many"})));
		return stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Then(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_With(p1,stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_OptionP(stx_parse_pack_Parser.get_self(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Or(stx_parse_pack_Parser.get_self(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Then(stx_parse_pack_Parser.get_self(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_With(p11,next,function(l,r) {
			return stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,l,r);
		},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 103, className : "stx.parse.pack.ParserLift", methodName : "and"}))),function(t) {
			var fst = stx_core_pack_CoupleLift.fst(t);
			var snd = Lambda.array(Lambda.flatMap(stx_core_pack_CoupleLift.snd(t),function(tp) {
				return [stx_core_pack_CoupleLift.fst(tp),stx_core_pack_CoupleLift.snd(tp)];
			}));
			var out = [stx_core_pack_CoupleLift.fst(t)].concat(snd);
			return out;
		},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 88, className : "stx.parse.pack.ParserLift", methodName : "then"}))),stx_parse_pack_parser_term_Succeed.pure([]),{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 82, className : "stx.parse.pack.ParserLift", methodName : "or"}))),{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 180, className : "stx.parse.pack.ParserLift", methodName : "option"})),function(l,r) {
			return stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,l,r);
		},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 103, className : "stx.parse.pack.ParserLift", methodName : "and"})),function(t) {
			var _g = stx_core_pack_CoupleLift.cat(t);
			if(_g.length == 2) {
				var _g1 = stx_core_pack_Array.get(_g,1);
				var _g2 = stx_core_pack_Array.get(_g,0);
				if(_g2._hx_index == 0) {
					if(_g1._hx_index == 1) {
						var tk = _g2.v;
						var b2_opt_arr = _g1.v;
						var out = [];
						var _g = 0;
						var _g1 = tk;
						while(_g < _g1.length) {
							var v = _g1[_g];
							++_g;
							out.push(v);
						}
						if(b2_opt_arr._hx_index == 0) {
							var v = b2_opt_arr.v;
							var _g = 0;
							while(_g < v.length) {
								var v0 = v[_g];
								++_g;
								out.push(v0);
							}
						}
						return out;
					} else {
						return [];
					}
				} else {
					return [];
				}
			} else {
				return [];
			}
		},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 88, className : "stx.parse.pack.ParserLift", methodName : "then"}));
	}
	,p_rel_root: function() {
		return stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Then(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_With(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_With(stx_LiftParse.id("."),stx_LiftParse.not(stx_LiftParse.id(".")),function(a,_) {
			return a;
		},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 100, className : "stx.parse.pack.ParserLift", methodName : "and_"})),stx_LiftParse.not(this.p_sep()),function(l,r) {
			return stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,l,r);
		},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 103, className : "stx.parse.pack.ParserLift", methodName : "and"})),function(_) {
			return stx_parse_term_TokenSum.FPTRel;
		},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 88, className : "stx.parse.pack.ParserLift", methodName : "then"}));
	}
	,p_rel: function() {
		var p1 = stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_With(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Or(this.p_rel_root(),this.p_junction(),{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 82, className : "stx.parse.pack.ParserLift", methodName : "or"})),stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_OptionP(this.p_sep(),{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 180, className : "stx.parse.pack.ParserLift", methodName : "option"})),function(l,r) {
			return stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,l,r);
		},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 103, className : "stx.parse.pack.ParserLift", methodName : "and"}));
		var p11 = this.p_up;
		var next = stx_parse_pack_Parser.get_self(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Many(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_With(this.p_sep(),p11,function(l,r) {
			return stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,l,r);
		},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 103, className : "stx.parse.pack.ParserLift", methodName : "and"})),{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 94, className : "stx.parse.pack.ParserLift", methodName : "many"})));
		var p12 = stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_With(stx_parse_pack_Parser.get_self(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Or(stx_parse_pack_Parser.get_self(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Then(stx_parse_pack_Parser.get_self(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_With(p11,next,function(l,r) {
			return stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,l,r);
		},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 103, className : "stx.parse.pack.ParserLift", methodName : "and"}))),function(t) {
			var fst = stx_core_pack_CoupleLift.fst(t);
			var snd = Lambda.array(Lambda.flatMap(stx_core_pack_CoupleLift.snd(t),function(tp) {
				return [stx_core_pack_CoupleLift.fst(tp),stx_core_pack_CoupleLift.snd(tp)];
			}));
			var out = [stx_core_pack_CoupleLift.fst(t)].concat(snd);
			return out;
		},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 88, className : "stx.parse.pack.ParserLift", methodName : "then"}))),stx_parse_pack_parser_term_Succeed.pure([]),{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 82, className : "stx.parse.pack.ParserLift", methodName : "or"}))),this.p_sep(),function(a,_) {
			return a;
		},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 100, className : "stx.parse.pack.ParserLift", methodName : "and_"}));
		var p11 = this.p_junction();
		var next = stx_parse_pack_Parser.get_self(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Many(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_With(this.p_sep(),p11,function(l,r) {
			return stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,l,r);
		},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 103, className : "stx.parse.pack.ParserLift", methodName : "and"})),{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 94, className : "stx.parse.pack.ParserLift", methodName : "many"})));
		var p13 = stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_With(p12,stx_parse_pack_Parser.get_self(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Or(stx_parse_pack_Parser.get_self(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Then(stx_parse_pack_Parser.get_self(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_With(p11,next,function(l,r) {
			return stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,l,r);
		},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 103, className : "stx.parse.pack.ParserLift", methodName : "and"}))),function(t) {
			var fst = stx_core_pack_CoupleLift.fst(t);
			var snd = Lambda.array(Lambda.flatMap(stx_core_pack_CoupleLift.snd(t),function(tp) {
				return [stx_core_pack_CoupleLift.fst(tp),stx_core_pack_CoupleLift.snd(tp)];
			}));
			var out = [stx_core_pack_CoupleLift.fst(t)].concat(snd);
			return out;
		},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 88, className : "stx.parse.pack.ParserLift", methodName : "then"}))),stx_parse_pack_parser_term_Succeed.pure([]),{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 82, className : "stx.parse.pack.ParserLift", methodName : "or"}))),function(a,b) {
			return a.concat(b);
		},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 113, className : "stx.parse.pack.ParserLift", methodName : "and_with"}));
		var p11 = this.p_junction();
		var next = stx_parse_pack_Parser.get_self(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Many(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_With(this.p_sep(),p11,function(l,r) {
			return stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,l,r);
		},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 103, className : "stx.parse.pack.ParserLift", methodName : "and"})),{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 94, className : "stx.parse.pack.ParserLift", methodName : "many"})));
		return stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Then(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_With(p1,stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_OptionP(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Or(p13,stx_parse_pack_Parser.get_self(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Or(stx_parse_pack_Parser.get_self(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Then(stx_parse_pack_Parser.get_self(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_With(p11,next,function(l,r) {
			return stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,l,r);
		},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 103, className : "stx.parse.pack.ParserLift", methodName : "and"}))),function(t) {
			var fst = stx_core_pack_CoupleLift.fst(t);
			var snd = Lambda.array(Lambda.flatMap(stx_core_pack_CoupleLift.snd(t),function(tp) {
				return [stx_core_pack_CoupleLift.fst(tp),stx_core_pack_CoupleLift.snd(tp)];
			}));
			var out = [stx_core_pack_CoupleLift.fst(t)].concat(snd);
			return out;
		},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 88, className : "stx.parse.pack.ParserLift", methodName : "then"}))),stx_parse_pack_parser_term_Succeed.pure([]),{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 82, className : "stx.parse.pack.ParserLift", methodName : "or"}))),{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 82, className : "stx.parse.pack.ParserLift", methodName : "or"})),{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 180, className : "stx.parse.pack.ParserLift", methodName : "option"})),function(l,r) {
			return stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,l,r);
		},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 103, className : "stx.parse.pack.ParserLift", methodName : "and"})),function(tp) {
			return stx_core_pack_CoupleLift.decouple(tp,function(tp,c) {
				return stx_core_pack_CoupleLift.decouple(tp,function(a,b) {
					if(a == null) {
						switch(b._hx_index) {
						case 0:
							var _g = b.v;
							switch(c._hx_index) {
							case 0:
								var tail = _g;
								var v = c.v;
								var head = a;
								return [head,tail].concat(v);
							case 1:
								var tail = _g;
								var head = a;
								return [head,tail];
							}
							break;
						case 1:
							switch(c._hx_index) {
							case 0:
								var v = c.v;
								return [stx_parse_term_TokenSum.FPTRel].concat(v);
							case 1:
								return [stx_parse_term_TokenSum.FPTRel];
							}
							break;
						}
					} else {
						switch(b._hx_index) {
						case 0:
							var _g = b.v;
							switch(c._hx_index) {
							case 0:
								var tail = _g;
								var v = c.v;
								var head = a;
								return [head,tail].concat(v);
							case 1:
								var tail = _g;
								var head = a;
								return [head,tail];
							}
							break;
						case 1:
							switch(c._hx_index) {
							case 0:
								var v = c.v;
								var head = a;
								return [head].concat(v);
							case 1:
								var head = a;
								return [head];
							}
							break;
						}
					}
				});
			});
		},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 88, className : "stx.parse.pack.ParserLift", methodName : "then"}));
	}
	,p_path: function() {
		return stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_With(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Or(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Then(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_With(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Or(this.p_rel(),this.p_abs(),{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 82, className : "stx.parse.pack.ParserLift", methodName : "or"})),stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_OptionP(this.p_sep(),{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 180, className : "stx.parse.pack.ParserLift", methodName : "option"})),function(l,r) {
			return stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,l,r);
		},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 103, className : "stx.parse.pack.ParserLift", methodName : "and"})),function(tp) {
			var l = stx_core_pack_CoupleLift.fst(tp);
			var r = stx_core_pack_CoupleLift.snd(tp);
			switch(r._hx_index) {
			case 0:
				var v = r.v;
				return l.concat([v]);
			case 1:
				return l;
			}
		},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 88, className : "stx.parse.pack.ParserLift", methodName : "then"})),stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Then(this.p_term(),function(x) {
			return [x];
		},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 88, className : "stx.parse.pack.ParserLift", methodName : "then"})),{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 82, className : "stx.parse.pack.ParserLift", methodName : "or"})),stx_LiftParse.lookahead(stx_Parse.eof()),function(a,_) {
			return a;
		},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 100, className : "stx.parse.pack.ParserLift", methodName : "and_"}));
	}
	,parse: function(i) {
		return this.p_path().parse(i);
	}
	,format: function(arr) {
		var o = stx_core_pack_ArrayLift.lfold(arr,function(e,init) {
			switch(e._hx_index) {
			case 0:
				var _g = e.name;
				if(_g._hx_index == 0) {
					var root = _g.v;
					init.push(root);
				}
				break;
			case 2:
				if(init.length > 1) {
					init.pop();
				}
				break;
			case 4:
				var str = e.str;
				init.push(str);
				break;
			default:
			}
			return init;
		},[]);
		return o;
	}
	,toString: function(n) {
		switch(n._hx_index) {
		case 0:
			var _g = n.name;
			switch(_g._hx_index) {
			case 0:
				var root = _g.v;
				return root;
			case 1:
				return stx_fs_path_pack_Separator.toString(this.separator());
			}
			break;
		case 1:
			return ".";
		case 2:
			return "..";
		case 3:
			return stx_fs_path_pack_Separator.toString(this.separator());
		case 4:
			var str = n.str;
			return str;
		case 5:
			var _g = n.ext;
			var _g1 = n.str;
			if(_g == null) {
				var str = _g1;
				return str;
			} else {
				var str = _g1;
				var ext = _g;
				return "" + str + "." + ext;
			}
			break;
		}
	}
	,asBase: function() {
		return this;
	}
	,__class__: stx_parse_path_Base
};
var stx_parse_path_PathParseFailure = $hxEnums["stx.parse.path.PathParseFailure"] = { __ename__ : "stx.parse.path.PathParseFailure", __constructs__ : ["MalformedSource","MalformedRaw","NoHeadNode","MisplacedHeadNode","UnexpectedDenormalisedPath","UnexpectedFileInDirectory","ExpectedRelativePath","NoFileFoundOnAttachment","NoFileOnPath"]
	,MalformedSource: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"stx.parse.path.PathParseFailure",toString:$estr}; },$_.__params__ = ["v"],$_)
	,MalformedRaw: ($_=function(raw) { return {_hx_index:1,raw:raw,__enum__:"stx.parse.path.PathParseFailure",toString:$estr}; },$_.__params__ = ["raw"],$_)
	,NoHeadNode: {_hx_index:2,__enum__:"stx.parse.path.PathParseFailure",toString:$estr}
	,MisplacedHeadNode: {_hx_index:3,__enum__:"stx.parse.path.PathParseFailure",toString:$estr}
	,UnexpectedDenormalisedPath: ($_=function(raw) { return {_hx_index:4,raw:raw,__enum__:"stx.parse.path.PathParseFailure",toString:$estr}; },$_.__params__ = ["raw"],$_)
	,UnexpectedFileInDirectory: ($_=function(raw) { return {_hx_index:5,raw:raw,__enum__:"stx.parse.path.PathParseFailure",toString:$estr}; },$_.__params__ = ["raw"],$_)
	,ExpectedRelativePath: ($_=function(raw) { return {_hx_index:6,raw:raw,__enum__:"stx.parse.path.PathParseFailure",toString:$estr}; },$_.__params__ = ["raw"],$_)
	,NoFileFoundOnAttachment: ($_=function(raw) { return {_hx_index:7,raw:raw,__enum__:"stx.parse.path.PathParseFailure",toString:$estr}; },$_.__params__ = ["raw"],$_)
	,NoFileOnPath: ($_=function(raw) { return {_hx_index:8,raw:raw,__enum__:"stx.parse.path.PathParseFailure",toString:$estr}; },$_.__params__ = ["raw"],$_)
};
var stx_parse_path_Posix = function() {
	stx_parse_path_Base.call(this,false);
};
stx_parse_path_Posix.__name__ = "stx.parse.path.Posix";
stx_parse_path_Posix.__super__ = stx_parse_path_Base;
stx_parse_path_Posix.prototype = $extend(stx_parse_path_Base.prototype,{
	__class__: stx_parse_path_Posix
});
var stx_parse_path_Windows = function() {
	stx_parse_path_Base.call(this,true);
};
stx_parse_path_Windows.__name__ = "stx.parse.path.Windows";
stx_parse_path_Windows.__super__ = stx_parse_path_Base;
stx_parse_path_Windows.prototype = $extend(stx_parse_path_Base.prototype,{
	__class__: stx_parse_path_Windows
});
var stx_parse_term_JsonSum = $hxEnums["stx.parse.term.JsonSum"] = { __ename__ : "stx.parse.term.JsonSum", __constructs__ : ["JsObject","JsArray","JsData"]
	,JsObject: ($_=function(record) { return {_hx_index:0,record:record,__enum__:"stx.parse.term.JsonSum",toString:$estr}; },$_.__params__ = ["record"],$_)
	,JsArray: ($_=function(array) { return {_hx_index:1,array:array,__enum__:"stx.parse.term.JsonSum",toString:$estr}; },$_.__params__ = ["array"],$_)
	,JsData: ($_=function(x) { return {_hx_index:2,x:x,__enum__:"stx.parse.term.JsonSum",toString:$estr}; },$_.__params__ = ["x"],$_)
};
var stx_parse_term_Json = function() {
};
stx_parse_term_Json.__name__ = "stx.parse.term.Json";
stx_parse_term_Json.spaced = function(p) {
	var p1 = stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_With(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Many(stx_Parse.whitespace,{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 94, className : "stx.parse.pack.ParserLift", methodName : "many"})),p,function(_,b) {
		return b;
	},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 113, className : "stx.parse.pack.ParserLift", methodName : "and_with"}));
	var tag = "spaced: (" + stx_core_pack_OptionLift.defv(p.tag,"") + ")";
	p1.tag = haxe_ds_Option.Some(tag);
	var name = tag;
	return stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_ErrorTransformer(p1,function(err) {
		return err.map(function(info) {
			return stx_parse_pack_ParseErrorInfo.tag(info,name);
		});
	},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 165, className : "stx.parse.pack.ParserLift", methodName : "with_error_tag"}));
};
stx_parse_term_Json.prototype = {
	value_p: function() {
		return stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Ors([this.parser(),stx_parse_term_Json.data_p,this.array_p()],{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 85, className : "stx.parse.pack.ParserLift", methodName : "ors"}));
	}
	,array_p: function() {
		return stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Then(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_With(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_With(stx_parse_term_Json.l_brkt_p,stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_RepSep(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_LAnon($bind(this,this.value_p))),stx_parse_term_Json.comma_p,{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 162, className : "stx.parse.pack.ParserLift", methodName : "repsep"})),function(_,b) {
			return b;
		},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 113, className : "stx.parse.pack.ParserLift", methodName : "and_with"})),stx_parse_term_Json.r_brkt_p,function(a,_) {
			return a;
		},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 100, className : "stx.parse.pack.ParserLift", methodName : "and_"})),stx_parse_term_JsonSum.JsArray,{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 88, className : "stx.parse.pack.ParserLift", methodName : "then"}));
	}
	,entry_p: function() {
		return stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_With(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_With(stx_parse_term_Json.ident_p,stx_parse_term_Json.spaced(stx_LiftParse.id(":")),function(a,_) {
			return a;
		},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 100, className : "stx.parse.pack.ParserLift", methodName : "and_"})),this.value_p(),function(l,r) {
			return stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,l,r);
		},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 103, className : "stx.parse.pack.ParserLift", methodName : "and"}));
	}
	,entries_p: function() {
		return stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Commit(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_RepSep(this.entry_p(),stx_parse_term_Json.comma_p,{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 162, className : "stx.parse.pack.ParserLift", methodName : "repsep"})),{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 116, className : "stx.parse.pack.ParserLift", methodName : "commit"}));
	}
	,parser: function() {
		var _gthis = this;
		var p = stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_LAnon(function() {
			return stx_parse_pack_Parser.get_self(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Then(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_With(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_With(stx_parse_term_Json.l_acc_p,_gthis.entries_p(),function(_,b) {
				return b;
			},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 113, className : "stx.parse.pack.ParserLift", methodName : "and_with"})),stx_parse_term_Json.r_acc_p,function(a,_) {
				return a;
			},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 100, className : "stx.parse.pack.ParserLift", methodName : "and_"})),stx_parse_term_JsonSum.JsObject,{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 88, className : "stx.parse.pack.ParserLift", methodName : "then"})));
		}));
		p.tag = haxe_ds_Option.Some("json");
		var name = "json";
		return stx_parse_pack_LRLift.memo(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_ErrorTransformer(p,function(err) {
			return err.map(function(info) {
				return stx_parse_pack_ParseErrorInfo.tag(info,name);
			});
		},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 165, className : "stx.parse.pack.ParserLift", methodName : "with_error_tag"})));
	}
	,parse: function(ipt) {
		return stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_With(this.parser(),stx_Parse.eof(),function(a,_) {
			return a;
		},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 100, className : "stx.parse.pack.ParserLift", methodName : "and_"})).parse(ipt);
	}
	,__class__: stx_parse_term_Json
};
var stx_parse_term_ParseApi = function() { };
stx_parse_term_ParseApi.__name__ = "stx.parse.term.ParseApi";
stx_parse_term_ParseApi.__isInterface__ = true;
stx_parse_term_ParseApi.prototype = {
	parse: null
	,__class__: stx_parse_term_ParseApi
};
var stx_parse_term_TokenSum = $hxEnums["stx.parse.term.TokenSum"] = { __ename__ : "stx.parse.term.TokenSum", __constructs__ : ["FPTDrive","FPTRel","FPTUp","FPTSep","FPTDown","FPTFile"]
	,FPTDrive: ($_=function(name) { return {_hx_index:0,name:name,__enum__:"stx.parse.term.TokenSum",toString:$estr}; },$_.__params__ = ["name"],$_)
	,FPTRel: {_hx_index:1,__enum__:"stx.parse.term.TokenSum",toString:$estr}
	,FPTUp: {_hx_index:2,__enum__:"stx.parse.term.TokenSum",toString:$estr}
	,FPTSep: {_hx_index:3,__enum__:"stx.parse.term.TokenSum",toString:$estr}
	,FPTDown: ($_=function(str) { return {_hx_index:4,str:str,__enum__:"stx.parse.term.TokenSum",toString:$estr}; },$_.__params__ = ["str"],$_)
	,FPTFile: ($_=function(str,ext) { return {_hx_index:5,str:str,ext:ext,__enum__:"stx.parse.term.TokenSum",toString:$estr}; },$_.__params__ = ["str","ext"],$_)
};
var stx_parse_test_Expr = $hxEnums["stx.parse.test.Expr"] = { __ename__ : "stx.parse.test.Expr", __constructs__ : ["Mult","Plus","Num"]
	,Mult: ($_=function(l,r) { return {_hx_index:0,l:l,r:r,__enum__:"stx.parse.test.Expr",toString:$estr}; },$_.__params__ = ["l","r"],$_)
	,Plus: ($_=function(l,r) { return {_hx_index:1,l:l,r:r,__enum__:"stx.parse.test.Expr",toString:$estr}; },$_.__params__ = ["l","r"],$_)
	,Num: ($_=function(v) { return {_hx_index:2,v:v,__enum__:"stx.parse.test.Expr",toString:$estr}; },$_.__params__ = ["v"],$_)
};
var stx_parse_test_SimpleParser = function() {
};
stx_parse_test_SimpleParser.__name__ = "stx.parse.test.SimpleParser";
stx_parse_test_SimpleParser.test = function() {
	haxe_Log.trace("test",{ fileName : "stx/parse/test/SimpleParser.hx", lineNumber : 5, className : "stx.parse.test.SimpleParser", methodName : "test"});
	var a = new stx_parse_test_SimpleParser();
	a.testRecur();
};
stx_parse_test_SimpleParser.p_mult = function() {
	return stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Then(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_With(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_With(stx_parse_test_SimpleParser.p_expr,stx_parse_test_SimpleParser.p_star_id,function(a,_) {
		return a;
	},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 100, className : "stx.parse.pack.ParserLift", methodName : "and_"})),stx_parse_test_SimpleParser.p_expr,function(l,r) {
		return stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,l,r);
	},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 103, className : "stx.parse.pack.ParserLift", methodName : "and"})),function(tp) {
		return stx_parse_test_Expr.Mult(stx_core_pack_CoupleLift.fst(tp),stx_core_pack_CoupleLift.snd(tp));
	},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 88, className : "stx.parse.pack.ParserLift", methodName : "then"}));
};
stx_parse_test_SimpleParser.p_plus = function() {
	return stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Then(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_With(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_With(stx_parse_test_SimpleParser.p_expr,stx_parse_test_SimpleParser.p_plus_id,function(a,_) {
		return a;
	},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 100, className : "stx.parse.pack.ParserLift", methodName : "and_"})),stx_parse_test_SimpleParser.p_expr,function(l,r) {
		return stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,l,r);
	},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 103, className : "stx.parse.pack.ParserLift", methodName : "and"})),function(tp) {
		return stx_parse_test_Expr.Plus(stx_core_pack_CoupleLift.fst(tp),stx_core_pack_CoupleLift.snd(tp));
	},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 88, className : "stx.parse.pack.ParserLift", methodName : "then"}));
};
stx_parse_test_SimpleParser.prototype = {
	testIdentitifierSuccess: function() {
		var b = "test";
		var c = stx_parse_test_SimpleParser.test_id.parse(stx_parse_pack_Input.pure(stx_parse_pack_Enumerable.string(b)));
		this.shouldSucceed(c);
		haxe_Log.trace(c == null ? "null" : stx_parse_pack_ParseResult.toString(c),{ fileName : "stx/parse/test/SimpleParser.hx", lineNumber : 20, className : "stx.parse.test.SimpleParser", methodName : "testIdentitifierSuccess"});
	}
	,testOption: function() {
		var b = "tes";
		var c = stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_OptionP(stx_parse_test_SimpleParser.test_id,{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 180, className : "stx.parse.pack.ParserLift", methodName : "option"})).parse(stx_parse_pack_Input.pure(stx_parse_pack_Enumerable.string(b)));
		this.shouldSucceed(c);
	}
	,testRegex: function() {
		var b = "aaaa";
		var c = stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Regex("a+",{ fileName : "stx/Parse.hx", lineNumber : 172, className : "stx.LiftParse", methodName : "regex"})).parse(stx_parse_pack_Input.pure(stx_parse_pack_Enumerable.string(b)));
		this.shouldSucceed(c);
	}
	,shouldSucceed: function(v) {
	}
	,testRecur: function() {
		var t = "1+2+3x4x9x10";
		haxe_Log.trace(t,{ fileName : "stx/parse/test/SimpleParser.hx", lineNumber : 37, className : "stx.parse.test.SimpleParser", methodName : "testRecur"});
		var o = stx_parse_test_SimpleParser.p_expr.parse(stx_parse_pack_Input.pure(stx_parse_pack_Enumerable.string(t)));
		haxe_Log.trace(o == null ? "null" : stx_parse_pack_ParseResult.toString(o),{ fileName : "stx/parse/test/SimpleParser.hx", lineNumber : 39, className : "stx.parse.test.SimpleParser", methodName : "testRecur"});
		this.shouldSucceed(o);
	}
	,__class__: stx_parse_test_SimpleParser
};
var stx_parse_test_Test = function() { };
stx_parse_test_Test.__name__ = "stx.parse.test.Test";
stx_parse_test_Test.main = function() {
	stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Base(null,{ fileName : "stx/parse/test/Test.hx", lineNumber : 7, className : "stx.parse.test.Test", methodName : "main"}));
	stx_parse_test_SimpleParser.test();
};
var stx_run_pack_Act = {};
stx_run_pack_Act._new = function(fn) {
	var this1 = fn;
	return this1;
};
stx_run_pack_Act.Delay = function(milliseconds) {
	return new stx_run_pack_act_term_Delay(milliseconds).asActApi();
};
stx_run_pack_Act.Anon = function(fn) {
	return new stx_run_pack_act_term_Anon(fn).asActApi();
};
stx_run_pack_Act.Defer = function() {
	return new stx_run_pack_act_term_Defer().asActApi();
};
stx_run_pack_Act.MainThread = function() {
	return new stx_run_pack_act_term_MainThread().asActApi();
};
var stx_run_pack_AutomationError = function(data,prev,pos) {
	stx_core_pack_Err.call(this,data,prev,pos);
};
stx_run_pack_AutomationError.__name__ = "stx.run.pack.AutomationError";
stx_run_pack_AutomationError.make = function(data,prev,pos) {
	var message = Std.string(data);
	return new stx_run_pack_AutomationError(haxe_ds_Option.Some(stx_core_pack_Failure.ERR_OF(data)),prev,pos);
};
stx_run_pack_AutomationError.__super__ = stx_core_pack_Err;
stx_run_pack_AutomationError.prototype = $extend(stx_core_pack_Err.prototype,{
	get_uuid: function() {
		return stx_run_pack_AutomationError.UUID;
	}
	,__class__: stx_run_pack_AutomationError
});
var stx_run_pack_AutomationFailure = $hxEnums["stx.run.pack.AutomationFailure"] = { __ename__ : "stx.run.pack.AutomationFailure", __constructs__ : ["E_NoValueFound","E_UnknownAutomation","E_StackOverflow","E_Automation","E_Timeout","E_Escape","E_LaterCalledTooLate"]
	,E_NoValueFound: {_hx_index:0,__enum__:"stx.run.pack.AutomationFailure",toString:$estr}
	,E_UnknownAutomation: ($_=function(e) { return {_hx_index:1,e:e,__enum__:"stx.run.pack.AutomationFailure",toString:$estr}; },$_.__params__ = ["e"],$_)
	,E_StackOverflow: {_hx_index:2,__enum__:"stx.run.pack.AutomationFailure",toString:$estr}
	,E_Automation: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"stx.run.pack.AutomationFailure",toString:$estr}; },$_.__params__ = ["e"],$_)
	,E_Timeout: ($_=function(float) { return {_hx_index:4,float:float,__enum__:"stx.run.pack.AutomationFailure",toString:$estr}; },$_.__params__ = ["float"],$_)
	,E_Escape: ($_=function(pos) { return {_hx_index:5,pos:pos,__enum__:"stx.run.pack.AutomationFailure",toString:$estr}; },$_.__params__ = ["pos"],$_)
	,E_LaterCalledTooLate: {_hx_index:6,__enum__:"stx.run.pack.AutomationFailure",toString:$estr}
};
var stx_run_pack_Backoff = function(timer,delta) {
	if(delta == null) {
		delta = 200;
	}
	this.timer = stx_core_pack_OptionLift.defv(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,timer),stx_LiftRun.timer(stx_core_pack_Wildcard.__));
	this.delta = delta;
};
stx_run_pack_Backoff.__name__ = "stx.run.pack.Backoff";
stx_run_pack_Backoff.unit = function() {
	return new stx_run_pack_Backoff(stx_run_pack_Timer.unit());
};
stx_run_pack_Backoff.prototype = {
	timer: null
	,delta: null
	,next: function() {
		return new stx_run_pack_Backoff(this.timer,Math.round(this.delta / 1000 * stx_run_pack_Seconds.prj(1.2) * 1000));
	}
	,over: function() {
		return new stx_run_pack_Backoff(stx_run_pack_Timer.unit());
	}
	,roll: function() {
		var n = this.next();
		this.delta = n.delta;
	}
	,ready: function() {
		return !(this.timer.created + stx_run_pack_Seconds.prj(this.delta / 1000) >= stx_run_pack_Seconds.prj(stx_run_pack_Timer.unit().created));
	}
	,now: function() {
		return stx_run_pack_Timer.unit().created;
	}
	,__class__: stx_run_pack_Backoff
};
var stx_run_pack_Clock = {};
stx_run_pack_Clock._new = function() {
	var this1 = new stx_run_pack__$Clock_ClockImp();
	return this1;
};
var stx_run_pack__$Clock_ClockImp = function(start) {
	this.start = stx_core_pack_OptionLift.defv(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,start),this.stamp());
};
stx_run_pack__$Clock_ClockImp.__name__ = "stx.run.pack._Clock.ClockImp";
stx_run_pack__$Clock_ClockImp.prototype = {
	start: null
	,pure: function(start) {
		return new stx_run_pack__$Clock_ClockImp(start);
	}
	,unit: function() {
		return this.pure(this.stamp());
	}
	,delta: function() {
		return this.stamp() - stx_run_pack_Seconds.prj(this.start);
	}
	,stamp: function() {
		var hrtime = process.hrtime();
		return hrtime[0] + hrtime[1] / 1e9;
	}
	,step: function() {
		return this.unit();
	}
	,__class__: stx_run_pack__$Clock_ClockImp
};
var stx_run_pack_MilliSeconds = {};
stx_run_pack_MilliSeconds.toSeconds = function(this1) {
	return this1 / 1000;
};
stx_run_pack_MilliSeconds.mul = function(this1,f) {
	return this1 / 1000 * stx_run_pack_Seconds.prj(f);
};
stx_run_pack_MilliSeconds.gt = function(this1,that) {
	return this1 > stx_run_pack_MilliSeconds.prj(that);
};
stx_run_pack_MilliSeconds.gteq = function(this1,that) {
	return this1 >= stx_run_pack_MilliSeconds.prj(that);
};
stx_run_pack_MilliSeconds.lt = function(this1,that) {
	return this1 < stx_run_pack_MilliSeconds.prj(that);
};
stx_run_pack_MilliSeconds.lteq = function(this1,that) {
	return this1 < stx_run_pack_MilliSeconds.prj(that);
};
stx_run_pack_MilliSeconds.prj = function(this1) {
	return this1;
};
var stx_run_pack_Module = function() {
};
stx_run_pack_Module.__name__ = "stx.run.pack.Module";
stx_run_pack_Module.prototype = {
	__class__: stx_run_pack_Module
};
var stx_run_pack_NextSum = $hxEnums["stx.run.pack.NextSum"] = { __ename__ : "stx.run.pack.NextSum", __constructs__ : ["Busy","Poll","Fail","Exit"]
	,Busy: {_hx_index:0,__enum__:"stx.run.pack.NextSum",toString:$estr}
	,Poll: ($_=function(milliseconds) { return {_hx_index:1,milliseconds:milliseconds,__enum__:"stx.run.pack.NextSum",toString:$estr}; },$_.__params__ = ["milliseconds"],$_)
	,Fail: ($_=function(e) { return {_hx_index:2,e:e,__enum__:"stx.run.pack.NextSum",toString:$estr}; },$_.__params__ = ["e"],$_)
	,Exit: {_hx_index:3,__enum__:"stx.run.pack.NextSum",toString:$estr}
};
var stx_run_pack_Profile = function(timer,limit,repeats,changed,modified,progress,references) {
	if(references == null) {
		references = 0;
	}
	if(changed == null) {
		changed = 0;
	}
	if(repeats == null) {
		repeats = 0;
	}
	this.limit = stx_core_pack_OptionLift.defv(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,limit),{ });
	var tmp = stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,this.limit.unchanged);
	this.limit.unchanged = stx_core_pack_OptionLift.defv(tmp,Number.MAX_SAFE_INTEGER);
	var tmp = stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,this.limit.duration);
	this.limit.duration = stx_core_pack_OptionLift.defv(tmp,Number.MAX_SAFE_INTEGER);
	var tmp = stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,this.limit.duration);
	this.limit.hanging = stx_core_pack_OptionLift.defv(tmp,Number.MAX_SAFE_INTEGER);
	this.timer = stx_core_pack_OptionLift.def(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,timer),stx_run_pack_Timer.unit);
	this.repeats = repeats;
	this.changed = changed;
	this.progress = progress;
	this.modified = stx_core_pack_OptionLift.def(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,modified),stx_run_pack_Timer.mark);
	this.references = 0;
};
stx_run_pack_Profile.__name__ = "stx.run.pack.Profile";
stx_run_pack_Profile.conf = function(limit) {
	return new stx_run_pack_Profile(null,limit);
};
stx_run_pack_Profile.prototype = {
	references: null
	,timer: null
	,progress: null
	,limit: null
	,repeats: null
	,changed: null
	,modified: null
	,copy: function(timer,limit,repeats,changed,modified,progress,references) {
		return new stx_run_pack_Profile(stx_core_pack_OptionLift.defv(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,timer),this.timer),stx_core_pack_OptionLift.defv(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,limit),this.limit),stx_core_pack_OptionLift.defv(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,repeats),this.repeats),stx_core_pack_OptionLift.defv(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,changed),this.changed),stx_core_pack_OptionLift.defv(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,modified),this.modified),stx_core_pack_OptionLift.defv(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,progress),this.progress),stx_core_pack_OptionLift.defv(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,references),this.references));
	}
	,next: function(progress) {
		var _gthis = this;
		return stx_core_use_UseNano.if_else(stx_fn_Block.equals(this.progress,progress),function() {
			return _gthis.repeat();
		},function() {
			return _gthis.change();
		});
	}
	,roll: function(progress) {
		var n = this.next(progress);
		this.repeats = n.repeats;
		this.changed = n.changed;
		this.modified = n.modified;
		this.progress = progress;
	}
	,test: function() {
		var since_creation = Math.round(stx_run_pack_Timer.since(this.timer) * 1000);
		var since_change = Math.round(stx_run_pack_Timer.since(stx_run_pack_Timer.pure(this.modified)) * 1000);
		var since_changed = this.repeats - this.changed;
		if(this.limit.duration > stx_run_pack_MilliSeconds.prj(since_creation) && this.limit.hanging > stx_run_pack_MilliSeconds.prj(since_change)) {
			return this.limit.unchanged > since_changed;
		} else {
			return false;
		}
	}
	,now: function() {
		return stx_run_pack_Timer.unit().created;
	}
	,repeat: function() {
		return new stx_run_pack_Profile(this.timer,this.limit,this.repeats + 1,this.changed,this.modified,this.progress,this.references);
	}
	,change: function() {
		return new stx_run_pack_Profile(this.timer,this.limit,this.repeats + 1,this.repeats + 1,null,this.progress,this.references);
	}
	,inc: function() {
		return new stx_run_pack_Profile(this.timer,this.limit,this.repeats,this.changed,this.modified,this.progress,this.references + 1);
	}
	,dec: function() {
		return new stx_run_pack_Profile(this.timer,this.limit,this.repeats,this.changed,this.modified,this.progress,this.references - 1);
	}
	,__class__: stx_run_pack_Profile
};
var stx_run_pack_Progress = {};
stx_run_pack_Progress._new = function(self) {
	var this1 = self;
	return this1;
};
stx_run_pack_Progress.error = function(this1) {
	if(this1._hx_index == 6) {
		var e = this1.e;
		return stx_core_pack_Report.fromStdOption(haxe_ds_Option.Some(e));
	} else {
		return stx_core_pack_Report.fromStdOption(haxe_ds_Option.None);
	}
};
stx_run_pack_Progress.is_less_than = function(this1,that) {
	if(this1._hx_index == 4) {
		if(that._hx_index == 4) {
			var a = this1.milliseconds;
			var b = that.milliseconds;
			return a < stx_run_pack_MilliSeconds.prj(b);
		} else {
			return this1._hx_index < that._hx_index;
		}
	} else {
		return this1._hx_index < that._hx_index;
	}
};
stx_run_pack_Progress.prj = function(this1) {
	return this1;
};
stx_run_pack_Progress.toProgression = function(this1) {
	return stx_run_pack_Progression.pure(this1);
};
stx_run_pack_Progress.is_polling = function(this1) {
	if(this1._hx_index == 4) {
		var _g = this1.milliseconds;
		return true;
	} else {
		return false;
	}
};
stx_run_pack_Progress.has_problem = function(this1) {
	if(this1._hx_index == 6) {
		var _g = this1.e;
		return true;
	} else {
		return false;
	}
};
stx_run_pack_Progress.get_ongoing = function(this1) {
	switch(this1._hx_index) {
	case 2:case 5:
		return true;
	case 3:
		var _g = this1.cb;
		return true;
	case 4:
		var _g = this1.milliseconds;
		return true;
	default:
		return false;
	}
};
var stx_run_pack_Progression = {};
stx_run_pack_Progression._new = function(self) {
	var this1 = self;
	return this1;
};
stx_run_pack_Progression.fromProgressSum = function(sum) {
	return stx_run_pack_Progression.pure(sum);
};
stx_run_pack_Progression.make = function(sum) {
	return stx_run_pack_Progression._new(stx_core_pack_Unique.pure(sum));
};
stx_run_pack_Progression.pure = function(sum) {
	return stx_run_pack_Progression.make(sum);
};
stx_run_pack_Progression.is_less_than = function(this1,that) {
	return stx_run_pack_Progress.is_less_than(this1.data,that.data);
};
stx_run_pack_Progression.error = function(this1) {
	return stx_run_pack_Progress.error(this1.data);
};
stx_run_pack_Progression.is_polling = function(this1) {
	return stx_run_pack_Progress.is_polling(this1.data);
};
stx_run_pack_Progression.has_problem = function(this1) {
	return stx_run_pack_Progress.has_problem(this1.data);
};
stx_run_pack_Progression.get_ongoing = function(this1) {
	return stx_run_pack_Progress.get_ongoing(this1.data);
};
var stx_run_pack_RecallLift = function() { };
stx_run_pack_RecallLift.__name__ = "stx.run.pack.RecallLift";
stx_run_pack_RecallLift.fulfill = function(self,i) {
	return new stx_run_pack_recall_term_Anon(function(_,cb) {
		return self.applyII(i,cb);
	}).asRecallDef();
};
stx_run_pack_RecallLift.deliver = function(self,cb) {
	return function(i) {
		return self.applyII(i,cb);
	};
};
stx_run_pack_RecallLift.map = function(self,fn) {
	return new stx_run_pack_recall_term_Anon(function(i,cont) {
		return self.applyII(i,function(o) {
			var tmp = fn(o);
			cont(tmp);
		});
	}).asRecallDef();
};
stx_run_pack_RecallLift.map_r = function(self,fn) {
	return new stx_run_pack_recall_term_Anon(function(i,cont) {
		var tmp = self.applyII(i,cont);
		return fn(tmp);
	}).asRecallDef();
};
var stx_run_pack_Recall = {};
stx_run_pack_Recall.fromThunk = function(fn) {
	return new stx_run_pack_recall_term_Anon(function(_,cont) {
		cont(fn());
	}).asRecallDef();
};
stx_run_pack_Recall.fromNoiseThunk = function(fn) {
	return new stx_run_pack_recall_term_Anon(function(_,cont) {
		cont(fn(tink_core_Noise.Noise));
	}).asRecallDef();
};
stx_run_pack_Recall.pure = function(o) {
	return new stx_run_pack_recall_term_Pure(o);
};
stx_run_pack_Recall.Anon = function(fn) {
	return new stx_run_pack_recall_term_Anon(fn).asRecallDef();
};
stx_run_pack_Recall.get_self = function(this1) {
	return this1;
};
var stx_run_pack_RuntimeApi = function() { };
stx_run_pack_RuntimeApi.__name__ = "stx.run.pack.RuntimeApi";
stx_run_pack_RuntimeApi.__isInterface__ = true;
stx_run_pack_RuntimeApi.prototype = {
	run: null
	,__class__: stx_run_pack_RuntimeApi
};
var stx_run_pack_RuntimeBase = function() {
	this.run(stx_run_pack_Scheduler.ZERO);
};
stx_run_pack_RuntimeBase.__name__ = "stx.run.pack.RuntimeBase";
stx_run_pack_RuntimeBase.__interfaces__ = [stx_run_pack_RuntimeApi];
stx_run_pack_RuntimeBase.prototype = {
	run: function(scheduler) {
		var event = null;
		event = haxe_MainLoop.add(function() {
			var status = scheduler.status();
			stx_log_pack_Log.trace(stx_log_pack_Log.close(stx_LiftLog.log(stx_core_pack_Wildcard.__)),"run: " + Std.string(status),{ fileName : "stx/run/pack/Runtime.hx", lineNumber : 18, className : "stx.run.pack.RuntimeBase", methodName : "run"});
			switch(status._hx_index) {
			case 0:
				scheduler.pursue();
				break;
			case 1:
				var milliseconds = status.milliseconds;
				scheduler.pursue();
				var event1 = milliseconds == null ? null : stx_run_pack_Seconds.prj(milliseconds / 1000);
				event.delay(event1);
				break;
			case 2:
				var e = status.e;
				event.stop();
				scheduler.escape();
				haxe_MainLoop.runInMainThread(function() {
					throw haxe_Exception.thrown(e);
				});
				break;
			case 3:
				event.stop();
				break;
			}
		});
	}
	,__class__: stx_run_pack_RuntimeBase
};
var stx_run_pack_SchedulerApi = function() { };
stx_run_pack_SchedulerApi.__name__ = "stx.run.pack.SchedulerApi";
stx_run_pack_SchedulerApi.__isInterface__ = true;
stx_run_pack_SchedulerApi.prototype = {
	put: null
	,status: null
	,pursue: null
	,escape: null
	,asSchedulerApi: null
	,__class__: stx_run_pack_SchedulerApi
};
var stx_run_pack_scheduler_term_Base = function() {
	this.error = haxe_ds_Option.None;
	this.picker = new stx_run_pack_scheduler_term_Picker();
};
stx_run_pack_scheduler_term_Base.__name__ = "stx.run.pack.scheduler.term.Base";
stx_run_pack_scheduler_term_Base.__interfaces__ = [stx_run_pack_SchedulerApi];
stx_run_pack_scheduler_term_Base.prototype = {
	picker: null
	,error: null
	,put: function(schedule) {
		stx_log_pack_Log.trace(stx_log_pack_Log.close(stx_LiftLog.log(stx_core_pack_Wildcard.__)),"Scheduler#put(schedule) " + Std.string(this),{ fileName : "stx/run/pack/scheduler/term/Base.hx", lineNumber : 17, className : "stx.run.pack.scheduler.term.Base", methodName : "put"});
		var sleeping = this.status();
		this.picker.put(schedule);
		if(sleeping._hx_index == 3) {
			stx_run_pack_Runtime.run(this);
		}
	}
	,status: function() {
		var _gthis = this;
		return stx_core_pack_OptionLift.def(stx_core_pack_OptionLift.map(this.error,stx_run_pack_NextSum.Fail),function() {
			return stx_core_pack_OptionLift.defv(stx_core_pack_OptionLift.map(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,_gthis.picker.peek()),function(schedule) {
				return schedule.status();
			}),stx_run_pack_NextSum.Exit);
		});
	}
	,pursue: function() {
		stx_log_pack_Log.trace(stx_log_pack_Log.close(stx_LiftLog.log(stx_core_pack_Wildcard.__)),"Scheduler.Base#pursue " + this.picker.size(),{ fileName : "stx/run/pack/scheduler/term/Base.hx", lineNumber : 30, className : "stx.run.pack.scheduler.term.Base", methodName : "pursue"});
		var head = this.picker.pop();
		if(head == null || stx_core_pack_OptionLift.is_defined(this.error)) {
			return;
		}
		var _g = head.status();
		switch(_g._hx_index) {
		case 0:
			head.pursue();
			var _g1 = head.status();
			switch(_g1._hx_index) {
			case 0:
				this.picker.put(head);
				break;
			case 1:
				var _g2 = _g1.milliseconds;
				this.picker.put(head);
				break;
			default:
			}
			break;
		case 1:
			var _g1 = _g.milliseconds;
			head.pursue();
			var _g1 = head.status();
			switch(_g1._hx_index) {
			case 0:
				this.picker.put(head);
				break;
			case 1:
				var _g2 = _g1.milliseconds;
				this.picker.put(head);
				break;
			default:
			}
			break;
		case 2:
			var e = _g.e;
			this.escape();
			this.error = haxe_ds_Option.Some(e);
			break;
		case 3:
			break;
		}
	}
	,escape: function() {
		this.picker.escape();
	}
	,asSchedulerApi: function() {
		return this;
	}
	,toString: function() {
		return "Scheduler#Base([" + Std.string(this.picker) + "] status:" + Std.string(this.status()) + ")";
	}
	,__class__: stx_run_pack_scheduler_term_Base
};
var stx_run_pack_scheduler_term_Picker = function() {
	this.data = [];
};
stx_run_pack_scheduler_term_Picker.__name__ = "stx.run.pack.scheduler.term.Picker";
stx_run_pack_scheduler_term_Picker.prototype = {
	data: null
	,pop: function() {
		return this.data.shift();
	}
	,put: function(schedule) {
		if(this.data.indexOf(schedule) == -1) {
			this.data.push(schedule);
		}
		haxe_ds_ArraySort.sort(this.data,$bind(this,this.eq));
	}
	,eq: function(l,r) {
		return Math.round(l.value() - r.value());
	}
	,peek: function() {
		return stx_core_pack_Array.get(this.data,0);
	}
	,escape: function() {
		var _g = 0;
		var _g1 = this.data;
		while(_g < _g1.length) {
			var schedule = _g1[_g];
			++_g;
			schedule.escape();
		}
	}
	,is_defined: function() {
		return this.data.length > 0;
	}
	,size: function() {
		return this.data.length;
	}
	,toString: function() {
		return this.data.join(",");
	}
	,__class__: stx_run_pack_scheduler_term_Picker
};
var stx_run_pack_Scheduler = {};
stx_run_pack_Scheduler._new = function(fn) {
	var this1 = fn;
	return this1;
};
stx_run_pack_Scheduler.unit = function() {
	return new stx_run_pack_scheduler_term_Base().asSchedulerApi();
};
stx_run_pack_Scheduler.put = function(schedule) {
	stx_run_pack_Scheduler.ZERO.put(schedule);
};
var stx_run_pack_Runtime = {};
stx_run_pack_Runtime._new = function(self) {
	var this1 = self;
	return this1;
};
stx_run_pack_Runtime.run = function(scheduler) {
	stx_run_pack_Runtime.ZERO.run(scheduler);
};
var stx_run_pack_ScheduleApi = function() { };
stx_run_pack_ScheduleApi.__name__ = "stx.run.pack.ScheduleApi";
stx_run_pack_ScheduleApi.__isInterface__ = true;
stx_run_pack_ScheduleApi.prototype = {
	rtid: null
	,get_rtid: null
	,status: null
	,pursue: null
	,escape: null
	,asScheduleApi: null
	,value: null
	,__class__: stx_run_pack_ScheduleApi
};
var stx_run_pack_Schedule = {};
stx_run_pack_Schedule.Task = function(task) {
	return new stx_run_pack_schedule_term_Task(task);
};
var stx_run_pack_Seconds = {};
stx_run_pack_Seconds.mul = function(this1,that) {
	return this1 * stx_run_pack_Seconds.prj(that);
};
stx_run_pack_Seconds.div = function(this1,that) {
	return this1 / stx_run_pack_Seconds.prj(that);
};
stx_run_pack_Seconds.add = function(this1,that) {
	return this1 + stx_run_pack_Seconds.prj(that);
};
stx_run_pack_Seconds.sub = function(this1,that) {
	return this1 - stx_run_pack_Seconds.prj(that);
};
stx_run_pack_Seconds.gt = function(this1,that) {
	return this1 > stx_run_pack_Seconds.prj(that);
};
stx_run_pack_Seconds.gteq = function(this1,that) {
	return this1 >= stx_run_pack_Seconds.prj(that);
};
stx_run_pack_Seconds.lt = function(this1,that) {
	return this1 < stx_run_pack_Seconds.prj(that);
};
stx_run_pack_Seconds.lteq = function(this1,that) {
	return this1 < stx_run_pack_Seconds.prj(that);
};
stx_run_pack_Seconds.toMilliSeconds = function(this1) {
	return Math.round(this1 * 1000);
};
stx_run_pack_Seconds.prj = function(this1) {
	return this1;
};
var stx_run_pack_Task = {};
stx_run_pack_Task._new = function(self) {
	var this1 = self;
	return this1;
};
stx_run_pack_Task.seq = function(this1,that) {
	return new stx_run_pack_task_term_Seq(new haxe_iterators_ArrayIterator([stx_run_pack_Task.get_self(this1),that]));
};
stx_run_pack_Task.toAutomation = function(this1) {
	return this1;
};
stx_run_pack_Task.Seq = function(gen) {
	return new stx_run_pack_task_term_Seq(gen);
};
stx_run_pack_Task.Anon = function(execute,release,cleanup) {
	return new stx_run_pack_task_term_Anon(execute,release,cleanup);
};
stx_run_pack_Task.fromFuture = function(ft) {
	return new stx_run_pack_task_term_Deferred(ft);
};
stx_run_pack_Task.fromError = function(err) {
	return new stx_run_pack_task_term_Error(err);
};
stx_run_pack_Task.unit = function() {
	return new stx_run_pack_task_term_Unit();
};
stx_run_pack_Task.On = function(bang) {
	return new stx_run_pack_task_term_On(bang);
};
stx_run_pack_Task.Timeout = function(milliseconds) {
	return new stx_run_pack_task_term_Timeout(milliseconds);
};
stx_run_pack_Task.All = function(array) {
	return new stx_run_pack_task_term_All(array);
};
stx_run_pack_Task.Blocking = function(ref) {
	return new stx_run_pack_task_term_Blocking(ref);
};
stx_run_pack_Task.Both = function(lhs,rhs) {
	return new stx_run_pack_task_term_Both(lhs,rhs);
};
stx_run_pack_Task.Err = function(e) {
	return new stx_run_pack_task_term_Err(e);
};
stx_run_pack_Task.Error = function(e) {
	return new stx_run_pack_task_term_Error(e);
};
stx_run_pack_Task.get_self = function(this1) {
	return this1;
};
var stx_run_pack_Timer = {};
stx_run_pack_Timer._new = function(self) {
	var this1;
	if(self == null) {
		this1 = stx_run_pack_Timer.unit();
	} else {
		this1 = self;
	}
	return this1;
};
stx_run_pack_Timer.pure = function(v) {
	return { created : v};
};
stx_run_pack_Timer.unit = function() {
	return stx_run_pack_Timer.pure(stx_run_pack_Timer.mark());
};
stx_run_pack_Timer.mark = function() {
	var hrtime = process.hrtime();
	return hrtime[0] + hrtime[1] / 1e9;
};
stx_run_pack_Timer.copy = function(this1,created) {
	return stx_run_pack_Timer.pure(created == null ? this1.created : created);
};
stx_run_pack_Timer.start = function(this1) {
	return stx_run_pack_Timer.copy(this1,stx_run_pack_Timer.mark());
};
stx_run_pack_Timer.since = function(this1) {
	return stx_run_pack_Timer.mark() - stx_run_pack_Seconds.prj(this1.created);
};
stx_run_pack_Timer.prj = function(this1) {
	return this1;
};
var stx_run_pack_act_term_Base = function() {
};
stx_run_pack_act_term_Base.__name__ = "stx.run.pack.act.term.Base";
stx_run_pack_act_term_Base.__interfaces__ = [stx_ActApi];
stx_run_pack_act_term_Base.prototype = {
	upply: function(thk) {
		throw haxe_Exception.thrown("UNIMPLEMENTED ABSTRACT FUNCTION");
	}
	,reply: function() {
		var ft = new tink_core_FutureTrigger();
		this.upply(function() {
			ft.trigger(tink_core_Noise.Noise);
		});
		return ft;
	}
	,report: function(e) {
		stx_run_pack_Act.MainThread().upply(function() {
			throw haxe_Exception.thrown(e);
		});
	}
	,asActApi: function() {
		return this;
	}
	,__class__: stx_run_pack_act_term_Base
};
var stx_run_pack_act_term_Anon = function(delegate) {
	stx_run_pack_act_term_Base.call(this);
	this.delegate = delegate;
};
stx_run_pack_act_term_Anon.__name__ = "stx.run.pack.act.term.Anon";
stx_run_pack_act_term_Anon.__super__ = stx_run_pack_act_term_Base;
stx_run_pack_act_term_Anon.prototype = $extend(stx_run_pack_act_term_Base.prototype,{
	delegate: null
	,upply: function(thk) {
		this.delegate(thk);
	}
	,__class__: stx_run_pack_act_term_Anon
});
var stx_run_pack_act_term_Defer = function() {
	stx_run_pack_act_term_Base.call(this);
};
stx_run_pack_act_term_Defer.__name__ = "stx.run.pack.act.term.Defer";
stx_run_pack_act_term_Defer.__super__ = stx_run_pack_act_term_Base;
stx_run_pack_act_term_Defer.prototype = $extend(stx_run_pack_act_term_Base.prototype,{
	upply: function(thk) {
		var fn = null;
		fn = function() {
			thk();
			fn = function() {
				return;
			};
			return fn;
		};
		var event = null;
		event = haxe_MainLoop.add(function() {
			fn();
			if(event != null) {
				event.stop();
			}
		});
	}
	,__class__: stx_run_pack_act_term_Defer
});
var stx_run_pack_act_term_Delay = function(milliseconds) {
	stx_run_pack_act_term_Base.call(this);
	this.milliseconds = milliseconds;
};
stx_run_pack_act_term_Delay.__name__ = "stx.run.pack.act.term.Delay";
stx_run_pack_act_term_Delay.__super__ = stx_run_pack_act_term_Base;
stx_run_pack_act_term_Delay.prototype = $extend(stx_run_pack_act_term_Base.prototype,{
	milliseconds: null
	,upply: function(thk) {
		haxe_Timer.delay(thk,this.milliseconds);
	}
	,__class__: stx_run_pack_act_term_Delay
});
var stx_run_pack_act_term_MainThread = function() {
	stx_run_pack_act_term_Base.call(this);
};
stx_run_pack_act_term_MainThread.__name__ = "stx.run.pack.act.term.MainThread";
stx_run_pack_act_term_MainThread.__super__ = stx_run_pack_act_term_Base;
stx_run_pack_act_term_MainThread.prototype = $extend(stx_run_pack_act_term_Base.prototype,{
	upply: function(thk) {
		haxe_MainLoop.runInMainThread(thk);
	}
	,__class__: stx_run_pack_act_term_MainThread
});
var stx_run_pack_recall_term_Base = function() {
};
stx_run_pack_recall_term_Base.__name__ = "stx.run.pack.recall.term.Base";
stx_run_pack_recall_term_Base.__interfaces__ = [stx_RecallApi];
stx_run_pack_recall_term_Base.prototype = {
	applyII: function(i,cb) {
		var this1 = stx_core_use_UseNano.fault(stx_core_pack_Wildcard.__,{ fileName : "stx/run/pack/recall/term/Base.hx", lineNumber : 10, className : "stx.run.pack.recall.term.Base", methodName : "applyII"});
		throw haxe_Exception.thrown(new stx_core_pack_Err(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,stx_core_pack_Failure.ERR_OF("E_AbstractMethod")),haxe_ds_Option.None,this1));
	}
	,asRecallDef: function() {
		return this;
	}
	,__class__: stx_run_pack_recall_term_Base
};
var stx_run_pack_recall_term_Anon = function(_applyII) {
	stx_run_pack_recall_term_Base.call(this);
	this._applyII = _applyII;
	this.done = false;
};
stx_run_pack_recall_term_Anon.__name__ = "stx.run.pack.recall.term.Anon";
stx_run_pack_recall_term_Anon.__super__ = stx_run_pack_recall_term_Base;
stx_run_pack_recall_term_Anon.prototype = $extend(stx_run_pack_recall_term_Base.prototype,{
	_applyII: null
	,done: null
	,res: null
	,applyII: function(i,cont) {
		if(!this.done) {
			this.done = true;
			return this.res = this._applyII(i,cont);
		} else {
			return this.res;
		}
	}
	,__class__: stx_run_pack_recall_term_Anon
});
var stx_run_pack_recall_term_Pure = function(data) {
	stx_run_pack_recall_term_Base.call(this);
	this.data = data;
};
stx_run_pack_recall_term_Pure.__name__ = "stx.run.pack.recall.term.Pure";
stx_run_pack_recall_term_Pure.__super__ = stx_run_pack_recall_term_Base;
stx_run_pack_recall_term_Pure.prototype = $extend(stx_run_pack_recall_term_Base.prototype,{
	data: null
	,applyII: function(_,cont) {
		cont(this.data);
		return null;
	}
	,__class__: stx_run_pack_recall_term_Pure
});
var stx_run_pack_schedule_term_Base = function() {
};
stx_run_pack_schedule_term_Base.__name__ = "stx.run.pack.schedule.term.Base";
stx_run_pack_schedule_term_Base.__interfaces__ = [stx_run_pack_ScheduleApi];
stx_run_pack_schedule_term_Base.prototype = {
	rtid: null
	,get_rtid: function() {
		return function() {
		};
	}
	,status: function() {
		throw haxe_Exception.thrown(new stx_core_pack_Err(haxe_ds_Option.Some(stx_core_pack_Failure.ERR("E_AbstractMethod")),null,stx_core_use_UseNano.fault(stx_core_pack_Wildcard.__,{ fileName : "stx/run/pack/schedule/term/Base.hx", lineNumber : 12, className : "stx.run.pack.schedule.term.Base", methodName : "status"})));
	}
	,escape: function() {
		throw haxe_Exception.thrown(new stx_core_pack_Err(haxe_ds_Option.Some(stx_core_pack_Failure.ERR("E_AbstractMethod")),null,stx_core_use_UseNano.fault(stx_core_pack_Wildcard.__,{ fileName : "stx/run/pack/schedule/term/Base.hx", lineNumber : 15, className : "stx.run.pack.schedule.term.Base", methodName : "escape"})));
	}
	,pursue: function() {
		throw haxe_Exception.thrown(new stx_core_pack_Err(haxe_ds_Option.Some(stx_core_pack_Failure.ERR("E_AbstractMethod")),null,stx_core_use_UseNano.fault(stx_core_pack_Wildcard.__,{ fileName : "stx/run/pack/schedule/term/Base.hx", lineNumber : 18, className : "stx.run.pack.schedule.term.Base", methodName : "pursue"})));
	}
	,value: function() {
		throw haxe_Exception.thrown(new stx_core_pack_Err(haxe_ds_Option.Some(stx_core_pack_Failure.ERR("E_AbstractMethod")),null,stx_core_use_UseNano.fault(stx_core_pack_Wildcard.__,{ fileName : "stx/run/pack/schedule/term/Base.hx", lineNumber : 21, className : "stx.run.pack.schedule.term.Base", methodName : "value"})));
	}
	,asScheduleApi: function() {
		return this;
	}
	,__class__: stx_run_pack_schedule_term_Base
};
var stx_run_pack_schedule_term_Task = function(task) {
	stx_run_pack_schedule_term_Base.call(this);
	this.stat = new stx_run_pack_schedule_term_Stat(stx_run_pack_Clock._new());
	this.task = task;
};
stx_run_pack_schedule_term_Task.__name__ = "stx.run.pack.schedule.term.Task";
stx_run_pack_schedule_term_Task.__super__ = stx_run_pack_schedule_term_Base;
stx_run_pack_schedule_term_Task.prototype = $extend(stx_run_pack_schedule_term_Base.prototype,{
	task: null
	,stat: null
	,last: null
	,get_rtid: function() {
		return this.task.rtid;
	}
	,status: function() {
		if(this.last == null) {
			return stx_run_pack_NextSum.Busy;
		} else {
			return this.last;
		}
	}
	,pursue: function() {
		stx_log_pack_Log.trace(stx_log_pack_Log.close(stx_LiftLog.log(stx_core_pack_Wildcard.__)),this.task.get_progress().data,{ fileName : "stx/run/pack/schedule/term/Task.hx", lineNumber : 22, className : "stx.run.pack.schedule.term.Task", methodName : "pursue"});
		this.stat.enter();
		var _g = this.task.get_progress().data;
		switch(_g._hx_index) {
		case 0:case 1:
			break;
		case 2:case 5:
			this.task.pursue();
			break;
		case 3:
			var _g1 = _g.cb;
			break;
		case 4:
			var _g1 = _g.milliseconds;
			this.task.pursue();
			break;
		case 6:
			var e = _g.e;
			this.task.escape();
			break;
		}
		this.stat.leave();
		var _g = this.task.get_progress().data;
		var tmp;
		switch(_g._hx_index) {
		case 0:case 1:
			tmp = stx_run_pack_NextSum.Exit;
			break;
		case 2:case 5:
			tmp = stx_run_pack_NextSum.Busy;
			break;
		case 3:
			var _g1 = _g.cb;
			tmp = stx_run_pack_NextSum.Busy;
			break;
		case 4:
			var milliseconds = _g.milliseconds;
			tmp = stx_run_pack_NextSum.Poll(milliseconds);
			break;
		case 6:
			var e = _g.e;
			tmp = stx_run_pack_NextSum.Fail(e);
			break;
		}
		this.last = tmp;
	}
	,escape: function() {
		this.task.escape();
	}
	,value: function() {
		return this.stat.value();
	}
	,toString: function() {
		return "Schedule(" + Std.string(this.task) + ":" + Std.string(this.task.get_progress().data) + ")";
	}
	,__class__: stx_run_pack_schedule_term_Task
});
var stx_run_pack_schedule_term_Stat = function(clock) {
	this.clock = clock;
	this.accessed = 0;
	this.total_runtime = 0;
	this.total_waiting = 0;
};
stx_run_pack_schedule_term_Stat.__name__ = "stx.run.pack.schedule.term.Stat";
stx_run_pack_schedule_term_Stat.prototype = {
	clock: null
	,last_access: null
	,last_runtime: null
	,last_waiting: null
	,total_waiting: null
	,total_runtime: null
	,accessed: null
	,enter: function() {
		this.accessed += 1;
		if(this.last_access != null) {
			this.last_waiting = this.clock.pure(this.last_access + stx_run_pack_Seconds.prj(this.last_runtime)).delta();
			this.total_waiting = this.total_waiting + stx_run_pack_Seconds.prj(this.last_waiting);
		}
		this.last_access = this.clock.stamp();
	}
	,leave: function() {
		this.last_runtime = this.clock.pure(this.last_access).delta();
		this.total_runtime = this.last_runtime + stx_run_pack_Seconds.prj(this.total_runtime);
	}
	,value: function() {
		var a = this.total_waiting / stx_run_pack_Seconds.prj(this.total_runtime);
		var b = this.accessed + 1;
		var c = a * stx_run_pack_Seconds.prj(b);
		var d = stx_run_pack_Seconds.prj(c);
		return d;
	}
	,__class__: stx_run_pack_schedule_term_Stat
};
var stx_run_pack_task_term_Anon = function(pursue,$escape,cleanup) {
	stx_run_pack_task_term_Base.call(this);
	this._pursue = pursue;
	this._escape = stx_core_pack_OptionLift.defv(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,$escape),function() {
		return;
	});
	this._cleanup = stx_core_pack_OptionLift.defv(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,cleanup),function() {
		return;
	});
};
stx_run_pack_task_term_Anon.__name__ = "stx.run.pack.task.term.Anon";
stx_run_pack_task_term_Anon.__super__ = stx_run_pack_task_term_Base;
stx_run_pack_task_term_Anon.prototype = $extend(stx_run_pack_task_term_Base.prototype,{
	_pursue: null
	,_escape: null
	,_cleanup: null
	,do_pursue: function() {
		this._pursue();
		this.progression(stx_run_pack_ProgressSum.Secured,{ fileName : "stx/run/pack/task/term/Anon.hx", lineNumber : 18, className : "stx.run.pack.task.term.Anon", methodName : "do_pursue"});
		return stx_run_pack_task_term_Base.prototype.do_pursue.call(this);
	}
	,do_escape: function() {
		this._escape();
		stx_run_pack_task_term_Base.prototype.do_escape.call(this);
	}
	,do_cleanup: function() {
		this._cleanup();
		stx_run_pack_task_term_Base.prototype.do_cleanup.call(this);
	}
	,__class__: stx_run_pack_task_term_Anon
});
var stx_run_pack_task_term_Blocking = function(blocking) {
	stx_run_pack_task_term_Base.call(this);
	this.blocking = blocking;
};
stx_run_pack_task_term_Blocking.__name__ = "stx.run.pack.task.term.Blocking";
stx_run_pack_task_term_Blocking.__super__ = stx_run_pack_task_term_Base;
stx_run_pack_task_term_Blocking.prototype = $extend(stx_run_pack_task_term_Base.prototype,{
	blocking: null
	,do_pursue: function() {
		if(this.blocking[0] == false) {
			this.set_progress(stx_run_pack_Progression.pure(stx_run_pack_ProgressSum.Secured));
			return false;
		} else {
			return true;
		}
	}
	,__class__: stx_run_pack_task_term_Blocking
});
var stx_run_pack_task_term_Count = function(count) {
	stx_run_pack_task_term_Base.call(this);
	this.count = count;
};
stx_run_pack_task_term_Count.__name__ = "stx.run.pack.task.term.Count";
stx_run_pack_task_term_Count.__super__ = stx_run_pack_task_term_Base;
stx_run_pack_task_term_Count.prototype = $extend(stx_run_pack_task_term_Base.prototype,{
	count: null
	,do_pursue: function() {
		return this.count[0] > 0;
	}
	,__class__: stx_run_pack_task_term_Count
});
var stx_run_pack_task_term_Err = function(error) {
	stx_run_pack_task_term_Base.call(this);
	this.error = error;
};
stx_run_pack_task_term_Err.__name__ = "stx.run.pack.task.term.Err";
stx_run_pack_task_term_Err.__super__ = stx_run_pack_task_term_Base;
stx_run_pack_task_term_Err.prototype = $extend(stx_run_pack_task_term_Base.prototype,{
	error: null
	,do_pursue: function() {
		var this1 = stx_core_use_UseNano.fault(stx_core_pack_Wildcard.__,{ fileName : "stx/run/pack/task/term/Err.hx", lineNumber : 10, className : "stx.run.pack.task.term.Err", methodName : "do_pursue"});
		this.set_progress(stx_run_pack_Progression.pure(stx_run_pack_ProgressSum.Problem(new stx_core_pack_Err(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,stx_core_pack_Failure.ERR_OF(stx_run_pack_AutomationFailure.E_Automation(this.error))),haxe_ds_Option.None,this1))));
		return false;
	}
	,__class__: stx_run_pack_task_term_Err
});
var stx_run_pack_task_term_Error = function(error) {
	stx_run_pack_task_term_Base.call(this);
	this.error = error;
};
stx_run_pack_task_term_Error.__name__ = "stx.run.pack.task.term.Error";
stx_run_pack_task_term_Error.__super__ = stx_run_pack_task_term_Base;
stx_run_pack_task_term_Error.prototype = $extend(stx_run_pack_task_term_Base.prototype,{
	error: null
	,do_pursue: function() {
		var this1 = stx_core_use_UseNano.fault(stx_core_pack_Wildcard.__,{ fileName : "stx/run/pack/task/term/Error.hx", lineNumber : 10, className : "stx.run.pack.task.term.Error", methodName : "do_pursue"});
		this.set_progress(stx_run_pack_Progression.pure(stx_run_pack_ProgressSum.Problem(new stx_core_pack_Err(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,stx_core_pack_Failure.ERR_OF(stx_run_pack_AutomationFailure.E_UnknownAutomation(this.error))),haxe_ds_Option.None,this1))));
		return false;
	}
	,__class__: stx_run_pack_task_term_Error
});
var stx_run_pack_task_term_On = function(trigger) {
	stx_run_pack_task_term_When.call(this);
	this.trigger = trigger;
};
stx_run_pack_task_term_On.__name__ = "stx.run.pack.task.term.On";
stx_run_pack_task_term_On.__super__ = stx_run_pack_task_term_When;
stx_run_pack_task_term_On.prototype = $extend(stx_run_pack_task_term_When.prototype,{
	__class__: stx_run_pack_task_term_On
});
var stx_run_pack_task_term_Seq = function(gen) {
	this.gen = gen;
	this.arr = [];
	stx_run_pack_task_term_Base.call(this);
};
stx_run_pack_task_term_Seq.__name__ = "stx.run.pack.task.term.Seq";
stx_run_pack_task_term_Seq.__super__ = stx_run_pack_task_term_Base;
stx_run_pack_task_term_Seq.prototype = $extend(stx_run_pack_task_term_Base.prototype,{
	gen: null
	,arr: null
	,do_pursue: function() {
		var _gthis = this;
		stx_log_pack_Log.trace(stx_log_pack_Log.close(stx_LiftLog.log(stx_core_pack_Wildcard.__)),"Seq#do_pursue",{ fileName : "stx/run/pack/task/term/Seq.hx", lineNumber : 16, className : "stx.run.pack.task.term.Seq", methodName : "do_pursue"});
		var last = stx_core_pack_ArrayLift.last(this.arr);
		return stx_core_pack_OptionLift.fold(last,function(task) {
			return stx_core_use_UseNano.if_else(stx_run_pack_Progress.get_ongoing(task.get_progress().data),function() {
				task.pursue();
				_gthis.progression(task.get_progress().data,{ fileName : "stx/run/pack/task/term/Seq.hx", lineNumber : 23, className : "stx.run.pack.task.term.Seq", methodName : "do_pursue"});
				return true;
			},function() {
				var _g = task.get_progress().data;
				switch(_g._hx_index) {
				case 0:
					_gthis.escape();
					return false;
				case 1:
					return stx_core_pack_OptionLift.fold(_gthis.generate(_gthis.gen),function(next) {
						_gthis.arr.push(next);
						return true;
					},function() {
						_gthis.progression(stx_run_pack_ProgressSum.Secured,{ fileName : "stx/run/pack/task/term/Seq.hx", lineNumber : 40, className : "stx.run.pack.task.term.Seq", methodName : "do_pursue"});
						return false;
					});
				case 6:
					var e = _g.e;
					_gthis.progression(task.get_progress().data,{ fileName : "stx/run/pack/task/term/Seq.hx", lineNumber : 28, className : "stx.run.pack.task.term.Seq", methodName : "do_pursue"});
					return false;
				default:
					return true;
				}
			});
		},function() {
			return stx_core_pack_OptionLift.fold(_gthis.generate(_gthis.gen),function(task) {
				_gthis.arr.push(task);
				return true;
			},function() {
				_gthis.progression(stx_run_pack_ProgressSum.Secured,{ fileName : "stx/run/pack/task/term/Seq.hx", lineNumber : 54, className : "stx.run.pack.task.term.Seq", methodName : "do_pursue"});
				return false;
			});
		});
	}
	,generate: function(iterator) {
		if(iterator.hasNext()) {
			return haxe_ds_Option.Some(iterator.next());
		} else {
			return haxe_ds_Option.None;
		}
	}
	,do_escape: function() {
	}
	,do_cleanup: function() {
		this.gen = new haxe_iterators_ArrayIterator([]);
		this.arr = [];
	}
	,__class__: stx_run_pack_task_term_Seq
});
var stx_run_pack_task_term_Timeout = function(milliseconds) {
	this.init = false;
	stx_run_pack_task_term_Base.call(this);
	this.milliseconds = milliseconds;
	this.timer = stx_LiftRun.timer(stx_core_pack_Wildcard.__);
};
stx_run_pack_task_term_Timeout.__name__ = "stx.run.pack.task.term.Timeout";
stx_run_pack_task_term_Timeout.__super__ = stx_run_pack_task_term_Base;
stx_run_pack_task_term_Timeout.prototype = $extend(stx_run_pack_task_term_Base.prototype,{
	init: null
	,timer: null
	,milliseconds: null
	,do_pursue: function() {
		stx_log_pack_Log.trace(stx_LiftLog.log(stx_core_pack_Wildcard.__),"do_pursue: Timeout: " + Std.string(this.get_progress().data),{ fileName : "stx/run/pack/task/term/Timeout.hx", lineNumber : 13, className : "stx.run.pack.task.term.Timeout", methodName : "do_pursue"});
		if(!this.init) {
			this.init = true;
			this.timer = stx_run_pack_Timer.start(this.timer);
		}
		var seconds = this.milliseconds / 1000;
		if(stx_run_pack_Timer.since(this.timer) < stx_run_pack_Seconds.prj(seconds)) {
			var rest = seconds - stx_run_pack_Seconds.prj(stx_run_pack_Timer.since(this.timer));
			if(rest < stx_run_pack_Seconds.prj(0)) {
				this.progression(stx_run_pack_ProgressSum.Secured,{ fileName : "stx/run/pack/task/term/Timeout.hx", lineNumber : 22, className : "stx.run.pack.task.term.Timeout", methodName : "do_pursue"});
				return false;
			} else {
				this.progression(stx_run_pack_ProgressSum.Polling(Math.round(rest * 1000)),{ fileName : "stx/run/pack/task/term/Timeout.hx", lineNumber : 25, className : "stx.run.pack.task.term.Timeout", methodName : "do_pursue"});
				return true;
			}
		} else {
			this.progression(stx_run_pack_ProgressSum.Secured,{ fileName : "stx/run/pack/task/term/Timeout.hx", lineNumber : 29, className : "stx.run.pack.task.term.Timeout", methodName : "do_pursue"});
			return false;
		}
	}
	,__class__: stx_run_pack_task_term_Timeout
});
var stx_run_pack_task_term_Unit = function() {
	stx_run_pack_task_term_Base.call(this);
};
stx_run_pack_task_term_Unit.__name__ = "stx.run.pack.task.term.Unit";
stx_run_pack_task_term_Unit.__super__ = stx_run_pack_task_term_Base;
stx_run_pack_task_term_Unit.prototype = $extend(stx_run_pack_task_term_Base.prototype,{
	__class__: stx_run_pack_task_term_Unit
});
var stx_show_Lift = function() { };
stx_show_Lift.__name__ = "stx.show.Lift";
stx_show_Lift.show = function(_,v) {
	return stx_show_pack_Show.show(v);
};
var stx_show_pack_Show = function() { };
stx_show_pack_Show.__name__ = "stx.show.pack.Show";
stx_show_pack_Show.getShow = function(v) {
	return (stx_show_pack_Show.getShowFor(v))(v);
};
stx_show_pack_Show.show = function(v) {
	return (stx_show_pack_Show.getShowFor(v))(v);
};
stx_show_pack_Show.__show__ = function(impl) {
	return function(v) {
		if(null == v) {
			return "null";
		} else {
			return impl(v);
		}
	};
};
stx_show_pack_Show.getShowFor = function(t) {
	return stx_show_pack_Show.getShowForType(Type.typeof(t));
};
stx_show_pack_Show.getShowForType = function(v) {
	switch(v._hx_index) {
	case 0:
		return stx_show_pack__$Show_NullShow.toString;
	case 1:
		return stx_show_pack_Show.__show__(stx_show_pack__$Show_IntShow.toString);
	case 2:
		return stx_show_pack_Show.__show__(stx_show_pack__$Show_FloatShow.toString);
	case 3:
		return stx_show_pack_Show.__show__(stx_show_pack__$Show_BoolShow.toString);
	case 4:
		return stx_show_pack_Show.__show__(stx_show_pack__$Show_ObjectShow.toString);
	case 5:
		return stx_show_pack_Show.__show__(function(v) {
			return "<function>";
		});
	case 6:
		var _g = v.c;
		var c = _g;
		if(c == String) {
			return stx_show_pack_Show.__show__(Std.string);
		} else {
			var c = _g;
			if(c == Array) {
				return stx_show_pack_Show.__show__(stx_show_pack__$Show_ArrayShow.toString);
			} else {
				var c = _g;
				if(c == haxe_ds_List) {
					return stx_show_pack_Show.__show__(stx_show_pack__$Show_ListShow.toString);
				} else {
					var c = _g;
					if(HxOverrides.remove(Type.getInstanceFields(c),"toString")) {
						return stx_show_pack_Show.__show__(function(v) {
							return Reflect.field(v,"toString").apply(v,[]);
						});
					} else {
						return stx_show_pack_Show.__show__(function(v) {
							var c = js_Boot.getClass(v);
							return c.__name__;
						});
					}
				}
			}
		}
		break;
	case 7:
		var _g = v.e;
		return stx_show_pack_Show.__show__(stx_show_pack__$Show_EnumShow.toString);
	case 8:
		return stx_show_pack_Show.__show__(function(v) {
			return "<unknown>";
		});
	}
};
var stx_show_pack__$Show_ListShow = function() { };
stx_show_pack__$Show_ListShow.__name__ = "stx.show.pack._Show.ListShow";
stx_show_pack__$Show_ListShow.toString = function(lst) {
	return stx_show_pack__$Show_IterableShow.toString(lst);
};
var stx_show_pack__$Show_NullShow = function() { };
stx_show_pack__$Show_NullShow.__name__ = "stx.show.pack._Show.NullShow";
stx_show_pack__$Show_NullShow.toString = function(v) {
	return "null";
};
var stx_show_pack__$Show_EnumShow = function() { };
stx_show_pack__$Show_EnumShow.__name__ = "stx.show.pack._Show.EnumShow";
stx_show_pack__$Show_EnumShow.toString = function(v) {
	var e = v;
	var buf = $hxEnums[e.__enum__].__constructs__[e._hx_index];
	var params = Type.enumParameters(v);
	if(params.length == 0) {
		return buf;
	} else {
		buf += "(";
		var _g = 0;
		var _g1 = params.length;
		while(_g < _g1) {
			var i = _g++;
			var p = params[i];
			buf += (stx_show_pack_Show.getShowFor(p))(p);
			if(i < params.length - 1) {
				buf += ", ";
			}
		}
		buf += ")";
		return buf;
	}
};
var stx_show_pack__$Show_ObjectShow = function() { };
stx_show_pack__$Show_ObjectShow.__name__ = "stx.show.pack._Show.ObjectShow";
stx_show_pack__$Show_ObjectShow.toString = function(v) {
	if(Reflect.fields(v).length == 0) {
		return Std.string(v);
	}
	var buf = [];
	var _g = 0;
	var _g1 = Reflect.fields(v);
	while(_g < _g1.length) {
		var k = _g1[_g];
		++_g;
		var i = Reflect.field(v,k);
		buf.push(k + ":" + (stx_show_pack_Show.getShowFor(i))(i));
	}
	return "{" + buf.join(",") + "}";
};
var stx_show_pack__$Show_ArrayShow = function() { };
stx_show_pack__$Show_ArrayShow.__name__ = "stx.show.pack._Show.ArrayShow";
stx_show_pack__$Show_ArrayShow.toString = function(v) {
	return stx_show_pack__$Show_ArrayShow.toStringWith(v,stx_show_pack_Show.getShowFor(v[0]));
};
stx_show_pack__$Show_ArrayShow.toStringWith = function(v,show) {
	var result = new Array(v.length);
	var _g = 0;
	var _g1 = v.length;
	while(_g < _g1) {
		var i = _g++;
		result[i] = show(v[i]);
	}
	return "[" + result.join(", ") + "]";
};
stx_show_pack__$Show_ArrayShow.mkString = function(arr,sep,show) {
	if(sep == null) {
		sep = ", ";
	}
	var isFirst = true;
	return Lambda.fold(arr,function(b,a) {
		var prefix;
		if(isFirst) {
			isFirst = false;
			prefix = "";
		} else {
			prefix = sep;
		}
		if(null == show) {
			show = stx_show_pack_Show.getShowFor(b);
		}
		return a + prefix + show(b);
	},"");
};
var stx_show_pack__$Show_IterableShow = function() { };
stx_show_pack__$Show_IterableShow.__name__ = "stx.show.pack._Show.IterableShow";
stx_show_pack__$Show_IterableShow.toString = function(i,show,prefix,suffix,sep) {
	if(sep == null) {
		sep = ", ";
	}
	if(suffix == null) {
		suffix = ")";
	}
	if(prefix == null) {
		prefix = "(";
	}
	return stx_show_pack__$Show_IterableShow.mkString(i,show,prefix,suffix,sep);
};
stx_show_pack__$Show_IterableShow.mkString = function(i,show,prefix,suffix,sep) {
	if(sep == null) {
		sep = ", ";
	}
	if(suffix == null) {
		suffix = ")";
	}
	if(prefix == null) {
		prefix = "(";
	}
	if(show == null) {
		show = Std.string;
	}
	var s = prefix;
	var isFirst = true;
	var t = $getIterator(i);
	while(t.hasNext()) {
		var t1 = t.next();
		if(isFirst) {
			isFirst = false;
		} else {
			s += sep;
		}
		s += show(t1);
	}
	return s + suffix;
};
var stx_show_pack__$Show_BoolShow = function() { };
stx_show_pack__$Show_BoolShow.__name__ = "stx.show.pack._Show.BoolShow";
stx_show_pack__$Show_BoolShow.toString = function(v) {
	if(v) {
		return "true";
	} else {
		return "false";
	}
};
var stx_show_pack__$Show_IntShow = function() { };
stx_show_pack__$Show_IntShow.__name__ = "stx.show.pack._Show.IntShow";
stx_show_pack__$Show_IntShow.toString = function(v) {
	return "" + v;
};
var stx_show_pack__$Show_FloatShow = function() { };
stx_show_pack__$Show_FloatShow.__name__ = "stx.show.pack._Show.FloatShow";
stx_show_pack__$Show_FloatShow.toString = function(v) {
	return "" + v;
};
var stx_show_pack__$Show_StackItemShow = function() { };
stx_show_pack__$Show_StackItemShow.__name__ = "stx.show.pack._Show.StackItemShow";
stx_show_pack__$Show_StackItemShow.toString = function(s) {
	switch(s._hx_index) {
	case 0:
		return "function";
	case 1:
		var m = s.m;
		return m;
	case 2:
		var _g = s.column;
		var _g = s.file;
		var line = s.line;
		var si = s.s;
		return stx_show_pack__$Show_StackItemShow.toString(si) + (":" + line);
	case 3:
		var method = s.method;
		var classname = s.classname;
		return "" + classname + "." + method;
	case 4:
		var v = s.v;
		return "@" + v;
	}
};
var sys_FileSystem = function() { };
sys_FileSystem.__name__ = "sys.FileSystem";
sys_FileSystem.exists = function(path) {
	try {
		js_node_Fs.accessSync(path);
		return true;
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
		return false;
	}
};
sys_FileSystem.isDirectory = function(path) {
	try {
		return js_node_Fs.statSync(path).isDirectory();
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
		return false;
	}
};
sys_FileSystem.createDirectory = function(path) {
	try {
		js_node_Fs.mkdirSync(path);
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
		var e = haxe_Exception.caught(_g).unwrap();
		if(e.code == "ENOENT") {
			sys_FileSystem.createDirectory(js_node_Path.dirname(path));
			js_node_Fs.mkdirSync(path);
		} else {
			var stat;
			try {
				stat = js_node_Fs.statSync(path);
			} catch( _g ) {
				throw e;
			}
			if(!stat.isDirectory()) {
				throw e;
			}
		}
	}
};
var sys_io_FileInput = function(fd) {
	this.fd = fd;
	this.pos = 0;
};
sys_io_FileInput.__name__ = "sys.io.FileInput";
sys_io_FileInput.__super__ = haxe_io_Input;
sys_io_FileInput.prototype = $extend(haxe_io_Input.prototype,{
	fd: null
	,pos: null
	,readByte: function() {
		var buf = js_node_buffer_Buffer.alloc(1);
		var bytesRead;
		try {
			bytesRead = js_node_Fs.readSync(this.fd,buf,0,1,this.pos);
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			var e = haxe_Exception.caught(_g).unwrap();
			if(e.code == "EOF") {
				throw haxe_Exception.thrown(new haxe_io_Eof());
			} else {
				throw haxe_Exception.thrown(haxe_io_Error.Custom(e));
			}
		}
		if(bytesRead == 0) {
			throw haxe_Exception.thrown(new haxe_io_Eof());
		}
		this.pos++;
		return buf[0];
	}
	,readBytes: function(s,pos,len) {
		var data = s.b;
		var buf = js_node_buffer_Buffer.from(data.buffer,data.byteOffset,s.length);
		var bytesRead;
		try {
			bytesRead = js_node_Fs.readSync(this.fd,buf,pos,len,this.pos);
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			var e = haxe_Exception.caught(_g).unwrap();
			if(e.code == "EOF") {
				throw haxe_Exception.thrown(new haxe_io_Eof());
			} else {
				throw haxe_Exception.thrown(haxe_io_Error.Custom(e));
			}
		}
		if(bytesRead == 0) {
			throw haxe_Exception.thrown(new haxe_io_Eof());
		}
		this.pos += bytesRead;
		return bytesRead;
	}
	,close: function() {
		js_node_Fs.closeSync(this.fd);
	}
	,seek: function(p,pos) {
		switch(pos._hx_index) {
		case 0:
			this.pos = p;
			break;
		case 1:
			this.pos += p;
			break;
		case 2:
			this.pos = js_node_Fs.fstatSync(this.fd).size + p;
			break;
		}
	}
	,tell: function() {
		return this.pos;
	}
	,eof: function() {
		return this.pos >= js_node_Fs.fstatSync(this.fd).size;
	}
	,__class__: sys_io_FileInput
});
var sys_io_FileOutput = function(fd) {
	this.fd = fd;
	this.pos = 0;
};
sys_io_FileOutput.__name__ = "sys.io.FileOutput";
sys_io_FileOutput.__super__ = haxe_io_Output;
sys_io_FileOutput.prototype = $extend(haxe_io_Output.prototype,{
	fd: null
	,pos: null
	,writeByte: function(b) {
		var buf = js_node_buffer_Buffer.alloc(1);
		buf[0] = b;
		js_node_Fs.writeSync(this.fd,buf,0,1,this.pos);
		this.pos++;
	}
	,writeBytes: function(s,pos,len) {
		var data = s.b;
		var buf = js_node_buffer_Buffer.from(data.buffer,data.byteOffset,s.length);
		var wrote = js_node_Fs.writeSync(this.fd,buf,pos,len,this.pos);
		this.pos += wrote;
		return wrote;
	}
	,close: function() {
		js_node_Fs.closeSync(this.fd);
	}
	,seek: function(p,pos) {
		switch(pos._hx_index) {
		case 0:
			this.pos = p;
			break;
		case 1:
			this.pos += p;
			break;
		case 2:
			this.pos = js_node_Fs.fstatSync(this.fd).size + p;
			break;
		}
	}
	,tell: function() {
		return this.pos;
	}
	,__class__: sys_io_FileOutput
});
var sys_io_FileSeek = $hxEnums["sys.io.FileSeek"] = { __ename__ : "sys.io.FileSeek", __constructs__ : ["SeekBegin","SeekCur","SeekEnd"]
	,SeekBegin: {_hx_index:0,__enum__:"sys.io.FileSeek",toString:$estr}
	,SeekCur: {_hx_index:1,__enum__:"sys.io.FileSeek",toString:$estr}
	,SeekEnd: {_hx_index:2,__enum__:"sys.io.FileSeek",toString:$estr}
};
var tink_concurrent_Mutex = {};
tink_concurrent_Mutex._new = function() {
	var this1 = false;
	var this2 = this1;
	return this2;
};
tink_concurrent_Mutex.synchronized = function(this1,f) {
	return f();
};
var tink_concurrent__$Mutex_Impl = {};
tink_concurrent__$Mutex_Impl._new = function() {
	var this1 = false;
	return this1;
};
tink_concurrent__$Mutex_Impl.tryAcquire = function(this1) {
	return true;
};
tink_concurrent__$Mutex_Impl.acquire = function(this1) {
};
tink_concurrent__$Mutex_Impl.release = function(this1) {
};
var tink_core_Annex = function(target) {
	this.target = target;
	this.registry = new haxe_ds_ObjectMap();
};
tink_core_Annex.__name__ = "tink.core.Annex";
tink_core_Annex.prototype = {
	target: null
	,registry: null
	,__class__: tink_core_Annex
};
var tink_core_Callback = {};
tink_core_Callback._new = function(f) {
	var this1 = f;
	return this1;
};
tink_core_Callback.toFunction = function(this1) {
	return this1;
};
tink_core_Callback.invoke = function(this1,data) {
	if(tink_core_Callback.depth < 500) {
		tink_core_Callback.depth++;
		this1(data);
		tink_core_Callback.depth--;
	} else {
		var _e = this1;
		var _g = function(data) {
			tink_core_Callback.invoke(_e,data);
		};
		var data1 = data;
		tink_core_Callback.defer(function() {
			_g(data1);
		});
	}
};
tink_core_Callback.ignore = function(cb) {
	return function(_) {
		tink_core_Callback.invoke(cb,tink_core_Noise.Noise);
	};
};
tink_core_Callback.fromNiladic = function(f) {
	return f;
};
tink_core_Callback.fromMany = function(callbacks) {
	return function(v) {
		var _g = 0;
		while(_g < callbacks.length) {
			var callback = callbacks[_g];
			++_g;
			tink_core_Callback.invoke(callback,v);
		}
	};
};
tink_core_Callback.defer = function(f) {
	process.nextTick(f);
};
var tink_core_LinkObject = function() { };
tink_core_LinkObject.__name__ = "tink.core.LinkObject";
tink_core_LinkObject.__isInterface__ = true;
tink_core_LinkObject.prototype = {
	cancel: null
	,__class__: tink_core_LinkObject
};
var tink_core_CallbackLink = {};
tink_core_CallbackLink._new = function(link) {
	var this1 = new tink_core_SimpleLink(link);
	return this1;
};
tink_core_CallbackLink.cancel = function(this1) {
	if(this1 != null) {
		this1.cancel();
	}
};
tink_core_CallbackLink.dissolve = function(this1) {
	if(this1 != null) {
		this1.cancel();
	}
};
tink_core_CallbackLink.noop = function() {
};
tink_core_CallbackLink.toFunction = function(this1) {
	if(this1 == null) {
		return tink_core_CallbackLink.noop;
	} else {
		return $bind(this1,this1.cancel);
	}
};
tink_core_CallbackLink.toCallback = function(this1) {
	return function(_) {
		this1.cancel();
	};
};
tink_core_CallbackLink.fromFunction = function(f) {
	var this1 = new tink_core_SimpleLink(f);
	return this1;
};
tink_core_CallbackLink.join = function(a,b) {
	return new tink_core__$Callback_LinkPair(a,b);
};
tink_core_CallbackLink.fromMany = function(callbacks) {
	var this1 = new tink_core_SimpleLink(function() {
		if(callbacks != null) {
			var _g = 0;
			while(_g < callbacks.length) {
				var cb = callbacks[_g];
				++_g;
				if(cb != null) {
					cb.cancel();
				}
			}
		} else {
			callbacks = null;
		}
	});
	return this1;
};
var tink_core_SimpleLink = function(f) {
	this.f = f;
};
tink_core_SimpleLink.__name__ = "tink.core.SimpleLink";
tink_core_SimpleLink.__interfaces__ = [tink_core_LinkObject];
tink_core_SimpleLink.prototype = {
	f: null
	,cancel: function() {
		if(this.f != null) {
			this.f();
			this.f = null;
		}
	}
	,__class__: tink_core_SimpleLink
};
var tink_core__$Callback_LinkPair = function(a,b) {
	this.dissolved = false;
	this.a = a;
	this.b = b;
};
tink_core__$Callback_LinkPair.__name__ = "tink.core._Callback.LinkPair";
tink_core__$Callback_LinkPair.__interfaces__ = [tink_core_LinkObject];
tink_core__$Callback_LinkPair.prototype = {
	a: null
	,b: null
	,dissolved: null
	,cancel: function() {
		if(!this.dissolved) {
			this.dissolved = true;
			var this1 = this.a;
			if(this1 != null) {
				this1.cancel();
			}
			var this1 = this.b;
			if(this1 != null) {
				this1.cancel();
			}
			this.a = null;
			this.b = null;
		}
	}
	,__class__: tink_core__$Callback_LinkPair
};
var tink_core__$Callback_ListCell = function(cb,list) {
	if(cb == null) {
		throw haxe_Exception.thrown("callback expected but null received");
	}
	this.cb = cb;
	this.list = list;
};
tink_core__$Callback_ListCell.__name__ = "tink.core._Callback.ListCell";
tink_core__$Callback_ListCell.__interfaces__ = [tink_core_LinkObject];
tink_core__$Callback_ListCell.prototype = {
	cb: null
	,list: null
	,invoke: function(data) {
		if(this.list != null) {
			tink_core_Callback.invoke(this.cb,data);
		}
	}
	,clear: function() {
		this.cb = null;
		this.list = null;
	}
	,cancel: function() {
		if(this.list != null) {
			var list = this.list;
			this.cb = null;
			this.list = null;
			if(--list.used < list.used >> 1) {
				list.compact();
			}
		}
	}
	,__class__: tink_core__$Callback_ListCell
};
var tink_core_TypedError = function(code,message,pos) {
	if(code == null) {
		code = 500;
	}
	this.isTinkError = true;
	this.code = code;
	this.message = message;
	this.pos = pos;
	this.exceptionStack = [];
	this.callStack = [];
};
tink_core_TypedError.__name__ = "tink.core.TypedError";
tink_core_TypedError.withData = function(code,message,data,pos) {
	return tink_core_TypedError.typed(code,message,data,pos);
};
tink_core_TypedError.typed = function(code,message,data,pos) {
	var ret = new tink_core_TypedError(code,message,pos);
	ret.data = data;
	return ret;
};
tink_core_TypedError.ofJsError = function(e,pos) {
	return tink_core_TypedError.withData(500,e.message,e,pos);
};
tink_core_TypedError.asError = function(v) {
	if(v != null && v.isTinkError) {
		return v;
	} else {
		return null;
	}
};
tink_core_TypedError.catchExceptions = function(f,report,pos) {
	try {
		return tink_core_Outcome.Success(f());
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
		var e = haxe_Exception.caught(_g).unwrap();
		var _g = tink_core_TypedError.asError(e);
		var tmp;
		if(_g == null) {
			tmp = report == null ? tink_core_TypedError.withData(null,"Unexpected Error",e,pos) : report(e);
		} else {
			var e = _g;
			tmp = e;
		}
		return tink_core_Outcome.Failure(tmp);
	}
};
tink_core_TypedError.reporter = function(code,message,pos) {
	return function(e) {
		return tink_core_TypedError.withData(code,message,e,pos);
	};
};
tink_core_TypedError.rethrow = function(any) {
	throw haxe_Exception.thrown(any);
};
tink_core_TypedError.tryFinally = function(f,cleanup) {
	try { return f(); } finally { cleanup(); }
	return null;
};
tink_core_TypedError.prototype = {
	message: null
	,code: null
	,data: null
	,pos: null
	,callStack: null
	,exceptionStack: null
	,isTinkError: null
	,printPos: function() {
		return this.pos.className + "." + this.pos.methodName + ":" + this.pos.lineNumber;
	}
	,toString: function() {
		var ret = "Error#" + this.code + ": " + this.message;
		if(this.pos != null) {
			ret += " @ " + this.printPos();
		}
		return ret;
	}
	,throwSelf: function() {
		var any = this;
		throw haxe_Exception.thrown(any);
	}
	,__class__: tink_core_TypedError
};
var tink_core_Stack = {};
tink_core_Stack.toString = function(this1) {
	return "Error stack not available. Compile with -D error_stack.";
};
var tink_core__$Future_NeverFuture = function() {
};
tink_core__$Future_NeverFuture.__name__ = "tink.core._Future.NeverFuture";
tink_core__$Future_NeverFuture.__interfaces__ = [tink_core_FutureObject];
tink_core__$Future_NeverFuture.prototype = {
	map: function(f) {
		return tink_core__$Future_NeverFuture.inst;
	}
	,flatMap: function(f) {
		return tink_core__$Future_NeverFuture.inst;
	}
	,handle: function(callback) {
		return null;
	}
	,gather: function() {
		return tink_core__$Future_NeverFuture.inst;
	}
	,eager: function() {
		return tink_core__$Future_NeverFuture.inst;
	}
	,__class__: tink_core__$Future_NeverFuture
};
var tink_core__$Lazy_LazyObject = function() { };
tink_core__$Lazy_LazyObject.__name__ = "tink.core._Lazy.LazyObject";
tink_core__$Lazy_LazyObject.__isInterface__ = true;
tink_core__$Lazy_LazyObject.prototype = {
	get: null
	,map: null
	,flatMap: null
	,__class__: tink_core__$Lazy_LazyObject
};
var tink_core__$Lazy_LazyConst = function(value) {
	this.value = value;
};
tink_core__$Lazy_LazyConst.__name__ = "tink.core._Lazy.LazyConst";
tink_core__$Lazy_LazyConst.__interfaces__ = [tink_core__$Lazy_LazyObject];
tink_core__$Lazy_LazyConst.prototype = {
	value: null
	,get: function() {
		return this.value;
	}
	,map: function(f) {
		var _gthis = this;
		return new tink_core__$Lazy_LazyFunc(function() {
			return f(_gthis.value);
		});
	}
	,flatMap: function(f) {
		var _gthis = this;
		return new tink_core__$Lazy_LazyFunc(function() {
			return f(_gthis.value).get();
		});
	}
	,__class__: tink_core__$Lazy_LazyConst
};
var tink_core__$Future_SyncFuture = function(value) {
	this.value = value;
};
tink_core__$Future_SyncFuture.__name__ = "tink.core._Future.SyncFuture";
tink_core__$Future_SyncFuture.__interfaces__ = [tink_core_FutureObject];
tink_core__$Future_SyncFuture.prototype = {
	value: null
	,map: function(f) {
		return new tink_core__$Future_SyncFuture(this.value.map(f));
	}
	,flatMap: function(f) {
		var _gthis = this;
		return new tink_core__$Future_SuspendableFuture(function($yield) {
			var tmp = _gthis.value.get();
			return f(tmp).handle($yield);
		});
	}
	,handle: function(cb) {
		tink_core_Callback.invoke(cb,this.value.get());
		return null;
	}
	,eager: function() {
		return this;
	}
	,gather: function() {
		return this;
	}
	,__class__: tink_core__$Future_SyncFuture
};
var tink_core_Future = {};
tink_core_Future._new = function(f) {
	var this1 = new tink_core__$Future_SuspendableFuture(f);
	return this1;
};
tink_core_Future.first = function(this1,other) {
	var ret = new tink_core_FutureTrigger();
	var l1 = this1.handle($bind(ret,ret.trigger));
	var l2 = other.handle($bind(ret,ret.trigger));
	var ret1 = ret;
	if(l1 != null) {
		var this1 = l1;
		ret1.handle(function(_) {
			this1.cancel();
		});
	}
	if(l2 != null) {
		var this2 = l2;
		ret1.handle(function(_) {
			this2.cancel();
		});
	}
	return ret1;
};
tink_core_Future.map = function(this1,f,gather) {
	if(gather == null) {
		gather = true;
	}
	var ret = this1.map(f);
	if(gather) {
		return ret.gather();
	} else {
		return ret;
	}
};
tink_core_Future.flatMap = function(this1,next,gather) {
	if(gather == null) {
		gather = true;
	}
	var ret = this1.flatMap(next);
	if(gather) {
		return ret.gather();
	} else {
		return ret;
	}
};
tink_core_Future.next = function(this1,n) {
	return this1.flatMap(function(v) {
		return n(v);
	});
};
tink_core_Future.merge = function(this1,other,merger,gather) {
	if(gather == null) {
		gather = true;
	}
	var gather1 = gather;
	if(gather1 == null) {
		gather1 = true;
	}
	var ret = this1.flatMap(function(t) {
		var gather = false;
		if(gather == null) {
			gather = true;
		}
		var ret = other.map(function(a) {
			return merger(t,a);
		});
		if(gather) {
			return ret.gather();
		} else {
			return ret;
		}
	});
	if(gather1) {
		return ret.gather();
	} else {
		return ret;
	}
};
tink_core_Future.flatten = function(f) {
	return new tink_core__$Future_SuspendableFuture(function($yield) {
		var inner = null;
		var outer = f.handle(function(second) {
			inner = second.handle($yield);
		});
		var this1 = new tink_core_SimpleLink(function() {
			if(inner != null) {
				inner.cancel();
			}
		});
		return new tink_core__$Callback_LinkPair(outer,this1);
	});
};
tink_core_Future.ofJsPromise = function(promise) {
	return tink_core_Future.async(function(cb) {
		promise.then(function(a) {
			cb(tink_core_Outcome.Success(a));
		}).catch(function(e) {
			var tmp = tink_core_Outcome.Failure(tink_core_TypedError.withData(null,e.message,e,{ fileName : "tink/core/Future.hx", lineNumber : 89, className : "tink.core._Future.Future_Impl_", methodName : "ofJsPromise"}));
			cb(tmp);
		});
	});
};
tink_core_Future.ofAny = function(v) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(v));
};
tink_core_Future.asPromise = function(s) {
	return s;
};
tink_core_Future.ofMany = function(futures,gather) {
	if(gather == null) {
		gather = true;
	}
	var ret = new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst([]));
	var _g = 0;
	while(_g < futures.length) {
		var f = [futures[_g]];
		++_g;
		var gather1 = false;
		if(gather1 == null) {
			gather1 = true;
		}
		var ret1 = ret.flatMap((function(f) {
			return function(results) {
				var gather = false;
				if(gather == null) {
					gather = true;
				}
				var ret = (function() {
					return function(result) {
						return results.concat([result]);
					};
				})();
				var ret1 = f[0].map(ret);
				if(gather) {
					return ret1.gather();
				} else {
					return ret1;
				}
			};
		})(f));
		ret = gather1 ? ret1.gather() : ret1;
	}
	if(gather) {
		return ret.gather();
	} else {
		return ret;
	}
};
tink_core_Future.fromMany = function(futures) {
	return tink_core_Future.ofMany(futures);
};
tink_core_Future.lazy = function(l) {
	return new tink_core__$Future_SyncFuture(l);
};
tink_core_Future.sync = function(v) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(v));
};
tink_core_Future.isFuture = function(maybeFuture) {
	return js_Boot.__implements(maybeFuture,tink_core_FutureObject);
};
tink_core_Future.async = function(f,lazy) {
	if(lazy == null) {
		lazy = false;
	}
	if(lazy) {
		return new tink_core__$Future_SuspendableFuture(function($yield) {
			f($yield);
			return null;
		});
	} else {
		var op = new tink_core_FutureTrigger();
		var wrapped = f;
		tink_core_Callback.invoke(wrapped,$bind(op,op.trigger));
		return op;
	}
};
tink_core_Future.or = function(a,b) {
	return tink_core_Future.first(a,b);
};
tink_core_Future.either = function(a,b) {
	var gather = false;
	if(gather == null) {
		gather = true;
	}
	var ret = a.map(haxe_ds_Either.Left);
	var tmp = gather ? ret.gather() : ret;
	var gather = false;
	if(gather == null) {
		gather = true;
	}
	var ret = b.map(haxe_ds_Either.Right);
	return tink_core_Future.first(tmp,gather ? ret.gather() : ret);
};
tink_core_Future.and = function(a,b) {
	return tink_core_Future.merge(a,b,function(a,b) {
		var this1 = new tink_core_MPair(a,b);
		return this1;
	});
};
tink_core_Future._tryFailingFlatMap = function(f,map) {
	var ret = f.flatMap(function(o) {
		switch(o._hx_index) {
		case 0:
			var d = o.data;
			return map(d);
		case 1:
			var f = o.failure;
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(f)));
		}
	});
	return ret.gather();
};
tink_core_Future._tryFlatMap = function(f,map) {
	var ret = f.flatMap(function(o) {
		switch(o._hx_index) {
		case 0:
			var d = o.data;
			var ret = map(d).map(tink_core_Outcome.Success);
			return ret.gather();
		case 1:
			var f = o.failure;
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(f)));
		}
	});
	return ret.gather();
};
tink_core_Future._tryFailingMap = function(f,map) {
	var ret = f.map(function(o) {
		return tink_core_OutcomeTools.flatMap(o,tink_core__$Outcome_OutcomeMapper.withSameError(map));
	});
	return ret.gather();
};
tink_core_Future._tryMap = function(f,map) {
	var ret = f.map(function(o) {
		return tink_core_OutcomeTools.map(o,map);
	});
	return ret.gather();
};
tink_core_Future._flatMap = function(f,map) {
	var ret = f.flatMap(map);
	return ret.gather();
};
tink_core_Future._map = function(f,map) {
	var ret = f.map(map);
	return ret.gather();
};
tink_core_Future.trigger = function() {
	return new tink_core_FutureTrigger();
};
tink_core_Future.delay = function(ms,value) {
	return tink_core_Future.async(function(cb) {
		haxe_Timer.delay(function() {
			var tmp = value.get();
			cb(tmp);
		},ms);
	});
};
var tink_core_JsPromiseTools = function() { };
tink_core_JsPromiseTools.__name__ = "tink.core.JsPromiseTools";
tink_core_JsPromiseTools.toSurprise = function(promise) {
	return tink_core_Future.ofJsPromise(promise);
};
tink_core_JsPromiseTools.toPromise = function(promise) {
	return tink_core_Future.ofJsPromise(promise);
};
var tink_core__$Future_SuspendableFuture = function(wakeup) {
	this.suspended = true;
	var _gthis = this;
	this.wakeup = wakeup;
	this.callbacks = new tink_core_CallbackList();
	this.callbacks.ondrain = function() {
		if(_gthis.callbacks != null) {
			_gthis.suspended = true;
			var this1 = _gthis.link;
			if(this1 != null) {
				this1.cancel();
			}
			_gthis.link = null;
		}
	};
};
tink_core__$Future_SuspendableFuture.__name__ = "tink.core._Future.SuspendableFuture";
tink_core__$Future_SuspendableFuture.__interfaces__ = [tink_core_FutureObject];
tink_core__$Future_SuspendableFuture.prototype = {
	callbacks: null
	,result: null
	,suspended: null
	,link: null
	,wakeup: null
	,trigger: function(value) {
		var _g = this.callbacks;
		if(_g != null) {
			var list = _g;
			this.callbacks = null;
			this.suspended = false;
			this.result = value;
			this.link = null;
			this.wakeup = null;
			list.invoke(value,true);
		}
	}
	,handle: function(callback) {
		var _g = this.callbacks;
		if(_g == null) {
			tink_core_Callback.invoke(callback,this.result);
			return null;
		} else {
			var v = _g;
			var _this = this.callbacks;
			var node = new tink_core__$Callback_ListCell(callback,_this);
			_this.cells.push(node);
			_this.used++;
			var ret = node;
			if(this.suspended) {
				this.suspended = false;
				this.link = this.wakeup($bind(this,this.trigger));
			}
			return ret;
		}
	}
	,map: function(f) {
		var _gthis = this;
		return new tink_core__$Future_SuspendableFuture(function($yield) {
			return _gthis.handle(function(res) {
				var tmp = f(res);
				$yield(tmp);
			});
		});
	}
	,flatMap: function(f) {
		return tink_core_Future.flatten(this.map(f));
	}
	,gather: function() {
		return this;
	}
	,eager: function() {
		this.handle(tink_core_Callback.fromNiladic(function() {
		}));
		return this;
	}
	,__class__: tink_core__$Future_SuspendableFuture
};
var tink_core_Lazy = {};
tink_core_Lazy.get = function(this1) {
	return this1.get();
};
tink_core_Lazy.ofFunc = function(f) {
	return new tink_core__$Lazy_LazyFunc(f);
};
tink_core_Lazy.map = function(this1,f) {
	return this1.map(f);
};
tink_core_Lazy.flatMap = function(this1,f) {
	return this1.flatMap(f);
};
tink_core_Lazy.ofConst = function(c) {
	return new tink_core__$Lazy_LazyConst(c);
};
var tink_core__$Lazy_LazyFunc = function(f) {
	this.f = f;
};
tink_core__$Lazy_LazyFunc.__name__ = "tink.core._Lazy.LazyFunc";
tink_core__$Lazy_LazyFunc.__interfaces__ = [tink_core__$Lazy_LazyObject];
tink_core__$Lazy_LazyFunc.prototype = {
	f: null
	,result: null
	,get: function() {
		if(this.f != null) {
			this.result = this.f();
			this.f = null;
		}
		return this.result;
	}
	,map: function(f) {
		var _gthis = this;
		return new tink_core__$Lazy_LazyFunc(function() {
			var tmp = _gthis.get();
			return f(tmp);
		});
	}
	,flatMap: function(f) {
		var _gthis = this;
		return new tink_core__$Lazy_LazyFunc(function() {
			var this1 = _gthis.get();
			return f(this1).get();
		});
	}
	,__class__: tink_core__$Lazy_LazyFunc
};
var tink_core_NamedWith = function(name,value) {
	this.name = name;
	this.value = value;
};
tink_core_NamedWith.__name__ = "tink.core.NamedWith";
tink_core_NamedWith.prototype = {
	name: null
	,value: null
	,__class__: tink_core_NamedWith
};
var tink_core_OptionTools = function() { };
tink_core_OptionTools.__name__ = "tink.core.OptionTools";
tink_core_OptionTools.force = function(o,pos) {
	if(o._hx_index == 0) {
		var v = o.v;
		return v;
	} else {
		throw haxe_Exception.thrown(new tink_core_TypedError(404,"Some value expected but none found",pos));
	}
};
tink_core_OptionTools.or = function(o,l) {
	if(o._hx_index == 0) {
		var v = o.v;
		return v;
	} else {
		return l.get();
	}
};
tink_core_OptionTools.orNull = function(o) {
	if(o._hx_index == 0) {
		var v = o.v;
		return v;
	} else {
		return null;
	}
};
tink_core_OptionTools.filter = function(o,f) {
	if(o._hx_index == 0) {
		if(f(o.v) == false) {
			return haxe_ds_Option.None;
		} else {
			return o;
		}
	} else {
		return o;
	}
};
tink_core_OptionTools.satisfies = function(o,f) {
	if(o._hx_index == 0) {
		var v = o.v;
		return f(v);
	} else {
		return false;
	}
};
tink_core_OptionTools.equals = function(o,v) {
	if(o._hx_index == 0) {
		var v1 = o.v;
		return v1 == v;
	} else {
		return false;
	}
};
tink_core_OptionTools.map = function(o,f) {
	if(o._hx_index == 0) {
		var v = o.v;
		return haxe_ds_Option.Some(f(v));
	} else {
		return haxe_ds_Option.None;
	}
};
tink_core_OptionTools.flatMap = function(o,f) {
	if(o._hx_index == 0) {
		var v = o.v;
		return f(v);
	} else {
		return haxe_ds_Option.None;
	}
};
tink_core_OptionTools.iterator = function(o) {
	return new tink_core_OptionIter(o);
};
tink_core_OptionTools.toArray = function(o) {
	if(o._hx_index == 0) {
		var v = o.v;
		return [v];
	} else {
		return [];
	}
};
var tink_core_OptionIter = function(o) {
	this.alive = true;
	if(o._hx_index == 0) {
		var v = o.v;
		this.value = v;
	} else {
		this.alive = false;
	}
};
tink_core_OptionIter.__name__ = "tink.core.OptionIter";
tink_core_OptionIter.prototype = {
	value: null
	,alive: null
	,hasNext: function() {
		return this.alive;
	}
	,next: function() {
		this.alive = false;
		return this.value;
	}
	,__class__: tink_core_OptionIter
};
var tink_core_Outcome = $hxEnums["tink.core.Outcome"] = { __ename__ : "tink.core.Outcome", __constructs__ : ["Success","Failure"]
	,Success: ($_=function(data) { return {_hx_index:0,data:data,__enum__:"tink.core.Outcome",toString:$estr}; },$_.__params__ = ["data"],$_)
	,Failure: ($_=function(failure) { return {_hx_index:1,failure:failure,__enum__:"tink.core.Outcome",toString:$estr}; },$_.__params__ = ["failure"],$_)
};
var tink_core_OutcomeTools = function() { };
tink_core_OutcomeTools.__name__ = "tink.core.OutcomeTools";
tink_core_OutcomeTools.sure = function(outcome) {
	switch(outcome._hx_index) {
	case 0:
		var data = outcome.data;
		return data;
	case 1:
		var failure = outcome.failure;
		var _g = tink_core_TypedError.asError(failure);
		if(_g == null) {
			throw haxe_Exception.thrown(failure);
		} else {
			var e = _g;
			return e.throwSelf();
		}
		break;
	}
};
tink_core_OutcomeTools.toOption = function(outcome) {
	switch(outcome._hx_index) {
	case 0:
		var data = outcome.data;
		return haxe_ds_Option.Some(data);
	case 1:
		var _g = outcome.failure;
		return haxe_ds_Option.None;
	}
};
tink_core_OutcomeTools.toOutcome = function(option,pos) {
	switch(option._hx_index) {
	case 0:
		var value = option.v;
		return tink_core_Outcome.Success(value);
	case 1:
		return tink_core_Outcome.Failure(new tink_core_TypedError(404,"Some value expected but none found in " + pos.fileName + "@line " + pos.lineNumber,{ fileName : "tink/core/Outcome.hx", lineNumber : 48, className : "tink.core.OutcomeTools", methodName : "toOutcome"}));
	}
};
tink_core_OutcomeTools.orNull = function(outcome) {
	switch(outcome._hx_index) {
	case 0:
		var data = outcome.data;
		return data;
	case 1:
		var _g = outcome.failure;
		return null;
	}
};
tink_core_OutcomeTools.orUse = function(outcome,fallback) {
	switch(outcome._hx_index) {
	case 0:
		var data = outcome.data;
		return data;
	case 1:
		var _g = outcome.failure;
		return fallback.get();
	}
};
tink_core_OutcomeTools.orTry = function(outcome,fallback) {
	switch(outcome._hx_index) {
	case 0:
		var _g = outcome.data;
		return outcome;
	case 1:
		var _g = outcome.failure;
		return fallback.get();
	}
};
tink_core_OutcomeTools.equals = function(outcome,to) {
	switch(outcome._hx_index) {
	case 0:
		var data = outcome.data;
		return data == to;
	case 1:
		var _g = outcome.failure;
		return false;
	}
};
tink_core_OutcomeTools.map = function(outcome,transform) {
	switch(outcome._hx_index) {
	case 0:
		var a = outcome.data;
		return tink_core_Outcome.Success(transform(a));
	case 1:
		var f = outcome.failure;
		return tink_core_Outcome.Failure(f);
	}
};
tink_core_OutcomeTools.isSuccess = function(outcome) {
	if(outcome._hx_index == 0) {
		var _g = outcome.data;
		return true;
	} else {
		return false;
	}
};
tink_core_OutcomeTools.flatMap = function(o,mapper) {
	return tink_core__$Outcome_OutcomeMapper.apply(mapper,o);
};
tink_core_OutcomeTools.swap = function(outcome,v) {
	switch(outcome._hx_index) {
	case 0:
		var a = outcome.data;
		return tink_core_Outcome.Success(v);
	case 1:
		var f = outcome.failure;
		return tink_core_Outcome.Failure(f);
	}
};
tink_core_OutcomeTools.next = function(outcome,f) {
	switch(outcome._hx_index) {
	case 0:
		var v = outcome.data;
		return f(v);
	case 1:
		var e = outcome.failure;
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(e)));
	}
};
tink_core_OutcomeTools.attempt = function(f,report) {
	try {
		return tink_core_Outcome.Success(f());
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
		var e = haxe_Exception.caught(_g).unwrap();
		return tink_core_Outcome.Failure(report(e));
	}
};
tink_core_OutcomeTools.flatten = function(o) {
	switch(o._hx_index) {
	case 0:
		var _g = o.data;
		switch(_g._hx_index) {
		case 0:
			var d = _g.data;
			return tink_core_Outcome.Success(d);
		case 1:
			var f = _g.failure;
			return tink_core_Outcome.Failure(f);
		}
		break;
	case 1:
		var f = o.failure;
		return tink_core_Outcome.Failure(f);
	}
};
var tink_core__$Outcome_OutcomeMapper = {};
tink_core__$Outcome_OutcomeMapper._new = function(f) {
	var this1 = { f : f};
	return this1;
};
tink_core__$Outcome_OutcomeMapper.apply = function(this1,o) {
	return this1.f(o);
};
tink_core__$Outcome_OutcomeMapper.withSameError = function(f) {
	return tink_core__$Outcome_OutcomeMapper._new(function(o) {
		switch(o._hx_index) {
		case 0:
			var d = o.data;
			return f(d);
		case 1:
			var f1 = o.failure;
			return tink_core_Outcome.Failure(f1);
		}
	});
};
tink_core__$Outcome_OutcomeMapper.withEitherError = function(f) {
	return tink_core__$Outcome_OutcomeMapper._new(function(o) {
		switch(o._hx_index) {
		case 0:
			var d = o.data;
			var _g = f(d);
			switch(_g._hx_index) {
			case 0:
				var d = _g.data;
				return tink_core_Outcome.Success(d);
			case 1:
				var f1 = _g.failure;
				return tink_core_Outcome.Failure(haxe_ds_Either.Right(f1));
			}
			break;
		case 1:
			var f1 = o.failure;
			return tink_core_Outcome.Failure(haxe_ds_Either.Left(f1));
		}
	});
};
var tink_core_Pair = {};
tink_core_Pair._new = function(a,b) {
	var this1 = new tink_core_MPair(a,b);
	return this1;
};
tink_core_Pair.get_a = function(this1) {
	return this1.a;
};
tink_core_Pair.get_b = function(this1) {
	return this1.b;
};
tink_core_Pair.toBool = function(this1) {
	return this1 != null;
};
tink_core_Pair.isNil = function(this1) {
	return this1 == null;
};
tink_core_Pair.nil = function() {
	return null;
};
var tink_core_MPair = function(a,b) {
	this.a = a;
	this.b = b;
};
tink_core_MPair.__name__ = "tink.core.MPair";
tink_core_MPair.prototype = {
	a: null
	,b: null
	,__class__: tink_core_MPair
};
var tink_core_Progress = {};
tink_core_Progress.trigger = function() {
	return new tink_core_ProgressTrigger();
};
tink_core_Progress.make = function(f) {
	var value = tink_core_ProgressType.InProgress(tink_core_Progress.INIT);
	var signal = tink_core_Signal.trigger();
	var future = tink_core_Future.async(function(cb) {
		var progress = function(v,total) {
			switch(value._hx_index) {
			case 0:
				var current = value.v;
				if(current.a != v || !tink_core_TotalTools.eq(current.b,total)) {
					var this1 = new tink_core_MPair(v,total);
					var pv = this1;
					value = tink_core_ProgressType.InProgress(pv);
					signal.handlers.invoke(pv);
				}
				break;
			case 1:
				var _g = value.v;
				break;
			}
		};
		var finish = function(v) {
			if(value._hx_index == 1) {
				var _g = value.v;
			} else {
				value = tink_core_ProgressType.Finished(v);
				cb(v);
			}
		};
		f(progress,finish);
	});
	return new tink_core_CompositeProgress(future,signal);
};
tink_core_Progress.asFuture = function(this1) {
	return this1;
};
tink_core_Progress.asPromise = function(p) {
	return p;
};
tink_core_Progress.promise = function(v) {
	return new tink_core_PromiseProgress(v);
};
tink_core_Progress.future = function(v) {
	return new tink_core_FutureProgress(v);
};
tink_core_Progress.next = function(this1,f) {
	return tink_core_Future.next(this1,f);
};
var tink_core_SignalObject = function() { };
tink_core_SignalObject.__name__ = "tink.core.SignalObject";
tink_core_SignalObject.__isInterface__ = true;
tink_core_SignalObject.prototype = {
	listen: null
	,__class__: tink_core_SignalObject
};
var tink_core_ProgressObject = function() { };
tink_core_ProgressObject.__name__ = "tink.core.ProgressObject";
tink_core_ProgressObject.__isInterface__ = true;
tink_core_ProgressObject.__interfaces__ = [tink_core_SignalObject,tink_core_FutureObject];
var tink_core_CompositeProgress = function(future,signal) {
	this.future = future;
	this.signal = signal;
};
tink_core_CompositeProgress.__name__ = "tink.core.CompositeProgress";
tink_core_CompositeProgress.__interfaces__ = [tink_core_ProgressObject];
tink_core_CompositeProgress.prototype = {
	future: null
	,signal: null
	,map: function(f) {
		var ret = this.future.map(f);
		return ret.gather();
	}
	,flatMap: function(f) {
		var ret = this.future.flatMap(f);
		return ret.gather();
	}
	,handle: function(callback) {
		return this.future.handle(callback);
	}
	,listen: function(callback) {
		return this.signal.listen(callback);
	}
	,gather: function() {
		return this.future.gather();
	}
	,eager: function() {
		return this.future.eager();
	}
	,__class__: tink_core_CompositeProgress
};
var tink_core_ProgressTrigger = function() {
	this.value = tink_core_ProgressType.InProgress(tink_core_Progress.INIT);
	tink_core_CompositeProgress.call(this,this.futureTrigger = new tink_core_FutureTrigger(),this.signalTrigger = tink_core_Signal.trigger());
};
tink_core_ProgressTrigger.__name__ = "tink.core.ProgressTrigger";
tink_core_ProgressTrigger.__super__ = tink_core_CompositeProgress;
tink_core_ProgressTrigger.prototype = $extend(tink_core_CompositeProgress.prototype,{
	futureTrigger: null
	,signalTrigger: null
	,value: null
	,progress: function(v,total) {
		var _g = this.value;
		switch(_g._hx_index) {
		case 0:
			var current = _g.v;
			if(current.a != v || !tink_core_TotalTools.eq(current.b,total)) {
				var this1 = new tink_core_MPair(v,total);
				var pv = this1;
				this.value = tink_core_ProgressType.InProgress(pv);
				this.signalTrigger.handlers.invoke(pv);
			}
			break;
		case 1:
			var _g1 = _g.v;
			break;
		}
	}
	,finish: function(v) {
		var _g = this.value;
		if(_g._hx_index == 1) {
			var _g1 = _g.v;
		} else {
			this.value = tink_core_ProgressType.Finished(v);
			this.futureTrigger.trigger(v);
		}
	}
	,asProgress: function() {
		return this;
	}
	,__class__: tink_core_ProgressTrigger
});
var tink_core_FutureProgress = function(future) {
	var ret = future.flatMap(function(progress) {
		return progress;
	});
	tink_core_CompositeProgress.call(this,ret.gather(),tink_core_Signal.generate(function(cb) {
		future.handle(function(progress) {
			progress.listen(cb);
		});
	}));
};
tink_core_FutureProgress.__name__ = "tink.core.FutureProgress";
tink_core_FutureProgress.__super__ = tink_core_CompositeProgress;
tink_core_FutureProgress.prototype = $extend(tink_core_CompositeProgress.prototype,{
	__class__: tink_core_FutureProgress
});
var tink_core_PromiseProgress = function(promise) {
	var ret = promise.flatMap(function(o) {
		switch(o._hx_index) {
		case 0:
			var progress = o.data;
			return progress.map(tink_core_Outcome.Success);
		case 1:
			var e = o.failure;
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(e)));
		}
	});
	tink_core_CompositeProgress.call(this,ret.gather(),tink_core_Signal.generate(function(cb) {
		promise.handle(function(o) {
			switch(o._hx_index) {
			case 0:
				var progress = o.data;
				progress.listen(cb);
				break;
			case 1:
				var e = o.failure;
				break;
			}
		});
	}));
};
tink_core_PromiseProgress.__name__ = "tink.core.PromiseProgress";
tink_core_PromiseProgress.__super__ = tink_core_CompositeProgress;
tink_core_PromiseProgress.prototype = $extend(tink_core_CompositeProgress.prototype,{
	__class__: tink_core_PromiseProgress
});
var tink_core_ProgressValue = {};
tink_core_ProgressValue._new = function(value,total) {
	var this1 = new tink_core_MPair(value,total);
	var this2 = this1;
	return this2;
};
tink_core_ProgressValue.normalize = function(this1) {
	var o = this1.b;
	if(o._hx_index == 0) {
		var v = o.v;
		return haxe_ds_Option.Some(this1.a / v);
	} else {
		return haxe_ds_Option.None;
	}
};
tink_core_ProgressValue.get_value = function(this1) {
	return this1.a;
};
tink_core_ProgressValue.get_total = function(this1) {
	return this1.b;
};
var tink_core_UnitInterval = {};
tink_core_UnitInterval.toPercentageString = function(this1,dp) {
	var m = Math.pow(10,dp);
	var v = Math.round(this1 * m * 100) / m;
	var s = v == null ? "null" : "" + v;
	var _g = s.indexOf(".");
	if(_g == -1) {
		return s + "." + StringTools.lpad("","0",dp) + "%";
	} else {
		var i = _g;
		if(s.length - i > dp) {
			return HxOverrides.substr(s,0,dp + i + 1) + "%";
		} else {
			var i = _g;
			return StringTools.rpad(s,"0",i + dp + 1) + "%";
		}
	}
};
var tink_core_ProgressType = $hxEnums["tink.core.ProgressType"] = { __ename__ : "tink.core.ProgressType", __constructs__ : ["InProgress","Finished"]
	,InProgress: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"tink.core.ProgressType",toString:$estr}; },$_.__params__ = ["v"],$_)
	,Finished: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"tink.core.ProgressType",toString:$estr}; },$_.__params__ = ["v"],$_)
};
var tink_core_TotalTools = function() { };
tink_core_TotalTools.__name__ = "tink.core.TotalTools";
tink_core_TotalTools.eq = function(a,b) {
	switch(a._hx_index) {
	case 0:
		if(b._hx_index == 0) {
			var t1 = a.v;
			var t2 = b.v;
			return t1 == t2;
		} else {
			return false;
		}
		break;
	case 1:
		if(b._hx_index == 1) {
			return true;
		} else {
			return false;
		}
		break;
	}
};
var tink_core_Promise = {};
tink_core_Promise._new = function(f,lazy) {
	if(lazy == null) {
		lazy = false;
	}
	var this1 = tink_core_Future.async(function(cb) {
		f(function(v) {
			cb(tink_core_Outcome.Success(v));
		},function(e) {
			cb(tink_core_Outcome.Failure(e));
		});
	},lazy);
	return this1;
};
tink_core_Promise.eager = function(this1) {
	return this1.eager();
};
tink_core_Promise.map = function(this1,f) {
	var ret = this1.map(f);
	return ret.gather();
};
tink_core_Promise.flatMap = function(this1,f) {
	var ret = this1.flatMap(f);
	return ret.gather();
};
tink_core_Promise.tryRecover = function(this1,f) {
	var ret = this1.flatMap(function(o) {
		switch(o._hx_index) {
		case 0:
			var d = o.data;
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(o));
		case 1:
			var e = o.failure;
			return f(e);
		}
	});
	return ret.gather();
};
tink_core_Promise.recover = function(this1,f) {
	var ret = this1.flatMap(function(o) {
		switch(o._hx_index) {
		case 0:
			var d = o.data;
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(d));
		case 1:
			var e = o.failure;
			return f(e);
		}
	});
	return ret.gather();
};
tink_core_Promise.mapError = function(this1,f) {
	var ret = this1.map(function(o) {
		switch(o._hx_index) {
		case 0:
			var _g = o.data;
			return o;
		case 1:
			var e = o.failure;
			return tink_core_Outcome.Failure(f(e));
		}
	});
	return ret.gather();
};
tink_core_Promise.handle = function(this1,cb) {
	return this1.handle(cb);
};
tink_core_Promise.noise = function(this1) {
	return tink_core_Promise.next(this1,function(v) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(tink_core_Noise.Noise)));
	});
};
tink_core_Promise.isSuccess = function(this1) {
	var ret = this1.map(function(o) {
		return tink_core_OutcomeTools.isSuccess(o);
	});
	return ret.gather();
};
tink_core_Promise.next = function(this1,f,gather) {
	if(gather == null) {
		gather = true;
	}
	var gather1 = gather;
	if(gather1 == null) {
		gather1 = true;
	}
	var ret = this1.flatMap(function(o) {
		switch(o._hx_index) {
		case 0:
			var d = o.data;
			return f(d);
		case 1:
			var f1 = o.failure;
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(f1)));
		}
	});
	if(gather1) {
		return ret.gather();
	} else {
		return ret;
	}
};
tink_core_Promise.swap = function(this1,v) {
	return tink_core_Future._tryMap(this1,function(_) {
		return v;
	});
};
tink_core_Promise.swapError = function(this1,e) {
	return tink_core_Promise.mapError(this1,function(_) {
		return e;
	});
};
tink_core_Promise.merge = function(this1,other,merger,gather) {
	if(gather == null) {
		gather = true;
	}
	return tink_core_Promise.next(this1,function(t) {
		return tink_core_Promise.next(other,function(a) {
			return merger(t,a);
		},false);
	},gather);
};
tink_core_Promise.and = function(a,b) {
	return tink_core_Promise.merge(a,b,function(a,b) {
		var this1 = new tink_core_MPair(a,b);
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(this1)));
	});
};
tink_core_Promise.iterate = function(promises,$yield,fallback,lazy) {
	return tink_core_Future.async(function(cb) {
		var iter = $getIterator(promises);
		var next = null;
		next = function() {
			if(iter.hasNext()) {
				iter.next().handle(function(o) {
					switch(o._hx_index) {
					case 0:
						var v = o.data;
						$yield(v).handle(function(o) {
							switch(o._hx_index) {
							case 0:
								var _g = o.data;
								switch(_g._hx_index) {
								case 0:
									var ret = _g.v;
									cb(tink_core_Outcome.Success(ret));
									break;
								case 1:
									next();
									break;
								}
								break;
							case 1:
								var e = o.failure;
								cb(tink_core_Outcome.Failure(e));
								break;
							}
						});
						break;
					case 1:
						var e = o.failure;
						cb(tink_core_Outcome.Failure(e));
						break;
					}
				});
			} else {
				fallback.handle(cb);
			}
		};
		next();
	},lazy);
};
tink_core_Promise.retry = function(gen,next) {
	var stamp = function() {
		var hrtime = process.hrtime();
		return (hrtime[0] + hrtime[1] / 1e9) * 1000;
	};
	var start = stamp();
	var attempt = null;
	attempt = function(count) {
		var f = function(error) {
			var f = stamp() - start;
			return tink_core_Promise.next(next({ attempt : count, error : error, elapsed : f}),function(_) {
				return attempt(count + 1);
			});
		};
		var ret = gen().flatMap(function(o) {
			switch(o._hx_index) {
			case 0:
				var d = o.data;
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(o));
			case 1:
				var e = o.failure;
				return f(e);
			}
		});
		return ret.gather();
	};
	return attempt(1);
};
tink_core_Promise.ofJsPromise = function(promise) {
	return tink_core_Future.ofJsPromise(promise);
};
tink_core_Promise.toJsPromise = function(this1) {
	return new Promise(function(resolve,reject) {
		this1.handle(function(o) {
			switch(o._hx_index) {
			case 0:
				var v = o.data;
				resolve(v);
				break;
			case 1:
				var e = o.failure;
				reject(new tink_core__$Promise_TinkError(e));
				break;
			}
		});
	});
};
tink_core_Promise.ofSpecific = function(s) {
	return s;
};
tink_core_Promise.ofFuture = function(f) {
	var ret = f.map(tink_core_Outcome.Success);
	return ret.gather();
};
tink_core_Promise.ofOutcome = function(o) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(o));
};
tink_core_Promise.ofError = function(e) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(e)));
};
tink_core_Promise.ofData = function(d) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(d)));
};
tink_core_Promise.lazy = function(p) {
	return tink_core_Future.async(function(cb) {
		p.get().handle(cb);
	},true);
};
tink_core_Promise.inParallel = function(a,concurrency,lazy) {
	if(a.length == 0) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success([])));
	} else {
		return tink_core_Future.async(function(cb) {
			var result = [];
			var pending = a.length;
			var links = null;
			var linkArray = [];
			var sync = false;
			var i = 0;
			var iter_current;
			var iter_array;
			iter_current = 0;
			iter_array = a;
			var next = null;
			var done = function(o) {
				if(links == null) {
					sync = true;
				} else if(links != null) {
					links.cancel();
				}
				cb(o);
			};
			var fail = function(e) {
				pending = 0;
				done(tink_core_Outcome.Failure(e));
			};
			var set = function(index,value) {
				result[index] = value;
				if((pending -= 1) == 0) {
					done(tink_core_Outcome.Success(result));
				} else if(iter_current < iter_array.length && pending > 0) {
					next();
				}
			};
			next = function() {
				i += 1;
				var index = i - 1;
				iter_current += 1;
				var next = iter_array[iter_current - 1].handle(function(o) {
					switch(o._hx_index) {
					case 0:
						var v = o.data;
						set(index,v);
						break;
					case 1:
						var e = o.failure;
						fail(e);
						break;
					}
				});
				linkArray.push(next);
			};
			while(true) {
				var tmp;
				if(iter_current < iter_array.length && pending > 0) {
					if(concurrency != null) {
						concurrency -= 1;
						tmp = concurrency + 1 > 0;
					} else {
						tmp = true;
					}
				} else {
					tmp = false;
				}
				if(!tmp) {
					break;
				}
				next();
			}
			links = tink_core_CallbackLink.fromMany(linkArray);
			if(sync) {
				if(links != null) {
					links.cancel();
				}
			}
		},lazy);
	}
};
tink_core_Promise.inSequence = function(a) {
	var loop = null;
	loop = function(index) {
		if(index == a.length) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success([])));
		} else {
			return tink_core_Promise.next(a[index],function(head) {
				return tink_core_Promise.next(loop(index + 1),function(tail) {
					return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success([head].concat(tail))));
				});
			});
		}
	};
	return loop(0);
};
tink_core_Promise.cache = function(gen) {
	var p = null;
	return function() {
		var ret = p;
		if(ret == null) {
			var sync = false;
			ret = tink_core_Promise.next(gen(),function(o) {
				o.b.handle(function(_) {
					sync = true;
					p = null;
				});
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(o.a)));
			});
			if(!sync) {
				p = ret;
			}
		}
		var ret1 = ret.map(function(o) {
			if(!tink_core_OutcomeTools.isSuccess(o)) {
				p = null;
			}
			return o;
		});
		return ret1.gather();
	};
};
tink_core_Promise.lift = function(p) {
	return p;
};
tink_core_Promise.trigger = function() {
	var this1 = new tink_core_FutureTrigger();
	return this1;
};
tink_core_Promise.resolve = function(v) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(v)));
};
tink_core_Promise.reject = function(e) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(e)));
};
var tink_core_Next = {};
tink_core_Next.ofSafe = function(f) {
	return function(x) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(x)));
	};
};
tink_core_Next.ofSync = function(f) {
	return function(x) {
		var ret = f(x).map(tink_core_Outcome.Success);
		return ret.gather();
	};
};
tink_core_Next.ofSafeSync = function(f) {
	return function(x) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(f(x))));
	};
};
tink_core_Next._chain = function(a,b) {
	return function(v) {
		return tink_core_Promise.next(a(v),b);
	};
};
var tink_core_Recover = {};
tink_core_Recover.ofSync = function(f) {
	return function(e) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(e)));
	};
};
var tink_core_Combiner = {};
tink_core_Combiner.ofSafe = function(f) {
	return function(x1,x2) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(x1,x2)));
	};
};
tink_core_Combiner.ofSync = function(f) {
	return function(x1,x2) {
		var ret = f(x1,x2).map(tink_core_Outcome.Success);
		return ret.gather();
	};
};
tink_core_Combiner.ofSafeSync = function(f) {
	return function(x1,x2) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(f(x1,x2))));
	};
};
var tink_core_PromiseTrigger = {};
tink_core_PromiseTrigger._new = function() {
	var this1 = new tink_core_FutureTrigger();
	return this1;
};
tink_core_PromiseTrigger.resolve = function(this1,v) {
	return this1.trigger(tink_core_Outcome.Success(v));
};
tink_core_PromiseTrigger.reject = function(this1,e) {
	return this1.trigger(tink_core_Outcome.Failure(e));
};
tink_core_PromiseTrigger.asPromise = function(this1) {
	return this1;
};
var tink_core__$Promise_TinkError = function(e) {
	Error.call(this,e.message);
	this.data = e;
};
tink_core__$Promise_TinkError.__name__ = "tink.core._Promise.TinkError";
tink_core__$Promise_TinkError.__super__ = Error;
tink_core__$Promise_TinkError.prototype = $extend(Error.prototype,{
	data: null
	,__class__: tink_core__$Promise_TinkError
});
var tink_core_Ref = {};
tink_core_Ref._new = function() {
	var this1 = new Array(1);
	var this2 = this1;
	return this2;
};
tink_core_Ref.get_value = function(this1) {
	return this1[0];
};
tink_core_Ref.set_value = function(this1,param) {
	return this1[0] = param;
};
tink_core_Ref.toString = function(this1) {
	return "@[" + Std.string(this1[0]) + "]";
};
tink_core_Ref.to = function(v) {
	var this1 = new Array(1);
	var this2 = this1;
	var ret = this2;
	ret[0] = v;
	return ret;
};
var tink_core_Signal = {};
tink_core_Signal._new = function(f) {
	var this1 = new tink_core__$Signal_SimpleSignal(f);
	return this1;
};
tink_core_Signal.handle = function(this1,handler) {
	return this1.listen(handler);
};
tink_core_Signal.map = function(this1,f,gather) {
	if(gather == null) {
		gather = true;
	}
	var this2 = new tink_core__$Signal_SimpleSignal(function(cb) {
		return this1.listen(function(result) {
			var this1 = f(result);
			tink_core_Callback.invoke(cb,this1);
		});
	});
	var ret = this2;
	if(gather) {
		return tink_core_Signal.gather(ret);
	} else {
		return ret;
	}
};
tink_core_Signal.flatMap = function(this1,f,gather) {
	if(gather == null) {
		gather = true;
	}
	var this2 = new tink_core__$Signal_SimpleSignal(function(cb) {
		return this1.listen(function(result) {
			f(result).handle(cb);
		});
	});
	var ret = this2;
	if(gather) {
		return tink_core_Signal.gather(ret);
	} else {
		return ret;
	}
};
tink_core_Signal.filter = function(this1,f,gather) {
	if(gather == null) {
		gather = true;
	}
	var this2 = new tink_core__$Signal_SimpleSignal(function(cb) {
		return this1.listen(function(result) {
			if(f(result)) {
				tink_core_Callback.invoke(cb,result);
			}
		});
	});
	var ret = this2;
	if(gather) {
		return tink_core_Signal.gather(ret);
	} else {
		return ret;
	}
};
tink_core_Signal.select = function(this1,selector,gather) {
	if(gather == null) {
		gather = true;
	}
	var this2 = new tink_core__$Signal_SimpleSignal(function(cb) {
		return this1.listen(function(result) {
			var _g = selector(result);
			switch(_g._hx_index) {
			case 0:
				var v = _g.v;
				tink_core_Callback.invoke(cb,v);
				break;
			case 1:
				break;
			}
		});
	});
	var ret = this2;
	if(gather) {
		return tink_core_Signal.gather(ret);
	} else {
		return ret;
	}
};
tink_core_Signal.join = function(this1,other,gather) {
	if(gather == null) {
		gather = true;
	}
	var this2 = new tink_core__$Signal_SimpleSignal(function(cb) {
		return new tink_core__$Callback_LinkPair(this1.listen(cb),other.listen(cb));
	});
	var ret = this2;
	if(gather) {
		return tink_core_Signal.gather(ret);
	} else {
		return ret;
	}
};
tink_core_Signal.nextTime = function(this1,condition) {
	var ret = new tink_core_FutureTrigger();
	var link = null;
	var immediate = false;
	link = this1.listen(function(v) {
		if(condition == null || condition(v)) {
			ret.trigger(v);
			if(link == null) {
				immediate = true;
			} else if(link != null) {
				link.cancel();
			}
		}
	});
	if(immediate) {
		if(link != null) {
			link.cancel();
		}
	}
	return ret;
};
tink_core_Signal.until = function(this1,end) {
	var ret = new tink_core__$Signal_Suspendable(function($yield) {
		var this2 = this1.listen($yield);
		if(this2 == null) {
			return tink_core_CallbackLink.noop;
		} else {
			return $bind(this2,this2.cancel);
		}
	});
	end.handle(tink_core_Callback.fromNiladic($bind(ret,ret.kill)));
	return ret;
};
tink_core_Signal.next = function(this1,condition) {
	return tink_core_Signal.nextTime(this1,condition);
};
tink_core_Signal.noise = function(this1) {
	return tink_core_Signal.map(this1,function(_) {
		return tink_core_Noise.Noise;
	});
};
tink_core_Signal.gather = function(this1) {
	var ret = tink_core_Signal.trigger();
	this1.listen(function(x) {
		ret.handlers.invoke(x);
	});
	return ret;
};
tink_core_Signal.generate = function(generator) {
	var ret = tink_core_Signal.trigger();
	generator($bind(ret,ret.trigger));
	return ret;
};
tink_core_Signal.trigger = function() {
	return new tink_core_SignalTrigger();
};
tink_core_Signal.create = function(create) {
	return new tink_core__$Signal_Suspendable(create);
};
tink_core_Signal.ofClassical = function(add,remove,gather) {
	if(gather == null) {
		gather = true;
	}
	var this1 = new tink_core__$Signal_SimpleSignal(function(cb) {
		var f = function(a) {
			tink_core_Callback.invoke(cb,a);
		};
		add(f);
		var _g = remove;
		var a1 = f;
		var this1 = new tink_core_SimpleLink(function() {
			_g(a1);
		});
		return this1;
	});
	var ret = this1;
	if(gather) {
		return tink_core_Signal.gather(ret);
	} else {
		return ret;
	}
};
var tink_core__$Signal_SimpleSignal = function(f) {
	this.f = f;
};
tink_core__$Signal_SimpleSignal.__name__ = "tink.core._Signal.SimpleSignal";
tink_core__$Signal_SimpleSignal.__interfaces__ = [tink_core_SignalObject];
tink_core__$Signal_SimpleSignal.prototype = {
	f: null
	,listen: function(cb) {
		return this.f(cb);
	}
	,__class__: tink_core__$Signal_SimpleSignal
};
var tink_core__$Signal_Suspendable = function(activate) {
	this.killed = false;
	this.trigger = new tink_core_SignalTrigger();
	this.activate = activate;
};
tink_core__$Signal_Suspendable.__name__ = "tink.core._Signal.Suspendable";
tink_core__$Signal_Suspendable.__interfaces__ = [tink_core_SignalObject];
tink_core__$Signal_Suspendable.prototype = {
	trigger: null
	,activate: null
	,suspend: null
	,check: null
	,killed: null
	,kill: function() {
		if(!this.killed) {
			this.killed = true;
			this.trigger = null;
		}
	}
	,listen: function(cb) {
		var _gthis = this;
		if(this.killed) {
			return null;
		}
		if(this.trigger.handlers.used == 0) {
			this.suspend = this.activate(($_=this.trigger,$bind($_,$_.trigger)));
		}
		var _this = this.trigger.handlers;
		var node = new tink_core__$Callback_ListCell(cb,_this);
		_this.cells.push(node);
		_this.used++;
		var this1 = new tink_core_SimpleLink(function() {
			if(_gthis.trigger.handlers.used == 0) {
				_gthis.suspend();
				_gthis.suspend = null;
			}
		});
		return new tink_core__$Callback_LinkPair(node,this1);
	}
	,__class__: tink_core__$Signal_Suspendable
};
var tink_core_SignalTrigger = function() {
	this.handlers = new tink_core_CallbackList();
};
tink_core_SignalTrigger.__name__ = "tink.core.SignalTrigger";
tink_core_SignalTrigger.__interfaces__ = [tink_core_SignalObject];
tink_core_SignalTrigger.prototype = {
	handlers: null
	,trigger: function(event) {
		this.handlers.invoke(event);
	}
	,getLength: function() {
		return this.handlers.used;
	}
	,listen: function(cb) {
		var _this = this.handlers;
		var node = new tink_core__$Callback_ListCell(cb,_this);
		_this.cells.push(node);
		_this.used++;
		return node;
	}
	,clear: function() {
		this.handlers.clear();
	}
	,asSignal: function() {
		return this;
	}
	,__class__: tink_core_SignalTrigger
};
var utest_Assert = function() { };
utest_Assert.__name__ = "utest.Assert";
utest_Assert.processResult = function(cond,getMessage,pos) {
	if(utest_Assert.results == null) {
		throw haxe_Exception.thrown("Assert at " + pos.fileName + ":" + pos.lineNumber + " out of context. Most likely you are trying to assert after a test timeout.");
	}
	if(cond) {
		utest_Assert.results.add(utest_Assertation.Success(pos));
	} else {
		utest_Assert.results.add(utest_Assertation.Failure(getMessage(),pos));
	}
};
utest_Assert.isTrue = function(cond,msg,pos) {
	if(utest_Assert.results == null) {
		throw haxe_Exception.thrown("Assert at " + pos.fileName + ":" + pos.lineNumber + " out of context. Most likely you are trying to assert after a test timeout.");
	}
	if(cond) {
		utest_Assert.results.add(utest_Assertation.Success(pos));
	} else {
		utest_Assert.results.add(utest_Assertation.Failure(msg != null ? msg : "expected true",pos));
	}
};
utest_Assert.isFalse = function(value,msg,pos) {
	if(utest_Assert.results == null) {
		throw haxe_Exception.thrown("Assert at " + pos.fileName + ":" + pos.lineNumber + " out of context. Most likely you are trying to assert after a test timeout.");
	}
	if(value == false) {
		utest_Assert.results.add(utest_Assertation.Success(pos));
	} else {
		utest_Assert.results.add(utest_Assertation.Failure(msg != null ? msg : "expected false",pos));
	}
};
utest_Assert.isNull = function(value,msg,pos) {
	if(utest_Assert.results == null) {
		throw haxe_Exception.thrown("Assert at " + pos.fileName + ":" + pos.lineNumber + " out of context. Most likely you are trying to assert after a test timeout.");
	}
	if(value == null) {
		utest_Assert.results.add(utest_Assertation.Success(pos));
	} else {
		utest_Assert.results.add(utest_Assertation.Failure(msg != null ? msg : "expected null but it is " + utest_Assert.q(value),pos));
	}
};
utest_Assert.notNull = function(value,msg,pos) {
	if(utest_Assert.results == null) {
		throw haxe_Exception.thrown("Assert at " + pos.fileName + ":" + pos.lineNumber + " out of context. Most likely you are trying to assert after a test timeout.");
	}
	if(value != null) {
		utest_Assert.results.add(utest_Assertation.Success(pos));
	} else {
		utest_Assert.results.add(utest_Assertation.Failure(msg != null ? msg : "expected not null",pos));
	}
};
utest_Assert.is = function(value,type,msg,pos) {
	var cond = js_Boot.__instanceof(value,type);
	if(utest_Assert.results == null) {
		throw haxe_Exception.thrown("Assert at " + pos.fileName + ":" + pos.lineNumber + " out of context. Most likely you are trying to assert after a test timeout.");
	}
	if(cond) {
		utest_Assert.results.add(utest_Assertation.Success(pos));
	} else {
		utest_Assert.results.add(utest_Assertation.Failure(msg != null ? msg : "expected type " + utest_Assert.typeToString(type) + " but it is " + utest_Assert.typeToString(value),pos));
	}
};
utest_Assert.notEquals = function(expected,value,msg,pos) {
	if(utest_Assert.results == null) {
		throw haxe_Exception.thrown("Assert at " + pos.fileName + ":" + pos.lineNumber + " out of context. Most likely you are trying to assert after a test timeout.");
	}
	if(expected != value) {
		utest_Assert.results.add(utest_Assertation.Success(pos));
	} else {
		utest_Assert.results.add(utest_Assertation.Failure(msg != null ? msg : "expected " + utest_Assert.q(expected) + " and test value " + utest_Assert.q(value) + " should be different",pos));
	}
};
utest_Assert.equals = function(expected,value,msg,pos) {
	if(utest_Assert.results == null) {
		throw haxe_Exception.thrown("Assert at " + pos.fileName + ":" + pos.lineNumber + " out of context. Most likely you are trying to assert after a test timeout.");
	}
	if(expected == value) {
		utest_Assert.results.add(utest_Assertation.Success(pos));
	} else {
		utest_Assert.results.add(utest_Assertation.Failure(msg != null ? msg : "expected " + utest_Assert.q(expected) + " but it is " + utest_Assert.q(value),pos));
	}
};
utest_Assert.match = function(pattern,value,msg,pos) {
	var cond = pattern.match(value);
	if(utest_Assert.results == null) {
		throw haxe_Exception.thrown("Assert at " + pos.fileName + ":" + pos.lineNumber + " out of context. Most likely you are trying to assert after a test timeout.");
	}
	if(cond) {
		utest_Assert.results.add(utest_Assertation.Success(pos));
	} else {
		utest_Assert.results.add(utest_Assertation.Failure(msg != null ? msg : "the value " + utest_Assert.q(value) + " does not match the provided pattern",pos));
	}
};
utest_Assert.floatEquals = function(expected,value,approx,msg,pos) {
	var cond = utest_Assert._floatEquals(expected,value,approx);
	if(utest_Assert.results == null) {
		throw haxe_Exception.thrown("Assert at " + pos.fileName + ":" + pos.lineNumber + " out of context. Most likely you are trying to assert after a test timeout.");
	}
	if(cond) {
		utest_Assert.results.add(utest_Assertation.Success(pos));
	} else {
		utest_Assert.results.add(utest_Assertation.Failure(msg != null ? msg : "expected " + utest_Assert.q(expected) + " but it is " + utest_Assert.q(value),pos));
	}
};
utest_Assert._floatEquals = function(expected,value,approx) {
	if(isNaN(expected)) {
		return isNaN(value);
	} else if(isNaN(value)) {
		return false;
	} else if(!isFinite(expected) && !isFinite(value)) {
		return expected > 0 == value > 0;
	}
	if(null == approx) {
		approx = 1e-5;
	}
	return Math.abs(value - expected) <= approx;
};
utest_Assert.getTypeName = function(v) {
	var _g = Type.typeof(v);
	switch(_g._hx_index) {
	case 0:
		return "`null`";
	case 1:
		return "Int";
	case 2:
		return "Float";
	case 3:
		return "Bool";
	case 4:
		return "Object";
	case 5:
		return "function";
	case 6:
		var c = _g.c;
		return c.__name__;
	case 7:
		var e = _g.e;
		return e.__ename__;
	case 8:
		return "`Unknown`";
	}
};
utest_Assert.isIterable = function(v,isAnonym) {
	var fields = isAnonym ? Reflect.fields(v) : Type.getInstanceFields(js_Boot.getClass(v));
	if(!Lambda.has(fields,"iterator")) {
		return false;
	}
	return Reflect.isFunction(Reflect.field(v,"iterator"));
};
utest_Assert.isIterator = function(v,isAnonym) {
	var fields = isAnonym ? Reflect.fields(v) : Type.getInstanceFields(js_Boot.getClass(v));
	if(!Lambda.has(fields,"next") || !Lambda.has(fields,"hasNext")) {
		return false;
	}
	if(Reflect.isFunction(Reflect.field(v,"next"))) {
		return Reflect.isFunction(Reflect.field(v,"hasNext"));
	} else {
		return false;
	}
};
utest_Assert.sameAs = function(expected,value,status,approx) {
	var texpected = utest_Assert.getTypeName(expected);
	var tvalue = utest_Assert.getTypeName(value);
	status.expectedValue = expected;
	status.actualValue = value;
	if(texpected != tvalue && !(texpected == "Int" && tvalue == "Float" || texpected == "Float" && tvalue == "Int")) {
		status.error = "expected type " + texpected + " but it is " + tvalue + (status.path == "" ? "" : " for field " + status.path);
		return false;
	}
	var _g = Type.typeof(expected);
	switch(_g._hx_index) {
	case 1:case 2:
		if(!utest_Assert._floatEquals(expected,value,approx)) {
			status.error = "expected " + utest_Assert.q(expected) + " but it is " + utest_Assert.q(value) + (status.path == "" ? "" : " for field " + status.path);
			return false;
		}
		return true;
	case 0:case 3:
		if(expected != value) {
			status.error = "expected " + utest_Assert.q(expected) + " but it is " + utest_Assert.q(value) + (status.path == "" ? "" : " for field " + status.path);
			return false;
		}
		return true;
	case 4:
		if(status.recursive || status.path == "") {
			var tfields = Reflect.fields(value);
			var fields = Reflect.fields(expected);
			var path = status.path;
			var _g1 = 0;
			while(_g1 < fields.length) {
				var field = fields[_g1];
				++_g1;
				HxOverrides.remove(tfields,field);
				status.path = path == "" ? field : path + "." + field;
				if(!Object.prototype.hasOwnProperty.call(value,field)) {
					status.error = "expected field " + status.path + " does not exist in " + utest_Assert.q(value);
					return false;
				}
				var e = Reflect.field(expected,field);
				if(Reflect.isFunction(e)) {
					continue;
				}
				var v = Reflect.field(value,field);
				if(!utest_Assert.sameAs(e,v,status,approx)) {
					return false;
				}
			}
			if(tfields.length > 0) {
				status.error = "the tested object has extra field(s) (" + tfields.join(", ") + ") not included in the expected ones";
				return false;
			}
		}
		if(utest_Assert.isIterator(expected,true)) {
			if(!utest_Assert.isIterator(value,true)) {
				status.error = "expected Iterable but it is not " + (status.path == "" ? "" : " for field " + status.path);
				return false;
			}
			if(status.recursive || status.path == "") {
				var evalues = Lambda.array({ iterator : function() {
					return expected;
				}});
				var vvalues = Lambda.array({ iterator : function() {
					return value;
				}});
				if(evalues.length != vvalues.length) {
					status.error = "expected " + evalues.length + " values in Iterator but they are " + vvalues.length + (status.path == "" ? "" : " for field " + status.path);
					return false;
				}
				var path = status.path;
				var _g1 = 0;
				var _g2 = evalues.length;
				while(_g1 < _g2) {
					var i = _g1++;
					status.path = path == "" ? "iterator[" + i + "]" : path + "[" + i + "]";
					if(!utest_Assert.sameAs(evalues[i],vvalues[i],status,approx)) {
						status.error = "expected " + utest_Assert.q(status.expectedValue) + " but it is " + utest_Assert.q(status.actualValue) + (status.path == "" ? "" : " for field " + status.path);
						return false;
					}
				}
			}
			return true;
		}
		if(utest_Assert.isIterable(expected,true)) {
			if(!utest_Assert.isIterable(value,true)) {
				status.error = "expected Iterator but it is not " + (status.path == "" ? "" : " for field " + status.path);
				return false;
			}
			if(status.recursive || status.path == "") {
				var evalues = Lambda.array(expected);
				var vvalues = Lambda.array(value);
				if(evalues.length != vvalues.length) {
					status.error = "expected " + evalues.length + " values in Iterable but they are " + vvalues.length + (status.path == "" ? "" : " for field " + status.path);
					return false;
				}
				var path = status.path;
				var _g1 = 0;
				var _g2 = evalues.length;
				while(_g1 < _g2) {
					var i = _g1++;
					status.path = path == "" ? "iterable[" + i + "]" : path + "[" + i + "]";
					if(!utest_Assert.sameAs(evalues[i],vvalues[i],status,approx)) {
						return false;
					}
				}
			}
			return true;
		}
		return true;
	case 5:
		if(!Reflect.compareMethods(expected,value)) {
			status.error = "expected same function reference" + (status.path == "" ? "" : " for field " + status.path);
			return false;
		}
		return true;
	case 6:
		var c = _g.c;
		var cexpected = c.__name__;
		var c = js_Boot.getClass(value);
		var cvalue = c.__name__;
		if(cexpected != cvalue) {
			status.error = "expected instance of " + utest_Assert.q(cexpected) + " but it is " + utest_Assert.q(cvalue) + (status.path == "" ? "" : " for field " + status.path);
			return false;
		}
		if(typeof(expected) == "string") {
			if(expected == value) {
				return true;
			} else {
				status.error = "expected string '" + Std.string(expected) + "' but it is '" + Std.string(value) + "'";
				return false;
			}
		}
		if(((expected) instanceof Array)) {
			if(status.recursive || status.path == "") {
				if(expected.length != value.length) {
					status.error = "expected " + Std.string(expected.length) + " elements but they are " + Std.string(value.length) + (status.path == "" ? "" : " for field " + status.path);
					return false;
				}
				var path = status.path;
				var _g1 = 0;
				var _g2 = expected.length;
				while(_g1 < _g2) {
					var i = _g1++;
					status.path = path == "" ? "array[" + i + "]" : path + "[" + i + "]";
					if(!utest_Assert.sameAs(expected[i],value[i],status,approx)) {
						status.error = "expected array element at [" + i + "] to have " + utest_Assert.q(status.expectedValue) + " but it is " + utest_Assert.q(status.actualValue) + (status.path == "" ? "" : " for field " + status.path);
						return false;
					}
				}
			}
			return true;
		}
		if(((expected) instanceof Date)) {
			if(expected.getTime() != value.getTime()) {
				status.error = "expected " + utest_Assert.q(expected) + " but it is " + utest_Assert.q(value) + (status.path == "" ? "" : " for field " + status.path);
				return false;
			}
			return true;
		}
		if(((expected) instanceof haxe_io_Bytes)) {
			if(status.recursive || status.path == "") {
				var ebytes = expected;
				var vbytes = value;
				if(ebytes.length != vbytes.length) {
					return false;
				}
				var _g1 = 0;
				var _g2 = ebytes.length;
				while(_g1 < _g2) {
					var i = _g1++;
					if(ebytes.b[i] != vbytes.b[i]) {
						status.error = "expected byte " + ebytes.b[i] + " but it is " + vbytes.b[i] + (status.path == "" ? "" : " for field " + status.path);
						return false;
					}
				}
			}
			return true;
		}
		if(js_Boot.__implements(expected,haxe_IMap)) {
			if(status.recursive || status.path == "") {
				var map = js_Boot.__cast(expected , haxe_IMap);
				var vmap = js_Boot.__cast(value , haxe_IMap);
				var _g1 = [];
				var k = map.keys();
				while(k.hasNext()) {
					var k1 = k.next();
					_g1.push(k1);
				}
				var keys = _g1;
				var _g1 = [];
				var k = vmap.keys();
				while(k.hasNext()) {
					var k1 = k.next();
					_g1.push(k1);
				}
				var vkeys = _g1;
				if(keys.length != vkeys.length) {
					status.error = "expected " + keys.length + " keys but they are " + vkeys.length + (status.path == "" ? "" : " for field " + status.path);
					return false;
				}
				var path = status.path;
				var _g1 = 0;
				while(_g1 < keys.length) {
					var key = keys[_g1];
					++_g1;
					status.path = path == "" ? "hash[" + Std.string(key) + "]" : path + "[" + Std.string(key) + "]";
					if(!utest_Assert.sameAs(map.get(key),vmap.get(key),status,approx)) {
						status.error = "expected " + utest_Assert.q(status.expectedValue) + " but it is " + utest_Assert.q(status.actualValue) + (status.path == "" ? "" : " for field " + status.path);
						return false;
					}
				}
			}
			return true;
		}
		if(utest_Assert.isIterator(expected,false)) {
			if(status.recursive || status.path == "") {
				var evalues = Lambda.array({ iterator : function() {
					return expected;
				}});
				var vvalues = Lambda.array({ iterator : function() {
					return value;
				}});
				if(evalues.length != vvalues.length) {
					status.error = "expected " + evalues.length + " values in Iterator but they are " + vvalues.length + (status.path == "" ? "" : " for field " + status.path);
					return false;
				}
				var path = status.path;
				var _g1 = 0;
				var _g2 = evalues.length;
				while(_g1 < _g2) {
					var i = _g1++;
					status.path = path == "" ? "iterator[" + i + "]" : path + "[" + i + "]";
					if(!utest_Assert.sameAs(evalues[i],vvalues[i],status,approx)) {
						status.error = "expected " + utest_Assert.q(status.expectedValue) + " but it is " + utest_Assert.q(status.actualValue) + (status.path == "" ? "" : " for field " + status.path);
						return false;
					}
				}
			}
			return true;
		}
		if(utest_Assert.isIterable(expected,false)) {
			if(status.recursive || status.path == "") {
				var evalues = Lambda.array(expected);
				var vvalues = Lambda.array(value);
				if(evalues.length != vvalues.length) {
					status.error = "expected " + evalues.length + " values in Iterable but they are " + vvalues.length + (status.path == "" ? "" : " for field " + status.path);
					return false;
				}
				var path = status.path;
				var _g1 = 0;
				var _g2 = evalues.length;
				while(_g1 < _g2) {
					var i = _g1++;
					status.path = path == "" ? "iterable[" + i + "]" : path + "[" + i + "]";
					if(!utest_Assert.sameAs(evalues[i],vvalues[i],status,approx)) {
						return false;
					}
				}
			}
			return true;
		}
		if(status.recursive || status.path == "") {
			var fields = Type.getInstanceFields(js_Boot.getClass(expected));
			var path = status.path;
			var _g1 = 0;
			while(_g1 < fields.length) {
				var field = fields[_g1];
				++_g1;
				status.path = path == "" ? field : path + "." + field;
				var e = Reflect.field(expected,field);
				if(Reflect.isFunction(e)) {
					continue;
				}
				var v = Reflect.field(value,field);
				if(!utest_Assert.sameAs(e,v,status,approx)) {
					return false;
				}
			}
		}
		return true;
	case 7:
		var e = _g.e;
		var eexpected = e.__ename__;
		var e = Type.getEnum(value);
		var evalue = e.__ename__;
		if(eexpected != evalue) {
			status.error = "expected enumeration of " + utest_Assert.q(eexpected) + " but it is " + utest_Assert.q(evalue) + (status.path == "" ? "" : " for field " + status.path);
			return false;
		}
		if(status.recursive || status.path == "") {
			if(expected._hx_index != value._hx_index) {
				var e = expected;
				var tmp = "expected enum constructor " + utest_Assert.q($hxEnums[e.__enum__].__constructs__[e._hx_index]) + " but it is ";
				var e = value;
				status.error = tmp + utest_Assert.q($hxEnums[e.__enum__].__constructs__[e._hx_index]) + (status.path == "" ? "" : " for field " + status.path);
				return false;
			}
			var eparams = Type.enumParameters(expected);
			var vparams = Type.enumParameters(value);
			var path = status.path;
			var _g = 0;
			var _g1 = eparams.length;
			while(_g < _g1) {
				var i = _g++;
				status.path = path == "" ? "enum[" + i + "]" : path + "[" + i + "]";
				if(!utest_Assert.sameAs(eparams[i],vparams[i],status,approx)) {
					status.error = "expected enum param " + utest_Assert.q(expected) + " but it is " + utest_Assert.q(value) + (status.path == "" ? "" : " for field " + status.path) + " with " + status.error;
					return false;
				}
			}
		}
		return true;
	case 8:
		throw haxe_Exception.thrown("Unable to compare two unknown types");
	}
};
utest_Assert.q = function(v) {
	if(typeof(v) == "string") {
		return "\"" + StringTools.replace(v,"\"","\\\"") + "\"";
	} else {
		return Std.string(v);
	}
};
utest_Assert.same = function(expected,value,recursive,msg,approx,pos) {
	if(null == approx) {
		approx = 1e-5;
	}
	var status = { recursive : null == recursive ? true : recursive, path : "", error : null, expectedValue : expected, actualValue : value};
	if(utest_Assert.sameAs(expected,value,status,approx)) {
		utest_Assert.pass(msg,pos);
	} else {
		utest_Assert.fail(msg == null ? status.error : msg,pos);
	}
};
utest_Assert.raises = function(method,type,msgNotThrown,msgWrongType,pos) {
	var name = type != null ? type.__name__ : "Dynamic";
	try {
		method();
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
		var ex = haxe_Exception.caught(_g).unwrap();
		if(null == type) {
			utest_Assert.pass(null,pos);
		} else {
			if(null == msgWrongType) {
				msgWrongType = "expected throw of type " + name + " but it is " + Std.string(ex);
			}
			utest_Assert.isTrue(js_Boot.__instanceof(ex,type),msgWrongType,pos);
		}
		return;
	}
	if(null == msgNotThrown) {
		msgNotThrown = "exception of type " + name + " not raised";
	}
	utest_Assert.fail(msgNotThrown,pos);
};
utest_Assert.allows = function(possibilities,value,msg,pos) {
	if(Lambda.has(possibilities,value)) {
		utest_Assert.isTrue(true,msg,pos);
	} else {
		utest_Assert.fail(msg == null ? "value " + utest_Assert.q(value) + " not found in the expected possibilities " + Std.string(possibilities) : msg,pos);
	}
};
utest_Assert.contains = function(match,values,msg,pos) {
	if(Lambda.has(values,match)) {
		utest_Assert.isTrue(true,msg,pos);
	} else {
		utest_Assert.fail(msg == null ? "values " + utest_Assert.q(values) + " do not contain " + Std.string(match) : msg,pos);
	}
};
utest_Assert.notContains = function(match,values,msg,pos) {
	if(!Lambda.has(values,match)) {
		utest_Assert.isTrue(true,msg,pos);
	} else {
		utest_Assert.fail(msg == null ? "values " + utest_Assert.q(values) + " do contain " + Std.string(match) : msg,pos);
	}
};
utest_Assert.stringContains = function(match,value,msg,pos) {
	if(value != null && value.indexOf(match) >= 0) {
		utest_Assert.isTrue(true,msg,pos);
	} else {
		utest_Assert.fail(msg == null ? "value " + utest_Assert.q(value) + " does not contain " + utest_Assert.q(match) : msg,pos);
	}
};
utest_Assert.stringSequence = function(sequence,value,msg,pos) {
	if(null == value) {
		utest_Assert.fail(msg == null ? "null argument value" : msg,pos);
		return;
	}
	var p = 0;
	var _g = 0;
	while(_g < sequence.length) {
		var s = sequence[_g];
		++_g;
		var p2 = value.indexOf(s,p);
		if(p2 < 0) {
			if(msg == null) {
				msg = "expected '" + s + "' after ";
				if(p > 0) {
					var cut = HxOverrides.substr(value,0,p);
					if(cut.length > 30) {
						cut = "..." + HxOverrides.substr(cut,-27,null);
					}
					msg += " '" + cut + "'";
				} else {
					msg += " begin";
				}
			}
			utest_Assert.fail(msg,pos);
			return;
		}
		p = p2 + s.length;
	}
	utest_Assert.isTrue(true,msg,pos);
};
utest_Assert.pass = function(msg,pos) {
	if(msg == null) {
		msg = "pass expected";
	}
	utest_Assert.isTrue(true,msg,pos);
};
utest_Assert.fail = function(msg,pos) {
	if(msg == null) {
		msg = "failure expected";
	}
	utest_Assert.isTrue(false,msg,pos);
};
utest_Assert.warn = function(msg) {
	utest_Assert.results.add(utest_Assertation.Warning(msg));
};
utest_Assert.createAsync = function(f,timeout) {
	return function() {
	};
};
utest_Assert.createEvent = function(f,timeout) {
	return function(e) {
	};
};
utest_Assert.typeToString = function(t) {
	try {
		var _t = js_Boot.getClass(t);
		if(_t != null) {
			t = _t;
		}
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
	}
	try {
		return t.__name__;
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
	}
	try {
		var _t = Type.getEnum(t);
		if(_t != null) {
			t = _t;
		}
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
	}
	try {
		return t.__ename__;
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
	}
	try {
		return Std.string(Type.typeof(t));
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
	}
	try {
		return Std.string(t);
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
	}
	return "<unable to retrieve type name>";
};
var utest_Assertation = $hxEnums["utest.Assertation"] = { __ename__ : "utest.Assertation", __constructs__ : ["Success","Failure","Error","SetupError","TeardownError","TimeoutError","AsyncError","Warning","Ignore"]
	,Success: ($_=function(pos) { return {_hx_index:0,pos:pos,__enum__:"utest.Assertation",toString:$estr}; },$_.__params__ = ["pos"],$_)
	,Failure: ($_=function(msg,pos) { return {_hx_index:1,msg:msg,pos:pos,__enum__:"utest.Assertation",toString:$estr}; },$_.__params__ = ["msg","pos"],$_)
	,Error: ($_=function(e,stack) { return {_hx_index:2,e:e,stack:stack,__enum__:"utest.Assertation",toString:$estr}; },$_.__params__ = ["e","stack"],$_)
	,SetupError: ($_=function(e,stack) { return {_hx_index:3,e:e,stack:stack,__enum__:"utest.Assertation",toString:$estr}; },$_.__params__ = ["e","stack"],$_)
	,TeardownError: ($_=function(e,stack) { return {_hx_index:4,e:e,stack:stack,__enum__:"utest.Assertation",toString:$estr}; },$_.__params__ = ["e","stack"],$_)
	,TimeoutError: ($_=function(missedAsyncs,stack) { return {_hx_index:5,missedAsyncs:missedAsyncs,stack:stack,__enum__:"utest.Assertation",toString:$estr}; },$_.__params__ = ["missedAsyncs","stack"],$_)
	,AsyncError: ($_=function(e,stack) { return {_hx_index:6,e:e,stack:stack,__enum__:"utest.Assertation",toString:$estr}; },$_.__params__ = ["e","stack"],$_)
	,Warning: ($_=function(msg) { return {_hx_index:7,msg:msg,__enum__:"utest.Assertation",toString:$estr}; },$_.__params__ = ["msg"],$_)
	,Ignore: ($_=function(reason) { return {_hx_index:8,reason:reason,__enum__:"utest.Assertation",toString:$estr}; },$_.__params__ = ["reason"],$_)
};
function $iterator(o) { if( o instanceof Array ) return function() { return new haxe_iterators_ArrayIterator(o); }; return typeof(o.iterator) == 'function' ? $bind(o,o.iterator) : o.iterator; }
function $getIterator(o) { if( o instanceof Array ) return new haxe_iterators_ArrayIterator(o); else return o.iterator(); }
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.prototype.__class__ = String;
String.__name__ = "String";
Array.__name__ = "Array";
Date.prototype.__class__ = Date;
Date.__name__ = "Date";
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
haxe_Resource.content = [];
haxe_ds_ObjectMap.count = 0;
js_Boot.__toStr = ({ }).toString;
haxe_EntryPoint.pending = [];
haxe_EntryPoint.threadCount = 0;
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
haxe_io_FPHelper.i64tmp = (function($this) {
	var $r;
	var this1 = new haxe__$Int64__$_$_$Int64(0,0);
	$r = this1;
	return $r;
}(this));
haxe_io_FPHelper.helper = new DataView(new ArrayBuffer(8));
hre_RegExp.LATIN_SMALL_LETTER_G = 103;
hre_RegExp.LATIN_SMALL_LETTER_I = 105;
hre_RegExp.LATIN_SMALL_LETTER_M = 109;
hre_RegExp.LATIN_SMALL_LETTER_U = 117;
hre_RegExp.LATIN_SMALL_LETTER_Y = 121;
hre_RegExpMatcher.lineTerminators = [10,13,8232,8233];
hre_RegExpMatcher.whiteSpaces = [9,11,12,32,160,65279];
hre_RegExpMatcher.separators = hre_RegExpMatcher.lineTerminators.concat(hre_RegExpMatcher.whiteSpaces);
jali_pack_Tail.ZERO = jali_pack_Tail.unit();
jali_pack_Term._ = jali_pack_TermLift;
stx_parse_pack_Parser._ = stx_parse_pack_ParserLift;
stx_parse_pack_ParseError.FAIL = "FAIL";
stx_core_pack_Err.UUID = "e30e1389-4a72-41fe-ba9f-d7ddf3d1e247";
stx_Parse.truth = stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Or(stx_LiftParse.id("true"),stx_LiftParse.id("false"),{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 82, className : "stx.parse.pack.ParserLift", methodName : "or"}));
stx_Parse.integer = stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Regex("[\\+\\-]?\\d+",{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 139, className : "stx.parse.pack.ParserLift", methodName : "regexParser"}));
stx_Parse.float = stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Regex("[\\+\\-]?\\d+(\\.\\d+)?",{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 139, className : "stx.parse.pack.ParserLift", methodName : "regexParser"}));
stx_Parse.lower = (function($this) {
	var $r;
	var p = stx_Parse.range(97,122);
	$r = stx_parse_pack_Parser.get_self(stx_parse_pack_Parser.Anon(function(x) {
		var res = p(x.content.take(1));
		if(res && !stx_parse_pack_Input.is_end(x)) {
			return stx_parse_pack_ParseSuccess.toParseResult(stx_parse_pack_ParseSuccess.make({ content : x.content.drop(1), memo : x.memo},x.content.take(1)));
		} else {
			var fatal = false;
			if(fatal == null) {
				fatal = false;
			}
			return stx_parse_pack_ParseFailure.toParseResult(stx_parse_pack_ParseFailure.at_with(x,"predicate failed",fatal,{ fileName : "stx/Parse.hx", lineNumber : 223, className : "stx.LiftParse", methodName : "predicated"}));
		}
	}));
	return $r;
}(this));
stx_Parse.upper = (function($this) {
	var $r;
	var p = stx_Parse.range(65,90);
	$r = stx_parse_pack_Parser.get_self(stx_parse_pack_Parser.Anon(function(x) {
		var res = p(x.content.take(1));
		if(res && !stx_parse_pack_Input.is_end(x)) {
			return stx_parse_pack_ParseSuccess.toParseResult(stx_parse_pack_ParseSuccess.make({ content : x.content.drop(1), memo : x.memo},x.content.take(1)));
		} else {
			var fatal = false;
			if(fatal == null) {
				fatal = false;
			}
			return stx_parse_pack_ParseFailure.toParseResult(stx_parse_pack_ParseFailure.at_with(x,"predicate failed",fatal,{ fileName : "stx/Parse.hx", lineNumber : 223, className : "stx.LiftParse", methodName : "predicated"}));
		}
	}));
	return $r;
}(this));
stx_Parse.alpha = stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Or(stx_Parse.upper,stx_Parse.lower,{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 82, className : "stx.parse.pack.ParserLift", methodName : "or"}));
stx_Parse.digit = (function($this) {
	var $r;
	var p = stx_Parse.range(48,57);
	$r = stx_parse_pack_Parser.get_self(stx_parse_pack_Parser.Anon(function(x) {
		var res = p(x.content.take(1));
		if(res && !stx_parse_pack_Input.is_end(x)) {
			return stx_parse_pack_ParseSuccess.toParseResult(stx_parse_pack_ParseSuccess.make({ content : x.content.drop(1), memo : x.memo},x.content.take(1)));
		} else {
			var fatal = false;
			if(fatal == null) {
				fatal = false;
			}
			return stx_parse_pack_ParseFailure.toParseResult(stx_parse_pack_ParseFailure.at_with(x,"predicate failed",fatal,{ fileName : "stx/Parse.hx", lineNumber : 223, className : "stx.LiftParse", methodName : "predicated"}));
		}
	}));
	return $r;
}(this));
stx_Parse.alphanum = stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Or(stx_Parse.alpha,stx_Parse.digit,{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 82, className : "stx.parse.pack.ParserLift", methodName : "or"}));
stx_Parse.ascii = (function($this) {
	var $r;
	var p = stx_Parse.range(0,255);
	$r = stx_parse_pack_Parser.get_self(stx_parse_pack_Parser.Anon(function(x) {
		var res = p(x.content.take(1));
		if(res && !stx_parse_pack_Input.is_end(x)) {
			return stx_parse_pack_ParseSuccess.toParseResult(stx_parse_pack_ParseSuccess.make({ content : x.content.drop(1), memo : x.memo},x.content.take(1)));
		} else {
			var fatal = false;
			if(fatal == null) {
				fatal = false;
			}
			return stx_parse_pack_ParseFailure.toParseResult(stx_parse_pack_ParseFailure.at_with(x,"predicate failed",fatal,{ fileName : "stx/Parse.hx", lineNumber : 223, className : "stx.LiftParse", methodName : "predicated"}));
		}
	}));
	return $r;
}(this));
stx_Parse.valid = stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Or(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Or(stx_Parse.alpha,stx_Parse.digit,{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 82, className : "stx.parse.pack.ParserLift", methodName : "or"})),stx_LiftParse.id("_"),{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 82, className : "stx.parse.pack.ParserLift", methodName : "or"}));
stx_Parse.tab = stx_LiftParse.id("\t");
stx_Parse.space = stx_LiftParse.id(" ");
stx_Parse.nl = stx_LiftParse.id("\n");
stx_Parse.gap = stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Ors([stx_Parse.tab,stx_Parse.space],{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 85, className : "stx.parse.pack.ParserLift", methodName : "ors"}));
stx_Parse.word = stx_LiftParse.token(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_OneMany(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Or(stx_Parse.lower,stx_Parse.upper,{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 82, className : "stx.parse.pack.ParserLift", methodName : "or"})),{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 97, className : "stx.parse.pack.ParserLift", methodName : "one_many"})));
stx_Parse.quote = stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Or(stx_LiftParse.id("\""),stx_LiftParse.id("'"),{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 82, className : "stx.parse.pack.ParserLift", methodName : "or"}));
stx_Parse.escape = stx_LiftParse.id("\\");
stx_Parse.not_escaped = stx_LiftParse.id("\\\\");
stx_Parse.x = stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_With(stx_LiftParse.not(stx_Parse.not_escaped),stx_Parse.escape,function(_,b) {
	return b;
},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 113, className : "stx.parse.pack.ParserLift", methodName : "and_with"}));
stx_Parse.x_quote = stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_With(stx_Parse.x,stx_Parse.quote,function(_,b) {
	return b;
},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 113, className : "stx.parse.pack.ParserLift", methodName : "and_with"}));
stx_Parse.whitespace = (function($this) {
	var $r;
	var p = stx_Parse.range(0,33);
	$r = stx_parse_pack_Parser.get_self(stx_parse_pack_Parser.Anon(function(x) {
		var res = p(x.content.take(1));
		if(res && !stx_parse_pack_Input.is_end(x)) {
			return stx_parse_pack_ParseSuccess.toParseResult(stx_parse_pack_ParseSuccess.make({ content : x.content.drop(1), memo : x.memo},x.content.take(1)));
		} else {
			var fatal = false;
			if(fatal == null) {
				fatal = false;
			}
			return stx_parse_pack_ParseFailure.toParseResult(stx_parse_pack_ParseFailure.at_with(x,"predicate failed",fatal,{ fileName : "stx/Parse.hx", lineNumber : 223, className : "stx.LiftParse", methodName : "predicated"}));
		}
	}));
	return $r;
}(this));
stx_Parse.literalR = "^\"[^\"]*\"";
stx_Parse.literal = stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Regex(stx_Parse.literalR,{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 139, className : "stx.parse.pack.ParserLift", methodName : "regexParser"}));
stx_arrowlet_core_pack_ArrowletLift.__meta__ = { statics : { then : { doc : ["left to right composition of Arrowlets. Produces an Arrowlet running `before` and placing it's value in `after`."]}, first : { doc : ["Takes an Arrowlet<A,B>, and produces one taking a Couple that runs the Arrowlet on the left-hand side, leaving the right-handside untouched."]}, second : { doc : ["Takes an Arrowlet<A,B>, and produces one taking a Couple that runs the Arrowlet on the right-hand side, leaving the left-hand side untouched."]}, split : { doc : ["Takes two Arrowlets with thstatic static public function pure<I,O>(o:O):Arrowlet<I,O,E>                                             return _().pure(o);e same input type, and produces one which applies each Arrowlet with the same input."]}, both : { doc : ["Takes two Arrowlets and produces on that runs them in parallel, waiting for both responses before output."]}, swap : { doc : ["Changes <B,C> to <C,B> on the output of an Arrowlet"]}, fan : { doc : ["Produces a Couple output of any Arrowlet."]}, joint : { doc : ["Runs the first Arrowlet, then the second, preserving the output of the first on the left-hand side."]}, bound : { doc : ["Runs the first Arrowlet and places the input of that Arrowlet and the output in the second Arrowlet."]}, or : { doc : ["Produces an Arrowlet that will run `or_` if the input is Left(in), or '_or' if the input is Right(in);"]}, left : { doc : ["Produces an Arrowlet that will run only if the input is Left."]}, right : { doc : ["Produces an Arrowlet that will run only if the input is Right."]}}};
stx_arrowlet_core_pack_Arrowlet._ = stx_arrowlet_core_pack_ArrowletLift;
stx_arrowlet_core_pack_Terminal.ZERO = new stx_arrowlet_core_pack_TerminalApiBase().asTerminalDef();
stx_arrowlet_core_pack_arrowlet_term__$Apply_Constructor.ZERO = new stx_arrowlet_core_pack_arrowlet_term__$Apply_Constructor();
stx_arrowlet_pack_Arrange._ = stx_arrowlet_pack_ArrangeLift;
stx_arrowlet_pack_Attempt._ = stx_arrowlet_pack_AttemptLift;
stx_arrowlet_pack_Cascade._ = stx_arrowlet_pack_CascadeLift;
stx_arrowlet_pack_Proceed._ = stx_arrowlet_pack_ProceedLift;
stx_arrowlet_pack_Provide._ = stx_arrowlet_pack_ProvideLift;
stx_arrowlet_pack_Reframe._ = stx_arrowlet_pack_ReframeLift;
stx_assert_pack_Equaled.AreEqual = true;
stx_assert_pack_Equaled.NotEqual = false;
stx_assert_pack_Predicate._ = stx_assert_pack_PredicateLift;
stx_assert_type_EqualedSum.AreEqual = true;
stx_assert_type_EqualedSum.NotEqual = false;
stx_assert_type_OrderedSum.LessThan = true;
stx_assert_type_OrderedSum.NotLessThan = false;
stx_asys_pack_Distro.Windows = "Windows";
stx_asys_pack_Distro.Linux = "Linux";
stx_asys_pack_Distro.BSD = "BSD";
stx_asys_pack_Distro.Mac = "Mac";
stx_core__$Clause_Constructor.ZERO = new stx_core__$Clause_Constructor();
stx_core__$Clause_Constructor._ = new stx_core__$Clause_Destructure();
stx_core__$Declare_Constructor.ZERO = new stx_core__$Declare_Constructor();
stx_core__$ErrorCode_Constructor.ZERO = new stx_core__$ErrorCode_Constructor();
stx_core_LogicalClock.lifetime = 0;
stx_core_LogicalClock.counter = 0;
stx_core_chars_Constructor.ZERO = new stx_core_chars_Constructor();
stx_core_chars_Destructure.__meta__ = { fields : { underscore : { thx : null}}};
stx_core_chunk_Constructor.ZERO = new stx_core_chunk_Constructor();
stx_core_contract_Constructor.ZERO = new stx_core_contract_Constructor();
stx_core_iter_Constructor.ZERO = new stx_core_iter_Constructor();
stx_core_pack_Array._ = stx_core_pack_ArrayLift;
stx_core_pack_Array.ZERO = [];
stx_core_pack_Couple._ = stx_core_pack_CoupleLift;
stx_core_pack_Either._ = stx_core_pack_EitherLift;
stx_core_pack_FailCode.E_ResourceNotFound = "E_ResourceNotFound";
stx_core_pack_FailCode.E_IteratorExhaustedUnexpectedly = "E_IteratorExhaustedUnexpectedly";
stx_core_pack_FailCode.E_UnexpectedNullValueEncountered = "E_UnexpectedNullValueEncountered";
stx_core_pack_FailCode.E_OptionForcedError = "E_OptionForcedError";
stx_core_pack_FailCode.E_ValueNotReady = "E_ValueNotReady";
stx_core_pack_FailCode.E_AbstractMethod = "E_AbstractMethod";
stx_core_pack_FailCode.E_IndexOutOfBounds = "E_IndexOutOfBounds";
stx_core_pack_Option._ = stx_core_pack_OptionLift;
stx_core_pack_Outcome._ = stx_core_pack_OutcomeLift;
stx_core_pack_Position.ZERO = stx_core_pack_Position.make(null,null,null,null);
stx_core_pack_Position._ = stx_core_pack_PositionLift;
stx_core_pack_Res._ = stx_core_pack_ResLift;
stx_ds_RedBlackMap._ = stx_ds_RedBlackMapLift;
stx_ds_RedBlackSet._ = stx_ds_RedBlackSetLift;
stx_ds_RedBlackTree._ = stx_ds_RedBlackTreeLift;
stx_fn_Block.ZERO = function() {
};
stx_fn__$Block_Constructor.ZERO = new stx_fn__$Block_Constructor();
stx_fn__$Thunk_Constructor.ZERO = new stx_fn__$Thunk_Constructor();
stx_fn_Destructure.__meta__ = { fields : { cache : { params : ["The Thunk to call once"], returns : ["A Thunk which will call the input Thunk once."]}}};
stx_fn_binary_Constructor.ZERO = new stx_fn_binary_Constructor();
stx_fn_ternary_Constructor.ZERO = new stx_fn_ternary_Constructor();
stx_fn_unary_Constructor.ZERO = new stx_fn_unary_Constructor();
stx_fp_pack_Continuation._ = stx_fp_pack_ContinuationLift;
stx_fp_pack_LazyStream.ZERO = stx_fp_pack_LazyStream.unit();
stx_fp_pack_StateLift.__meta__ = { statics : { exec : { doc : ["Run `State` with `s`, dropping the result and returning `s`."]}, 'eval' : { doc : ["Run `State` with `s`, returning the result."]}}};
stx_fs_path_pack_Archive._ = stx_fs_path_pack_ArchiveLift;
stx_fs_path_pack_Directory._ = stx_fs_path_pack__$Directory_DirectoryLift;
stx_fs_path_pack_Directory.pos = stx_core_use_UseNano.here(stx_core_pack_Wildcard.__,{ fileName : "src/main/haxe/stx/fs/path/pack/Directory.hx", lineNumber : 74, className : "stx.fs.path.pack._Directory.Directory_Impl_", methodName : "pos"});
stx_fs_path_pack_Raw._ = stx_fs_path_pack_RawLift;
stx_fs_path_pack_Separator.WinSeparator = "\\\\";
stx_fs_path_pack_Separator.PosixSeparator = "/";
stx_log_pack_log_pack_Bias.instance = true;
stx_log_Config.instance = new stx_log_Config(stx_log_pack_log_pack_Bias.instance);
stx_log_pack_LogPosition.id = "306cccf1-89a7-44a4-b99a-7c69772a528d";
stx_log_pack_Log.config = stx_log_Config.instance;
stx_log_pack_Log.instance = stx_log_pack_Log._new();
stx_log_pack_log_Constructor.ZERO = new stx_log_pack_log_Constructor();
stx_parse_Jali.whitespace = stx_Parse.whitespace;
stx_parse_Jali.l_brckt = (function($this) {
	var $r;
	var p = stx_parse_Jali.spaced(stx_LiftParse.id("["));
	p.tag = haxe_ds_Option.Some("l_brckt");
	var name = "l_brckt";
	$r = stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_ErrorTransformer(p,function(err) {
		return err.map(function(info) {
			return stx_parse_pack_ParseErrorInfo.tag(info,name);
		});
	},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 165, className : "stx.parse.pack.ParserLift", methodName : "with_error_tag"}));
	return $r;
}(this));
stx_parse_Jali.r_brckt = (function($this) {
	var $r;
	var p = stx_parse_Jali.spaced(stx_LiftParse.id("]"));
	p.tag = haxe_ds_Option.Some("r_brckt");
	var name = "r_brckt";
	$r = stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_ErrorTransformer(p,function(err) {
		return err.map(function(info) {
			return stx_parse_pack_ParseErrorInfo.tag(info,name);
		});
	},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 165, className : "stx.parse.pack.ParserLift", methodName : "with_error_tag"}));
	return $r;
}(this));
stx_parse_Jali.literal = (function($this) {
	var $r;
	var p = stx_parse_pack_Parser._new(new stx_parse_term_Literal(null,{ fileName : "stx/parse/Jali.hx", lineNumber : 13, className : "stx.parse.Jali", methodName : "literal"}));
	p.tag = haxe_ds_Option.Some("literal");
	var name = "literal";
	$r = stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_ErrorTransformer(p,function(err) {
		return err.map(function(info) {
			return stx_parse_pack_ParseErrorInfo.tag(info,name);
		});
	},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 165, className : "stx.parse.pack.ParserLift", methodName : "with_error_tag"}));
	return $r;
}(this));
stx_parse_Jali.alphanum = stx_Parse.alphanum;
stx_parse_Jali.alpha = stx_Parse.alpha;
stx_parse_Jali.underscore = stx_LiftParse.id("_");
stx_parse_Jali.ident_punc = (function($this) {
	var $r;
	var _this = "._".split("");
	var result = new Array(_this.length);
	{
		var _g = 0;
		var _g1 = _this.length;
		while(_g < _g1) {
			var i = _g++;
			result[i] = stx_LiftParse.id(_this[i]);
		}
	}
	$r = stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Ors(result,{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 85, className : "stx.parse.pack.ParserLift", methodName : "ors"}));
	return $r;
}(this));
stx_parse_Jali.invalid_symbol_head_char = stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Ors([stx_parse_Jali.whitespace,stx_parse_Jali.symbol_head_char],{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 85, className : "stx.parse.pack.ParserLift", methodName : "ors"}));
stx_parse_Jali.symbol_head_char = stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Or(stx_parse_Jali.alpha,stx_parse_Jali.underscore,{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 82, className : "stx.parse.pack.ParserLift", methodName : "or"}));
stx_parse_Jali.symbol_body_char = stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Or(stx_parse_Jali.alphanum,stx_parse_Jali.ident_punc,{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 82, className : "stx.parse.pack.ParserLift", methodName : "or"}));
stx_parse_Jali.symbol_p = (function($this) {
	var $r;
	var p = stx_LiftParse.token(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Then(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_With(stx_parse_Jali.symbol_head_char,stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Many(stx_parse_Jali.symbol_body_char,{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 94, className : "stx.parse.pack.ParserLift", methodName : "many"})),function(l,r) {
		return stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,l,r);
	},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 103, className : "stx.parse.pack.ParserLift", methodName : "and"})),function(tp) {
		return [stx_core_pack_CoupleLift.fst(tp)].concat(stx_core_pack_CoupleLift.snd(tp));
	},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 88, className : "stx.parse.pack.ParserLift", methodName : "then"})));
	p.tag = haxe_ds_Option.Some("symbol_p");
	var name = "symbol_p";
	$r = stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_ErrorTransformer(p,function(err) {
		return err.map(function(info) {
			return stx_parse_pack_ParseErrorInfo.tag(info,name);
		});
	},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 165, className : "stx.parse.pack.ParserLift", methodName : "with_error_tag"}));
	return $r;
}(this));
stx_parse_Jali.token = (function($this) {
	var $r;
	var p = stx_parse_Jali.spaced(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Or(stx_parse_Jali.literal,stx_parse_Jali.symbol_p,{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 82, className : "stx.parse.pack.ParserLift", methodName : "or"})));
	p.tag = haxe_ds_Option.Some("token");
	var name = "token";
	$r = stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_ErrorTransformer(p,function(err) {
		return err.map(function(info) {
			return stx_parse_pack_ParseErrorInfo.tag(info,name);
		});
	},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 165, className : "stx.parse.pack.ParserLift", methodName : "with_error_tag"}));
	return $r;
}(this));
stx_parse_pack_LR._ = stx_parse_pack_LRLift;
stx_parse_pack__$UID_UIDs._parserUid = 0;
stx_parse_term_Json.l_acc_p = stx_parse_term_Json.spaced(stx_LiftParse.id("{"));
stx_parse_term_Json.r_acc_p = stx_parse_term_Json.spaced(stx_LiftParse.id("}"));
stx_parse_term_Json.l_brkt_p = stx_parse_term_Json.spaced(stx_LiftParse.id("["));
stx_parse_term_Json.r_brkt_p = stx_parse_term_Json.spaced(stx_LiftParse.id("]"));
stx_parse_term_Json.nada = stx_parse_term_Json.spaced(stx_LiftParse.id("null"));
stx_parse_term_Json.comma_p = stx_parse_term_Json.spaced(stx_LiftParse.id(","));
stx_parse_term_Json.lit_content_p = (function($this) {
	var $r;
	var p = stx_LiftParse.token(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Many(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_With(stx_LiftParse.not(stx_LiftParse.id("\"")),stx_Parse.anything(),function(_,b) {
		return b;
	},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 113, className : "stx.parse.pack.ParserLift", methodName : "and_with"})),{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 94, className : "stx.parse.pack.ParserLift", methodName : "many"})));
	p.tag = haxe_ds_Option.Some("lit_content");
	var name = "lit_content";
	$r = stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_ErrorTransformer(p,function(err) {
		return err.map(function(info) {
			return stx_parse_pack_ParseErrorInfo.tag(info,name);
		});
	},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 165, className : "stx.parse.pack.ParserLift", methodName : "with_error_tag"}));
	return $r;
}(this));
stx_parse_term_Json.ident_p = stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_With(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_With(stx_parse_term_Json.spaced(stx_LiftParse.id("\"")),stx_parse_term_Json.lit_content_p,function(_,b) {
	return b;
},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 113, className : "stx.parse.pack.ParserLift", methodName : "and_with"})),stx_LiftParse.id("\""),function(a,_) {
	return a;
},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 100, className : "stx.parse.pack.ParserLift", methodName : "and_"}));
stx_parse_term_Json.integer = (function($this) {
	var $r;
	var p = stx_Parse.range(48,57);
	$r = stx_parse_term_Json.spaced(stx_LiftParse.token(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_OneMany(stx_parse_pack_Parser.get_self(stx_parse_pack_Parser.Anon(function(x) {
		var res = p(x.content.take(1));
		if(res && !stx_parse_pack_Input.is_end(x)) {
			return stx_parse_pack_ParseSuccess.toParseResult(stx_parse_pack_ParseSuccess.make({ content : x.content.drop(1), memo : x.memo},x.content.take(1)));
		} else {
			var fatal = false;
			if(fatal == null) {
				fatal = false;
			}
			return stx_parse_pack_ParseFailure.toParseResult(stx_parse_pack_ParseFailure.at_with(x,"predicate failed",fatal,{ fileName : "stx/Parse.hx", lineNumber : 223, className : "stx.LiftParse", methodName : "predicated"}));
		}
	})),{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 97, className : "stx.parse.pack.ParserLift", methodName : "one_many"}))));
	return $r;
}(this));
stx_parse_term_Json.data_p = (function($this) {
	var $r;
	var p = stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Then(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Or(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Or(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Or(stx_parse_term_Json.ident_p,stx_parse_term_Json.integer,{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 82, className : "stx.parse.pack.ParserLift", methodName : "or"})),stx_parse_term_Json.spaced(stx_Parse.truth),{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 82, className : "stx.parse.pack.ParserLift", methodName : "or"})),stx_parse_term_Json.nada,{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 82, className : "stx.parse.pack.ParserLift", methodName : "or"})),stx_parse_term_JsonSum.JsData,{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 88, className : "stx.parse.pack.ParserLift", methodName : "then"}));
	p.tag = haxe_ds_Option.Some("data_p");
	var name = "data_p";
	$r = stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_ErrorTransformer(p,function(err) {
		return err.map(function(info) {
			return stx_parse_pack_ParseErrorInfo.tag(info,name);
		});
	},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 165, className : "stx.parse.pack.ParserLift", methodName : "with_error_tag"}));
	return $r;
}(this));
stx_parse_test_SimpleParser.test_id = stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Identifier("test",{ fileName : "stx/parse/test/SimpleParser.hx", lineNumber : 15, className : "stx.parse.test.SimpleParser", methodName : "test_id"}));
stx_parse_test_SimpleParser.p_int = stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Then(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Regex("[0-9]+",{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 139, className : "stx.parse.pack.ParserLift", methodName : "regexParser"})),function(x) {
	return stx_parse_test_Expr.Num(Std.parseInt(x));
},{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 88, className : "stx.parse.pack.ParserLift", methodName : "then"}));
stx_parse_test_SimpleParser.p_star_id = stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Identifier("x",{ fileName : "stx/parse/test/SimpleParser.hx", lineNumber : 45, className : "stx.parse.test.SimpleParser", methodName : "p_star_id"}));
stx_parse_test_SimpleParser.p_plus_id = stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Identifier("+",{ fileName : "stx/parse/test/SimpleParser.hx", lineNumber : 46, className : "stx.parse.test.SimpleParser", methodName : "p_plus_id"}));
stx_parse_test_SimpleParser.p_expr = stx_parse_pack_LRLift.memo(stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_Ors([stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_LAnon(stx_parse_test_SimpleParser.p_mult)),stx_parse_pack_Parser._new(new stx_parse_pack_parser_term_LAnon(stx_parse_test_SimpleParser.p_plus)),stx_parse_test_SimpleParser.p_int],{ fileName : "stx/parse/pack/Parser.hx", lineNumber : 85, className : "stx.parse.pack.ParserLift", methodName : "ors"})));
stx_run_pack_AutomationError.UUID = "7512d8c7-87bd-4b09-8f85-f3fd63c47309";
stx_run_pack_Recall._ = stx_run_pack_RecallLift;
stx_run_pack_Scheduler.ZERO = stx_run_pack_Scheduler.unit();
stx_run_pack_Runtime.ZERO = new stx_run_pack_RuntimeBase();
stx_run_pack_Task.ZERO = stx_run_pack_Task._new(new stx_run_pack_task_term_Base());
tink_core_Callback.depth = 0;
tink_core_Callback.MAX_DEPTH = 500;
tink_core__$Future_NeverFuture.inst = new tink_core__$Future_NeverFuture();
tink_core_Future.NULL = new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(null));
tink_core_Future.NOISE = new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Noise.Noise));
tink_core_Future.NEVER = tink_core__$Future_NeverFuture.inst;
tink_core_Lazy.NULL = new tink_core__$Lazy_LazyConst(null);
tink_core_Progress.INIT = (function($this) {
	var $r;
	var this1 = new tink_core_MPair(0.0,haxe_ds_Option.None);
	$r = this1;
	return $r;
}(this));
tink_core_Promise.NULL = new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(null)));
tink_core_Promise.NOISE = new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(tink_core_Noise.Noise)));
tink_core_Promise.NEVER = (function($this) {
	var $r;
	var ret = tink_core_Future.NEVER.map(tink_core_Outcome.Success);
	$r = ret.gather();
	return $r;
}(this));
{
	Main.main();
	haxe_EntryPoint.run();
}
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
